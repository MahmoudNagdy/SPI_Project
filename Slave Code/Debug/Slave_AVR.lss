
Slave_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  000064d8  0000656c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800184  00800184  00006690  2**0
                  ALLOC
  3 .stab         00006d68  00000000  00000000  00006690  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029a4  00000000  00000000  0000d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000ff1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000100ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000120fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0001325e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00014264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00014404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  000146c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014fd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_1>
       8:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__vector_2>
       c:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_10>
      2c:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 31 	call	0x629a	; 0x629a <main>
      8a:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 32 	jmp	0x6466	; 0x6466 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 32 	jmp	0x647e	; 0x647e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 32 	jmp	0x64b6	; 0x64b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 32 	jmp	0x647e	; 0x647e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 32 	jmp	0x64b6	; 0x64b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 32 	jmp	0x6466	; 0x6466 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 32 	jmp	0x647e	; 0x647e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5b 32 	jmp	0x64b6	; 0x64b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3f 32 	jmp	0x647e	; 0x647e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5b 32 	jmp	0x64b6	; 0x64b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3f 32 	jmp	0x647e	; 0x647e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5b 32 	jmp	0x64b6	; 0x64b6 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3c 32 	jmp	0x6478	; 0x6478 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 58 32 	jmp	0x64b0	; 0x64b0 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 5f 32 	jmp	0x64be	; 0x64be <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     cb6:	a1 e4       	ldi	r26, 0x41	; 65
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e4       	ldi	r30, 0x41	; 65
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_voidDisable>:

void WDT_voidDisable(void){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     cee:	a1 e4       	ldi	r26, 0x41	; 65
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e4       	ldi	r30, 0x41	; 65
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     cfc:	a1 e4       	ldi	r26, 0x41	; 65
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e4       	ldi	r30, 0x41	; 65
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"


void UART_Init(void){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <UART_Init+0x6>
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	
	/* This Variable To Put 1 In Bit 7 & Select Asynch Mode  */
	u8 Local_u8UCSRCValue = 0x80;
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Variable To Select Boud Rate */
	u16 Local_u16BoudRate = 103;
     d26:	87 e6       	ldi	r24, 0x67	; 103
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Select Normal Speed Mode */
	#if Speed_Mode == Normal_Speed
	CLR_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
     d2e:	ab e2       	ldi	r26, 0x2B	; 43
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e2       	ldi	r30, 0x2B	; 43
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	8c 93       	st	X, r24
	#elif Speed_Mode == Double_Speed
	SET_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
	#endif
	
	/* Disable MPCM */
	CLR_BIT(UART_u8_UCSRA_REG, UART_MPCM_PIN);
     d3c:	ab e2       	ldi	r26, 0x2B	; 43
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	eb e2       	ldi	r30, 0x2B	; 43
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
	CLR_BIT(Local_u8UCSRCValue, UART_UCSZ0);
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	
	#elif BitData_Mode == Eight_Data
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8b 7f       	andi	r24, 0xFB	; 251
     d56:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ0);
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	84 60       	ori	r24, 0x04	; 4
     d62:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	#endif
	
	/* Operation Mode (Asynch / Synch) */
	#if Operation_Mode == ASynch
	CLR_BIT(Local_u8UCSRCValue, UART_UMSEL);
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	8f 7b       	andi	r24, 0xBF	; 191
     d68:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UMSEL);
	#endif
	
	/* Select Parity Mode (None / Even / Odd) */
	#if Parity_Mode == None
	CLR_BIT(Local_u8UCSRCValue, UART_UPM0);
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	8f 7e       	andi	r24, 0xEF	; 239
     d6e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue, UART_UPM1);
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UPM1);
	#endif
	
	/*  Stop Bits Mode ( 1 / 2) */
	#if StopBits_Mode == One_Bit
	CLR_BIT(Local_u8UCSRCValue, UART_USBS);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8b 83       	std	Y+3, r24	; 0x03
	#elif StopBits_Mode == Two_Bits
	SET_BIT(Local_u8UCSRCValue, UART_USBS);
	#endif
	
	/* Update UCSRC Reg Value  */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     d7c:	e0 e4       	ldi	r30, 0x40	; 64
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	80 83       	st	Z, r24
	
	/* Boud Rate => 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BoudRate;
     d84:	e9 e2       	ldi	r30, 0x29	; 41
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BoudRate >> 8);
     d8c:	e0 e4       	ldi	r30, 0x40	; 64
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	89 2f       	mov	r24, r25
     d96:	99 27       	eor	r25, r25
     d98:	80 83       	st	Z, r24
	
	/* Enable Tx & Rx */
	SET_BIT(UART_u8_UCSRB_REG, UART_TXEN_PIN);
     d9a:	aa e2       	ldi	r26, 0x2A	; 42
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e2       	ldi	r30, 0x2A	; 42
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG, UART_RXEN_PIN);
     da8:	aa e2       	ldi	r26, 0x2A	; 42
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e2       	ldi	r30, 0x2A	; 42
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	8c 93       	st	X, r24
	
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <UART_Send1ByteData>:

void UART_Send1ByteData(u8 Copy_u8Sended1ByteData){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Pin Should be 1 (empty) to be able to write date in it */
	while(!GET_BIT(UART_u8_UCSRA_REG, UART_UDRE_PIN));
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 95       	swap	r24
     dd6:	86 95       	lsr	r24
     dd8:	87 70       	andi	r24, 0x07	; 7
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	a1 f3       	breq	.-24     	; 0xdce <UART_Send1ByteData+0xc>
	
	/* Send 1 Byte Data */
	UART_u8_UDR_REG = Copy_u8Sended1ByteData;
     de6:	ec e2       	ldi	r30, 0x2C	; 44
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	80 83       	st	Z, r24
	
}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <UART_SendString>:

void UART_SendString(u8 *Copy_u8SendedString){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <UART_SendString+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <UART_SendString+0x30>
	while(Copy_u8SendedString[i] !=  '\0'){
		UART_Send1ByteData(Copy_u8SendedString[i]);
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
		i++;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	89 83       	std	Y+1, r24	; 0x01
	
}

void UART_SendString(u8 *Copy_u8SendedString){
	u8 i = 0;
	while(Copy_u8SendedString[i] !=  '\0'){
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	39 f7       	brne	.-50     	; 0xe0a <UART_SendString+0x14>
		UART_Send1ByteData(Copy_u8SendedString[i]);
		i++;
	}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <UART_DisplayNumber>:

void UART_DisplayNumber(u32 num){
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	68 97       	sbiw	r28, 0x18	; 24
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	6d 8b       	std	Y+21, r22	; 0x15
     e62:	7e 8b       	std	Y+22, r23	; 0x16
     e64:	8f 8b       	std	Y+23, r24	; 0x17
     e66:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
     e68:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
     e6a:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	08 2f       	mov	r16, r24
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	8d 89       	ldd	r24, Y+21	; 0x15
     e74:	9e 89       	ldd	r25, Y+22	; 0x16
     e76:	af 89       	ldd	r26, Y+23	; 0x17
     e78:	b8 8d       	ldd	r27, Y+24	; 0x18
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	28 2f       	mov	r18, r24
     e90:	20 5d       	subi	r18, 0xD0	; 208
     e92:	ce 01       	movw	r24, r28
     e94:	05 96       	adiw	r24, 0x05	; 5
     e96:	fc 01       	movw	r30, r24
     e98:	e0 0f       	add	r30, r16
     e9a:	f1 1f       	adc	r31, r17
     e9c:	20 83       	st	Z, r18
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
     ea4:	8d 89       	ldd	r24, Y+21	; 0x15
     ea6:	9e 89       	ldd	r25, Y+22	; 0x16
     ea8:	af 89       	ldd	r26, Y+23	; 0x17
     eaa:	b8 8d       	ldd	r27, Y+24	; 0x18
     eac:	2a e0       	ldi	r18, 0x0A	; 10
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
     ebc:	da 01       	movw	r26, r20
     ebe:	c9 01       	movw	r24, r18
     ec0:	8d 8b       	std	Y+21, r24	; 0x15
     ec2:	9e 8b       	std	Y+22, r25	; 0x16
     ec4:	af 8b       	std	Y+23, r26	; 0x17
     ec6:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
     ec8:	8d 89       	ldd	r24, Y+21	; 0x15
     eca:	9e 89       	ldd	r25, Y+22	; 0x16
     ecc:	af 89       	ldd	r26, Y+23	; 0x17
     ece:	b8 8d       	ldd	r27, Y+24	; 0x18
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	51 f6       	brne	.-108    	; 0xe6c <UART_DisplayNumber+0x24>

    if (isNegative) {
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 23       	and	r24, r24
     edc:	69 f0       	breq	.+26     	; 0xef8 <UART_DisplayNumber+0xb0>
        buffer[i++] = '-';
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	05 96       	adiw	r24, 0x05	; 5
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	8d e2       	ldi	r24, 0x2D	; 45
     ef0:	80 83       	st	Z, r24
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     ef8:	1a 82       	std	Y+2, r1	; 0x02
     efa:	3d c0       	rjmp	.+122    	; 0xf76 <UART_DisplayNumber+0x12e>
        char temp = buffer[j];
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	ce 01       	movw	r24, r28
     f04:	05 96       	adiw	r24, 0x05	; 5
     f06:	fc 01       	movw	r30, r24
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b9 01       	movw	r22, r18
     f24:	68 1b       	sub	r22, r24
     f26:	79 0b       	sbc	r23, r25
     f28:	cb 01       	movw	r24, r22
     f2a:	9c 01       	movw	r18, r24
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	30 40       	sbci	r19, 0x00	; 0
     f30:	ce 01       	movw	r24, r28
     f32:	05 96       	adiw	r24, 0x05	; 5
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	20 81       	ld	r18, Z
     f3c:	ce 01       	movw	r24, r28
     f3e:	05 96       	adiw	r24, 0x05	; 5
     f40:	fc 01       	movw	r30, r24
     f42:	e4 0f       	add	r30, r20
     f44:	f5 1f       	adc	r31, r21
     f46:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a9 01       	movw	r20, r18
     f56:	48 1b       	sub	r20, r24
     f58:	59 0b       	sbc	r21, r25
     f5a:	ca 01       	movw	r24, r20
     f5c:	9c 01       	movw	r18, r24
     f5e:	21 50       	subi	r18, 0x01	; 1
     f60:	30 40       	sbci	r19, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	05 96       	adiw	r24, 0x05	; 5
     f66:	fc 01       	movw	r30, r24
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	98 2f       	mov	r25, r24
     f7a:	96 95       	lsr	r25
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	89 17       	cp	r24, r25
     f80:	08 f4       	brcc	.+2      	; 0xf84 <UART_DisplayNumber+0x13c>
     f82:	bc cf       	rjmp	.-136    	; 0xefc <UART_DisplayNumber+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	05 96       	adiw	r24, 0x05	; 5
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	10 82       	st	Z, r1

    // Write the string to LCD
    UART_SendString(buffer);
     f96:	ce 01       	movw	r24, r28
     f98:	05 96       	adiw	r24, 0x05	; 5
     f9a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <UART_SendString>
}
     f9e:	68 96       	adiw	r28, 0x18	; 24
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <UART_displayFloat>:

void UART_displayFloat(f32 number) {
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	28 97       	sbiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	6d 83       	std	Y+5, r22	; 0x05
     fca:	7e 83       	std	Y+6, r23	; 0x06
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
     fd0:	6d 81       	ldd	r22, Y+5	; 0x05
     fd2:	7e 81       	ldd	r23, Y+6	; 0x06
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	aa 27       	eor	r26, r26
     fea:	97 fd       	sbrc	r25, 7
     fec:	a0 95       	com	r26
     fee:	ba 2f       	mov	r27, r26
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	6d 81       	ldd	r22, Y+5	; 0x05
     ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a e7       	ldi	r20, 0x7A	; 122
    1016:	54 e4       	ldi	r21, 0x44	; 68
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	84 36       	cpi	r24, 0x64	; 100
    1036:	91 05       	cpc	r25, r1
    1038:	54 f0       	brlt	.+20     	; 0x104e <UART_displayFloat+0x9a>
    	integerPart /= 10;
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	b9 01       	movw	r22, r18
    1044:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <__divmodhi4>
    1048:	cb 01       	movw	r24, r22
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    }
    UART_DisplayNumber(integerPart);
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	aa 27       	eor	r26, r26
    1054:	97 fd       	sbrc	r25, 7
    1056:	a0 95       	com	r26
    1058:	ba 2f       	mov	r27, r26
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_DisplayNumber>
    UART_Send1ByteData('.');
    1062:	8e e2       	ldi	r24, 0x2E	; 46
    1064:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
    UART_DisplayNumber(decimalPart);
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	aa 27       	eor	r26, r26
    106e:	97 fd       	sbrc	r25, 7
    1070:	a0 95       	com	r26
    1072:	ba 2f       	mov	r27, r26
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_DisplayNumber>
}
    107c:	28 96       	adiw	r28, 0x08	; 8
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <UART_u8Recieve1ByteData>:

u8 UART_u8Recieve1ByteData(u8 *Copy_Pu8RecievedByteData){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <UART_u8Recieve1ByteData+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8RecievedByteData != NULL){
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <UART_u8Recieve1ByteData+0x34>
		while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	dc f7       	brge	.-10     	; 0x10aa <UART_u8Recieve1ByteData+0x1c>
		*Copy_Pu8RecievedByteData = UART_u8_UDR_REG;
    10b4:	ec e2       	ldi	r30, 0x2C	; 44
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 83       	st	Z, r24
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <UART_u8Recieve1ByteData+0x36>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    10c2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <UART_u8RecieveString>:


u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <UART_u8RecieveString+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <UART_u8RecieveString+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    10ea:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8RecievedString != NULL){
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	19 f1       	breq	.+70     	; 0x113a <UART_u8RecieveString+0x68>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <UART_u8RecieveString+0x4c>
		while(i < Copy_u8StringSize){
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    10f6:	eb e2       	ldi	r30, 0x2B	; 43
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 23       	and	r24, r24
    10fe:	dc f7       	brge	.-10     	; 0x10f6 <UART_u8RecieveString+0x24>
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	dc 01       	movw	r26, r24
    110c:	a2 0f       	add	r26, r18
    110e:	b3 1f       	adc	r27, r19
    1110:	ec e2       	ldi	r30, 0x2C	; 44
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8c 93       	st	X, r24
			i++;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	89 83       	std	Y+1, r24	; 0x01
u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 i = 0;
	
	if(Copy_Pu8RecievedString != NULL){
		while(i < Copy_u8StringSize){
    111e:	99 81       	ldd	r25, Y+1	; 0x01
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	98 17       	cp	r25, r24
    1124:	40 f3       	brcs	.-48     	; 0x10f6 <UART_u8RecieveString+0x24>
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
			i++;
		}
		Copy_Pu8RecievedString[i] = '\0';
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	10 82       	st	Z, r1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <UART_u8RecieveString+0x6a>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    113a:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
    1172:	a3 e5       	ldi	r26, 0x53	; 83
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e3 e5       	ldi	r30, 0x53	; 83
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 62       	ori	r24, 0x20	; 32
    117e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 61       	ori	r24, 0x10	; 16
    118c:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8b 7f       	andi	r24, 0xFB	; 251
    11b6:	8c 93       	st	X, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
    11e2:	ae e4       	ldi	r26, 0x4E	; 78
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ee e4       	ldi	r30, 0x4E	; 78
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	88 60       	ori	r24, 0x08	; 8
    11ee:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
    11f0:	ae e4       	ldi	r26, 0x4E	; 78
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee e4       	ldi	r30, 0x4E	; 78
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 61       	ori	r24, 0x10	; 16
    11fc:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
    11fe:	af e4       	ldi	r26, 0x4F	; 79
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ef e4       	ldi	r30, 0x4F	; 79
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
    120c:	af e4       	ldi	r26, 0x4F	; 79
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e4       	ldi	r30, 0x4F	; 79
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 7b       	andi	r24, 0xBF	; 191
    1218:	8c 93       	st	X, r24

	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
    121a:	ae e4       	ldi	r26, 0x4E	; 78
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ee e4       	ldi	r30, 0x4E	; 78
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8e 7f       	andi	r24, 0xFE	; 254
    1226:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
    1228:	ae e4       	ldi	r26, 0x4E	; 78
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e4       	ldi	r30, 0x4E	; 78
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
    1236:	ae e4       	ldi	r26, 0x4E	; 78
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ee e4       	ldi	r30, 0x4E	; 78
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8b 7f       	andi	r24, 0xFB	; 251
    1242:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 39999;
    1244:	e6 e4       	ldi	r30, 0x46	; 70
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8f e3       	ldi	r24, 0x3F	; 63
    124a:	9c e9       	ldi	r25, 0x9C	; 156
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = 3499;
    1250:	ea e4       	ldi	r30, 0x4A	; 74
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8b ea       	ldi	r24, 0xAB	; 171
    1256:	9d e0       	ldi	r25, 0x0D	; 13
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <TIMERS_u8TIMER0SetCallBack+0x6>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9b 83       	std	Y+3, r25	; 0x03
    1270:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	9b 81       	ldd	r25, Y+3	; 0x03
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	90 93 85 01 	sts	0x0185, r25
    1286:	80 93 84 01 	sts	0x0184, r24
    128a:	01 c0       	rjmp	.+2      	; 0x128e <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    128c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	90 93 87 01 	sts	0x0187, r25
    12c0:	80 93 86 01 	sts	0x0186, r24
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    12e2:	ec e5       	ldi	r30, 0x5C	; 92
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	80 83       	st	Z, r24
	
}
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
    12fe:	e2 e5       	ldi	r30, 0x52	; 82
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
    131c:	ea e4       	ldi	r30, 0x4A	; 74
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMERS_voidTIMER1SetTimerValue+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
    1340:	ec e4       	ldi	r30, 0x4C	; 76
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
    135e:	ec e4       	ldi	r30, 0x4C	; 76
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1396:	80 91 88 01 	lds	r24, 0x0188
    139a:	90 91 89 01 	lds	r25, 0x0189
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	90 93 89 01 	sts	0x0189, r25
    13a4:	80 93 88 01 	sts	0x0188, r24
	if(Local_u16CounterOVF == 3907){
    13a8:	80 91 88 01 	lds	r24, 0x0188
    13ac:	90 91 89 01 	lds	r25, 0x0189
    13b0:	2f e0       	ldi	r18, 0x0F	; 15
    13b2:	83 34       	cpi	r24, 0x43	; 67
    13b4:	92 07       	cpc	r25, r18
    13b6:	99 f4       	brne	.+38     	; 0x13de <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    13b8:	e2 e5       	ldi	r30, 0x52	; 82
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 ec       	ldi	r24, 0xC0	; 192
    13be:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    13c0:	10 92 89 01 	sts	0x0189, r1
    13c4:	10 92 88 01 	sts	0x0188, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
    13c8:	80 91 84 01 	lds	r24, 0x0184
    13cc:	90 91 85 01 	lds	r25, 0x0185
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
    13d4:	e0 91 84 01 	lds	r30, 0x0184
    13d8:	f0 91 85 01 	lds	r31, 0x0185
    13dc:	09 95       	icall
		}
	}
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    142e:	80 91 8a 01 	lds	r24, 0x018A
    1432:	90 91 8b 01 	lds	r25, 0x018B
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	90 93 8b 01 	sts	0x018B, r25
    143c:	80 93 8a 01 	sts	0x018A, r24
	if(Local_u16CounterCTC == 10000){
    1440:	80 91 8a 01 	lds	r24, 0x018A
    1444:	90 91 8b 01 	lds	r25, 0x018B
    1448:	27 e2       	ldi	r18, 0x27	; 39
    144a:	80 31       	cpi	r24, 0x10	; 16
    144c:	92 07       	cpc	r25, r18
    144e:	79 f4       	brne	.+30     	; 0x146e <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    1450:	10 92 8b 01 	sts	0x018B, r1
    1454:	10 92 8a 01 	sts	0x018A, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    1458:	80 91 86 01 	lds	r24, 0x0186
    145c:	90 91 87 01 	lds	r25, 0x0187
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    1464:	e0 91 86 01 	lds	r30, 0x0186
    1468:	f0 91 87 01 	lds	r31, 0x0187
    146c:	09 95       	icall
		}
	}
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <Switch_Init+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <Switch_Init+0x8>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    14a8:	1a 82       	std	Y+2, r1	; 0x02
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	50 c0       	rjmp	.+160    	; 0x154e <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    14ae:	29 81       	ldd	r18, Y+1	; 0x01
    14b0:	3a 81       	ldd	r19, Y+2	; 0x02
    14b2:	c9 01       	movw	r24, r18
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	40 81       	ld	r20, Z
    14c8:	29 81       	ldd	r18, Y+1	; 0x01
    14ca:	3a 81       	ldd	r19, Y+2	; 0x02
    14cc:	c9 01       	movw	r24, r18
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	28 0f       	add	r18, r24
    14d4:	39 1f       	adc	r19, r25
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	fc 01       	movw	r30, r24
    14dc:	e2 0f       	add	r30, r18
    14de:	f3 1f       	adc	r31, r19
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	84 2f       	mov	r24, r20
    14e4:	69 2f       	mov	r22, r25
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    14ec:	29 81       	ldd	r18, Y+1	; 0x01
    14ee:	3a 81       	ldd	r19, Y+2	; 0x02
    14f0:	c9 01       	movw	r24, r18
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	28 0f       	add	r18, r24
    14f8:	39 1f       	adc	r19, r25
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	fc 01       	movw	r30, r24
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	50 81       	ld	r21, Z
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	c9 01       	movw	r24, r18
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	28 0f       	add	r18, r24
    1512:	39 1f       	adc	r19, r25
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	fc 01       	movw	r30, r24
    151a:	e2 0f       	add	r30, r18
    151c:	f3 1f       	adc	r31, r19
    151e:	41 81       	ldd	r20, Z+1	; 0x01
    1520:	29 81       	ldd	r18, Y+1	; 0x01
    1522:	3a 81       	ldd	r19, Y+2	; 0x02
    1524:	c9 01       	movw	r24, r18
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	28 0f       	add	r18, r24
    152c:	39 1f       	adc	r19, r25
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	fc 01       	movw	r30, r24
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	92 81       	ldd	r25, Z+2	; 0x02
    153a:	85 2f       	mov	r24, r21
    153c:	64 2f       	mov	r22, r20
    153e:	49 2f       	mov	r20, r25
    1540:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	0c f4       	brge	.+2      	; 0x1560 <Switch_Init+0xcc>
    155e:	a7 cf       	rjmp	.-178    	; 0x14ae <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Switch_GetValue+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <Switch_GetValue+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	7c 83       	std	Y+4, r23	; 0x04
    1582:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    1584:	e9 81       	ldd	r30, Y+1	; 0x01
    1586:	fa 81       	ldd	r31, Y+2	; 0x02
    1588:	80 81       	ld	r24, Z
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	69 2f       	mov	r22, r25
    1596:	a9 01       	movw	r20, r18
    1598:	0e 94 bd 13 	call	0x277a	; 0x277a <DIO_u8GetPinValue>
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <SPI_voidInit>:

#include "SPI_Config.h"
#include "SPI_Private.h"


void SPI_voidInit(void){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
			CLR_BIT(SPI_SPCR_REG, SPI_CPHA_PIN);
		#endif
			
	#elif MC_Mode == Slave
		/* PINS Direction */
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_INPUT);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	64 e0       	ldi	r22, 0x04	; 4
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN5, DIO_u8_INPUT);
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	65 e0       	ldi	r22, 0x05	; 5
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN6, DIO_u8_OUTPUT);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	66 e0       	ldi	r22, 0x06	; 6
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN7, DIO_u8_INPUT);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	67 e0       	ldi	r22, 0x07	; 7
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_INPUT_PULLUP);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	64 e0       	ldi	r22, 0x04	; 4
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
		/* Select Slave Mode */
		CLR_BIT(SPI_SPCR_REG, SPI_MSTR_PIN);
    15e4:	ad e2       	ldi	r26, 0x2D	; 45
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ed e2       	ldi	r30, 0x2D	; 45
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7e       	andi	r24, 0xEF	; 239
    15f0:	8c 93       	st	X, r24
		
		/* Select Data Order => MSB */	
		#if Data_Order_Mode == MSB
			CLR_BIT(SPI_SPCR_REG, SPI_DORD_PIN);
    15f2:	ad e2       	ldi	r26, 0x2D	; 45
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ed e2       	ldi	r30, 0x2D	; 45
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 7d       	andi	r24, 0xDF	; 223
    15fe:	8c 93       	st	X, r24
			SET_BIT(SPI_SPCR_REG, SPI_DORD_PIN);
		#endif
			
		/* Select Clk Polarity => Falling,Rising */
		#if Clk_Polarity_Mode == Falling_Rising
			SET_BIT(SPI_SPCR_REG, SPI_CPOL_PIN);
    1600:	ad e2       	ldi	r26, 0x2D	; 45
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ed e2       	ldi	r30, 0x2D	; 45
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	88 60       	ori	r24, 0x08	; 8
    160c:	8c 93       	st	X, r24
			CLR_BIT(SPI_SPCR_REG, SPI_CPOL_PIN);
		#endif 
		
		/* Select Clk Phase => Setup,Sample */
		#if Clk_Phase_Mode == Setup_Sample
			SET_BIT(SPI_SPCR_REG, SPI_CPHA_PIN);
    160e:	ad e2       	ldi	r26, 0x2D	; 45
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e2       	ldi	r30, 0x2D	; 45
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
			CLR_BIT(SPI_SPCR_REG, SPI_CPHA_PIN);
		#endif
	#endif 

	/* Enable SPI */
	SET_BIT(SPI_SPCR_REG, SPI_SPE_PIN);
    161c:	ad e2       	ldi	r26, 0x2D	; 45
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ed e2       	ldi	r30, 0x2D	; 45
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 64       	ori	r24, 0x40	; 64
    1628:	8c 93       	st	X, r24
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <SPI_u8SendResieve>:

u8 SPI_u8SendResieve(u8 Copy_u8SendedByte, u8 *Copy_Pu8Recievedyte){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <SPI_u8SendResieve+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <SPI_u8SendResieve+0x8>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	7c 83       	std	Y+4, r23	; 0x04
    1640:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1642:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Recievedyte != NULL){
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	89 f0       	breq	.+34     	; 0x166e <SPI_u8SendResieve+0x3e>
		/* Send Byte */
		SPI_SPDR_REG = Copy_u8SendedByte;
    164c:	ef e2       	ldi	r30, 0x2F	; 47
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	80 83       	st	Z, r24
		/* Check if Transmission is Completed */
		while((GET_BIT(SPI_SPSR_REG, SPI_SPIF_PIN)) == 0);
    1654:	ee e2       	ldi	r30, 0x2E	; 46
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	88 23       	and	r24, r24
    165c:	dc f7       	brge	.-10     	; 0x1654 <SPI_u8SendResieve+0x24>
		/* Read Byte */
		*Copy_Pu8Recievedyte = SPI_SPDR_REG;
    165e:	ef e2       	ldi	r30, 0x2F	; 47
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	80 83       	st	Z, r24
		
		Local_u8ErrorState = STD_TYPES_OK;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <SPI_SlaveSendByte>:
void SPI_SlaveSendByte(u8 Copy_DataByte){
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	89 83       	std	Y+1, r24	; 0x01
	/* Send Byte */
	SPI_SPDR_REG = Copy_DataByte;
    168a:	ef e2       	ldi	r30, 0x2F	; 47
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	80 83       	st	Z, r24
}
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <SPI_RecieveByte>:
u8 SPI_RecieveByte(u8 *Copy_Pu8RecievedByte){
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <SPI_RecieveByte+0x6>
    16a0:	0f 92       	push	r0
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9b 83       	std	Y+3, r25	; 0x03
    16a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    16aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8RecievedByte != NULL){
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	69 f0       	breq	.+26     	; 0x16ce <SPI_RecieveByte+0x34>
		/* Check if Transmission is Completed */
		while((GET_BIT(SPI_SPSR_REG, SPI_SPIF_PIN)) == 0);
    16b4:	ee e2       	ldi	r30, 0x2E	; 46
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	88 23       	and	r24, r24
    16bc:	dc f7       	brge	.-10     	; 0x16b4 <SPI_RecieveByte+0x1a>
		/* Read Byte */
		*Copy_Pu8RecievedByte = SPI_SPDR_REG;
    16be:	ef e2       	ldi	r30, 0x2F	; 47
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	ea 81       	ldd	r30, Y+2	; 0x02
    16c6:	fb 81       	ldd	r31, Y+3	; 0x03
    16c8:	80 83       	st	Z, r24
		
		Local_u8ErrorState = STD_TYPES_OK;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <LCD_setPinDirection+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <LCD_setPinDirection+0x8>
    16e4:	0f 92       	push	r0
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	6a 83       	std	Y+2, r22	; 0x02
    16ee:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	88 30       	cpi	r24, 0x08	; 8
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <LCD_setPinDirection+0x1c>
    16f6:	d5 c0       	rjmp	.+426    	; 0x18a2 <LCD_setPinDirection+0x1c6>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <LCD_setPinDirection+0x24>
    16fe:	d1 c0       	rjmp	.+418    	; 0x18a2 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3d 83       	std	Y+5, r19	; 0x05
    1708:	2c 83       	std	Y+4, r18	; 0x04
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <LCD_setPinDirection+0x3a>
    1714:	43 c0       	rjmp	.+134    	; 0x179c <LCD_setPinDirection+0xc0>
    1716:	2c 81       	ldd	r18, Y+4	; 0x04
    1718:	3d 81       	ldd	r19, Y+5	; 0x05
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	2c f4       	brge	.+10     	; 0x172a <LCD_setPinDirection+0x4e>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	71 f0       	breq	.+28     	; 0x1744 <LCD_setPinDirection+0x68>
    1728:	bc c0       	rjmp	.+376    	; 0x18a2 <LCD_setPinDirection+0x1c6>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <LCD_setPinDirection+0x5a>
    1734:	5f c0       	rjmp	.+190    	; 0x17f4 <LCD_setPinDirection+0x118>
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	83 30       	cpi	r24, 0x03	; 3
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <LCD_setPinDirection+0x66>
    1740:	85 c0       	rjmp	.+266    	; 0x184c <LCD_setPinDirection+0x170>
    1742:	af c0       	rjmp	.+350    	; 0x18a2 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a1 f4       	brne	.+40     	; 0x1772 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    174a:	aa e3       	ldi	r26, 0x3A	; 58
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ea e3       	ldi	r30, 0x3A	; 58
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <LCD_setPinDirection+0x8c>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <LCD_setPinDirection+0x88>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	98 c0       	rjmp	.+304    	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    1772:	aa e3       	ldi	r26, 0x3A	; 58
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ea e3       	ldi	r30, 0x3A	; 58
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <LCD_setPinDirection+0xb4>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <LCD_setPinDirection+0xb0>
    1794:	80 95       	com	r24
    1796:	84 23       	and	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	83 c0       	rjmp	.+262    	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17a2:	a7 e3       	ldi	r26, 0x37	; 55
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 e3       	ldi	r30, 0x37	; 55
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <LCD_setPinDirection+0xe4>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <LCD_setPinDirection+0xe0>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	6c c0       	rjmp	.+216    	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    17ca:	a7 e3       	ldi	r26, 0x37	; 55
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e7 e3       	ldi	r30, 0x37	; 55
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <LCD_setPinDirection+0x10c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <LCD_setPinDirection+0x108>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	57 c0       	rjmp	.+174    	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	a1 f4       	brne	.+40     	; 0x1822 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17fa:	a4 e3       	ldi	r26, 0x34	; 52
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e4 e3       	ldi	r30, 0x34	; 52
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <LCD_setPinDirection+0x13c>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <LCD_setPinDirection+0x138>
    181c:	84 2b       	or	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	40 c0       	rjmp	.+128    	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    1822:	a4 e3       	ldi	r26, 0x34	; 52
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e4 e3       	ldi	r30, 0x34	; 52
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <LCD_setPinDirection+0x164>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <LCD_setPinDirection+0x160>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	2b c0       	rjmp	.+86     	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	a1 f4       	brne	.+40     	; 0x187a <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1852:	a1 e3       	ldi	r26, 0x31	; 49
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e1 e3       	ldi	r30, 0x31	; 49
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <LCD_setPinDirection+0x194>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <LCD_setPinDirection+0x190>
    1874:	84 2b       	or	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	14 c0       	rjmp	.+40     	; 0x18a2 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    187a:	a1 e3       	ldi	r26, 0x31	; 49
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e1 e3       	ldi	r30, 0x31	; 49
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <LCD_setPinDirection+0x1bc>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <LCD_setPinDirection+0x1b8>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <LCD_setPinValue+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <LCD_setPinValue+0x8>
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	6a 83       	std	Y+2, r22	; 0x02
    18c4:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	88 30       	cpi	r24, 0x08	; 8
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <LCD_setPinValue+0x1c>
    18cc:	d5 c0       	rjmp	.+426    	; 0x1a78 <LCD_setPinValue+0x1c6>
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <LCD_setPinValue+0x24>
    18d4:	d1 c0       	rjmp	.+418    	; 0x1a78 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3d 83       	std	Y+5, r19	; 0x05
    18de:	2c 83       	std	Y+4, r18	; 0x04
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <LCD_setPinValue+0x3a>
    18ea:	43 c0       	rjmp	.+134    	; 0x1972 <LCD_setPinValue+0xc0>
    18ec:	2c 81       	ldd	r18, Y+4	; 0x04
    18ee:	3d 81       	ldd	r19, Y+5	; 0x05
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	2c f4       	brge	.+10     	; 0x1900 <LCD_setPinValue+0x4e>
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	71 f0       	breq	.+28     	; 0x191a <LCD_setPinValue+0x68>
    18fe:	bc c0       	rjmp	.+376    	; 0x1a78 <LCD_setPinValue+0x1c6>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <LCD_setPinValue+0x5a>
    190a:	5f c0       	rjmp	.+190    	; 0x19ca <LCD_setPinValue+0x118>
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <LCD_setPinValue+0x66>
    1916:	85 c0       	rjmp	.+266    	; 0x1a22 <LCD_setPinValue+0x170>
    1918:	af c0       	rjmp	.+350    	; 0x1a78 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	a1 f4       	brne	.+40     	; 0x1948 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1920:	ab e3       	ldi	r26, 0x3B	; 59
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	eb e3       	ldi	r30, 0x3B	; 59
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <LCD_setPinValue+0x8c>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <LCD_setPinValue+0x88>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	98 c0       	rjmp	.+304    	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    1948:	ab e3       	ldi	r26, 0x3B	; 59
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	eb e3       	ldi	r30, 0x3B	; 59
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <LCD_setPinValue+0xb4>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <LCD_setPinValue+0xb0>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	83 c0       	rjmp	.+262    	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	a1 f4       	brne	.+40     	; 0x19a0 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1978:	a8 e3       	ldi	r26, 0x38	; 56
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e8 e3       	ldi	r30, 0x38	; 56
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <LCD_setPinValue+0xe4>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <LCD_setPinValue+0xe0>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	6c c0       	rjmp	.+216    	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    19a0:	a8 e3       	ldi	r26, 0x38	; 56
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e8 e3       	ldi	r30, 0x38	; 56
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <LCD_setPinValue+0x10c>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <LCD_setPinValue+0x108>
    19c2:	80 95       	com	r24
    19c4:	84 23       	and	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	57 c0       	rjmp	.+174    	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	a1 f4       	brne	.+40     	; 0x19f8 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    19d0:	a5 e3       	ldi	r26, 0x35	; 53
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e5 e3       	ldi	r30, 0x35	; 53
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <LCD_setPinValue+0x13c>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <LCD_setPinValue+0x138>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	40 c0       	rjmp	.+128    	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    19f8:	a5 e3       	ldi	r26, 0x35	; 53
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e3       	ldi	r30, 0x35	; 53
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <LCD_setPinValue+0x164>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <LCD_setPinValue+0x160>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	2b c0       	rjmp	.+86     	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	a1 f4       	brne	.+40     	; 0x1a50 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a28:	a2 e3       	ldi	r26, 0x32	; 50
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e2 e3       	ldi	r30, 0x32	; 50
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <LCD_setPinValue+0x194>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <LCD_setPinValue+0x190>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    1a50:	a2 e3       	ldi	r26, 0x32	; 50
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e2 e3       	ldi	r30, 0x32	; 50
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <LCD_setPinValue+0x1bc>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <LCD_setPinValue+0x1b8>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <LCD_getPinValue+0x6>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <LCD_getPinValue+0x8>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
    1a98:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1a9a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <LCD_getPinValue+0x1c>
    1aa2:	84 c0       	rjmp	.+264    	; 0x1bac <LCD_getPinValue+0x124>
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <LCD_getPinValue+0x24>
    1aaa:	80 c0       	rjmp	.+256    	; 0x1bac <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3d 83       	std	Y+5, r19	; 0x05
    1ab4:	2c 83       	std	Y+4, r18	; 0x04
    1ab6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ab8:	5d 81       	ldd	r21, Y+5	; 0x05
    1aba:	41 30       	cpi	r20, 0x01	; 1
    1abc:	51 05       	cpc	r21, r1
    1abe:	79 f1       	breq	.+94     	; 0x1b1e <LCD_getPinValue+0x96>
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	34 f4       	brge	.+12     	; 0x1ad6 <LCD_getPinValue+0x4e>
    1aca:	2c 81       	ldd	r18, Y+4	; 0x04
    1acc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ace:	21 15       	cp	r18, r1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	69 f0       	breq	.+26     	; 0x1aee <LCD_getPinValue+0x66>
    1ad4:	6b c0       	rjmp	.+214    	; 0x1bac <LCD_getPinValue+0x124>
    1ad6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ad8:	5d 81       	ldd	r21, Y+5	; 0x05
    1ada:	42 30       	cpi	r20, 0x02	; 2
    1adc:	51 05       	cpc	r21, r1
    1ade:	b9 f1       	breq	.+110    	; 0x1b4e <LCD_getPinValue+0xc6>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <LCD_getPinValue+0x64>
    1aea:	49 c0       	rjmp	.+146    	; 0x1b7e <LCD_getPinValue+0xf6>
    1aec:	5f c0       	rjmp	.+190    	; 0x1bac <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1aee:	e9 e3       	ldi	r30, 0x39	; 57
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a9 01       	movw	r20, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <LCD_getPinValue+0x7e>
    1b02:	55 95       	asr	r21
    1b04:	47 95       	ror	r20
    1b06:	8a 95       	dec	r24
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <LCD_getPinValue+0x7a>
    1b0a:	ca 01       	movw	r24, r20
    1b0c:	81 70       	andi	r24, 0x01	; 1
    1b0e:	90 70       	andi	r25, 0x00	; 0
    1b10:	88 23       	and	r24, r24
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	49 c0       	rjmp	.+146    	; 0x1bac <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b1a:	19 82       	std	Y+1, r1	; 0x01
    1b1c:	47 c0       	rjmp	.+142    	; 0x1bac <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b1e:	e6 e3       	ldi	r30, 0x36	; 54
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a9 01       	movw	r20, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <LCD_getPinValue+0xae>
    1b32:	55 95       	asr	r21
    1b34:	47 95       	ror	r20
    1b36:	8a 95       	dec	r24
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <LCD_getPinValue+0xaa>
    1b3a:	ca 01       	movw	r24, r20
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	90 70       	andi	r25, 0x00	; 0
    1b40:	88 23       	and	r24, r24
    1b42:	19 f0       	breq	.+6      	; 0x1b4a <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	31 c0       	rjmp	.+98     	; 0x1bac <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	2f c0       	rjmp	.+94     	; 0x1bac <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b4e:	e3 e3       	ldi	r30, 0x33	; 51
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a9 01       	movw	r20, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <LCD_getPinValue+0xde>
    1b62:	55 95       	asr	r21
    1b64:	47 95       	ror	r20
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <LCD_getPinValue+0xda>
    1b6a:	ca 01       	movw	r24, r20
    1b6c:	81 70       	andi	r24, 0x01	; 1
    1b6e:	90 70       	andi	r25, 0x00	; 0
    1b70:	88 23       	and	r24, r24
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	19 c0       	rjmp	.+50     	; 0x1bac <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	17 c0       	rjmp	.+46     	; 0x1bac <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b7e:	e0 e3       	ldi	r30, 0x30	; 48
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a9 01       	movw	r20, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <LCD_getPinValue+0x10e>
    1b92:	55 95       	asr	r21
    1b94:	47 95       	ror	r20
    1b96:	8a 95       	dec	r24
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <LCD_getPinValue+0x10a>
    1b9a:	ca 01       	movw	r24, r20
    1b9c:	81 70       	andi	r24, 0x01	; 1
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	88 23       	and	r24, r24
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1baa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <LCD_setPortDirection+0x6>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <LCD_setPortDirection+0x8>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	90 f5       	brcc	.+100    	; 0x1c38 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	3c 83       	std	Y+4, r19	; 0x04
    1bdc:	2b 83       	std	Y+3, r18	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	91 05       	cpc	r25, r1
    1be6:	d1 f0       	breq	.+52     	; 0x1c1c <LCD_setPortDirection+0x5e>
    1be8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bea:	3c 81       	ldd	r19, Y+4	; 0x04
    1bec:	22 30       	cpi	r18, 0x02	; 2
    1bee:	31 05       	cpc	r19, r1
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <LCD_setPortDirection+0x3e>
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	61 f0       	breq	.+24     	; 0x1c12 <LCD_setPortDirection+0x54>
    1bfa:	1e c0       	rjmp	.+60     	; 0x1c38 <LCD_setPortDirection+0x7a>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	81 f0       	breq	.+32     	; 0x1c26 <LCD_setPortDirection+0x68>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	81 f0       	breq	.+32     	; 0x1c30 <LCD_setPortDirection+0x72>
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c12:	ea e3       	ldi	r30, 0x3A	; 58
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	80 83       	st	Z, r24
    1c1a:	0e c0       	rjmp	.+28     	; 0x1c38 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c1c:	e7 e3       	ldi	r30, 0x37	; 55
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	80 83       	st	Z, r24
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c26:	e4 e3       	ldi	r30, 0x34	; 52
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	80 83       	st	Z, r24
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c30:	e1 e3       	ldi	r30, 0x31	; 49
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <LCD_setPortValue+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <LCD_setPortValue+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	90 f5       	brcc	.+100    	; 0x1cc0 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3c 83       	std	Y+4, r19	; 0x04
    1c64:	2b 83       	std	Y+3, r18	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	d1 f0       	breq	.+52     	; 0x1ca4 <LCD_setPortValue+0x5e>
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <LCD_setPortValue+0x3e>
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <LCD_setPortValue+0x54>
    1c82:	1e c0       	rjmp	.+60     	; 0x1cc0 <LCD_setPortValue+0x7a>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <LCD_setPortValue+0x68>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <LCD_setPortValue+0x72>
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c9a:	eb e3       	ldi	r30, 0x3B	; 59
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	80 83       	st	Z, r24
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ca4:	e8 e3       	ldi	r30, 0x38	; 56
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	80 83       	st	Z, r24
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cae:	e5 e3       	ldi	r30, 0x35	; 53
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <LCD_getPortValue+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <LCD_getPortValue+0x8>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1cdc:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	84 30       	cpi	r24, 0x04	; 4
    1ce2:	90 f5       	brcc	.+100    	; 0x1d48 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3c 83       	std	Y+4, r19	; 0x04
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	d1 f0       	breq	.+52     	; 0x1d2c <LCD_getPortValue+0x5e>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_getPortValue+0x3e>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <LCD_getPortValue+0x54>
    1d0a:	1e c0       	rjmp	.+60     	; 0x1d48 <LCD_getPortValue+0x7a>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	81 f0       	breq	.+32     	; 0x1d36 <LCD_getPortValue+0x68>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	81 f0       	breq	.+32     	; 0x1d40 <LCD_getPortValue+0x72>
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d22:	e9 e3       	ldi	r30, 0x39	; 57
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	0e c0       	rjmp	.+28     	; 0x1d48 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d2c:	e6 e3       	ldi	r30, 0x36	; 54
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d36:	e3 e3       	ldi	r30, 0x33	; 51
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d40:	e0 e3       	ldi	r30, 0x30	; 48
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1d60:	af e5       	ldi	r26, 0x5F	; 95
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ef e5       	ldi	r30, 0x5F	; 95
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 68       	ori	r24, 0x80	; 128
    1d6c:	8c 93       	st	X, r24
}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1d7c:	af e5       	ldi	r26, 0x5F	; 95
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ef e5       	ldi	r30, 0x5F	; 95
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 77       	andi	r24, 0x7F	; 127
    1d88:	8c 93       	st	X, r24
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <setCallBack+0x6>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	fc 01       	movw	r30, r24
    1dae:	e4 57       	subi	r30, 0x74	; 116
    1db0:	fe 4f       	sbci	r31, 0xFE	; 254
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1dce:	a5 e5       	ldi	r26, 0x55	; 85
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e5 e5       	ldi	r30, 0x55	; 85
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8e 7f       	andi	r24, 0xFE	; 254
    1dda:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1ddc:	a5 e5       	ldi	r26, 0x55	; 85
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e5       	ldi	r30, 0x55	; 85
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8d 7f       	andi	r24, 0xFD	; 253
    1de8:	8c 93       	st	X, r24
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1df8:	a5 e5       	ldi	r26, 0x55	; 85
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e5       	ldi	r30, 0x55	; 85
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	82 60       	ori	r24, 0x02	; 2
    1e04:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e06:	a5 e5       	ldi	r26, 0x55	; 85
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e5       	ldi	r30, 0x55	; 85
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8e 7f       	andi	r24, 0xFE	; 254
    1e12:	8c 93       	st	X, r24
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e22:	a5 e5       	ldi	r26, 0x55	; 85
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e5       	ldi	r30, 0x55	; 85
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8d 7f       	andi	r24, 0xFD	; 253
    1e2e:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e30:	a5 e5       	ldi	r26, 0x55	; 85
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e5       	ldi	r30, 0x55	; 85
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	81 60       	ori	r24, 0x01	; 1
    1e3c:	8c 93       	st	X, r24
}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e4c:	a5 e5       	ldi	r26, 0x55	; 85
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e5       	ldi	r30, 0x55	; 85
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	82 60       	ori	r24, 0x02	; 2
    1e58:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e5a:	a5 e5       	ldi	r26, 0x55	; 85
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e5       	ldi	r30, 0x55	; 85
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	81 60       	ori	r24, 0x01	; 1
    1e66:	8c 93       	st	X, r24
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1e76:	a5 e5       	ldi	r26, 0x55	; 85
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e5       	ldi	r30, 0x55	; 85
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8b 7f       	andi	r24, 0xFB	; 251
    1e82:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1e84:	a5 e5       	ldi	r26, 0x55	; 85
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e5       	ldi	r30, 0x55	; 85
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	87 7f       	andi	r24, 0xF7	; 247
    1e90:	8c 93       	st	X, r24
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1ea0:	a5 e5       	ldi	r26, 0x55	; 85
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e5       	ldi	r30, 0x55	; 85
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	88 60       	ori	r24, 0x08	; 8
    1eac:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1eae:	a5 e5       	ldi	r26, 0x55	; 85
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e5 e5       	ldi	r30, 0x55	; 85
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8b 7f       	andi	r24, 0xFB	; 251
    1eba:	8c 93       	st	X, r24
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1eca:	a5 e5       	ldi	r26, 0x55	; 85
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e5 e5       	ldi	r30, 0x55	; 85
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	87 7f       	andi	r24, 0xF7	; 247
    1ed6:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1ed8:	a5 e5       	ldi	r26, 0x55	; 85
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e5 e5       	ldi	r30, 0x55	; 85
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	84 60       	ori	r24, 0x04	; 4
    1ee4:	8c 93       	st	X, r24
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1ef4:	a5 e5       	ldi	r26, 0x55	; 85
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e5       	ldi	r30, 0x55	; 85
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	88 60       	ori	r24, 0x08	; 8
    1f00:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1f02:	a5 e5       	ldi	r26, 0x55	; 85
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e5       	ldi	r30, 0x55	; 85
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	84 60       	ori	r24, 0x04	; 4
    1f0e:	8c 93       	st	X, r24
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1f1e:	a4 e5       	ldi	r26, 0x54	; 84
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e4 e5       	ldi	r30, 0x54	; 84
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 64       	ori	r24, 0x40	; 64
    1f2a:	8c 93       	st	X, r24
}
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1f3a:	a4 e5       	ldi	r26, 0x54	; 84
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e4 e5       	ldi	r30, 0x54	; 84
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	8f 7b       	andi	r24, 0xBF	; 191
    1f46:	8c 93       	st	X, r24
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    1f56:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1f5a:	ab e5       	ldi	r26, 0x5B	; 91
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	eb e5       	ldi	r30, 0x5B	; 91
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	80 64       	ori	r24, 0x40	; 64
    1f66:	8c 93       	st	X, r24
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1f76:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1f7a:	ab e5       	ldi	r26, 0x5B	; 91
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	eb e5       	ldi	r30, 0x5B	; 91
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 68       	ori	r24, 0x80	; 128
    1f86:	8c 93       	st	X, r24
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	2a 97       	sbiw	r28, 0x0a	; 10
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3a 87       	std	Y+10, r19	; 0x0a
    1fae:	29 87       	std	Y+9, r18	; 0x09
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	e9 f1       	breq	.+122    	; 0x2034 <EXTI_INTEnable+0xa6>
    1fba:	29 85       	ldd	r18, Y+9	; 0x09
    1fbc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <EXTI_INTEnable+0x38>
    1fc4:	69 c0       	rjmp	.+210    	; 0x2098 <EXTI_INTEnable+0x10a>
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <EXTI_INTEnable+0x42>
    1fce:	7f c0       	rjmp	.+254    	; 0x20ce <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1fd0:	ab e5       	ldi	r26, 0x5B	; 91
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	eb e5       	ldi	r30, 0x5B	; 91
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 64       	ori	r24, 0x40	; 64
    1fdc:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	38 87       	std	Y+8, r19	; 0x08
    1fe6:	2f 83       	std	Y+7, r18	; 0x07
    1fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fea:	98 85       	ldd	r25, Y+8	; 0x08
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	91 05       	cpc	r25, r1
    1ff0:	c1 f0       	breq	.+48     	; 0x2022 <EXTI_INTEnable+0x94>
    1ff2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ff4:	38 85       	ldd	r19, Y+8	; 0x08
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <EXTI_INTEnable+0x78>
    1ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffe:	98 85       	ldd	r25, Y+8	; 0x08
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	61 f0       	breq	.+24     	; 0x201c <EXTI_INTEnable+0x8e>
    2004:	64 c0       	rjmp	.+200    	; 0x20ce <EXTI_INTEnable+0x140>
    2006:	2f 81       	ldd	r18, Y+7	; 0x07
    2008:	38 85       	ldd	r19, Y+8	; 0x08
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 05       	cpc	r19, r1
    200e:	61 f0       	breq	.+24     	; 0x2028 <EXTI_INTEnable+0x9a>
    2010:	8f 81       	ldd	r24, Y+7	; 0x07
    2012:	98 85       	ldd	r25, Y+8	; 0x08
    2014:	83 30       	cpi	r24, 0x03	; 3
    2016:	91 05       	cpc	r25, r1
    2018:	51 f0       	breq	.+20     	; 0x202e <EXTI_INTEnable+0xa0>
    201a:	59 c0       	rjmp	.+178    	; 0x20ce <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    201c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <EXTI0_LowLevel_MODE>
    2020:	56 c0       	rjmp	.+172    	; 0x20ce <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    2022:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <EXTI0_FALLING_MODE>
    2026:	53 c0       	rjmp	.+166    	; 0x20ce <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    2028:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <EXTI0_AnyLogicalChange_MODE>
    202c:	50 c0       	rjmp	.+160    	; 0x20ce <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    202e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <EXTI0_RISING_MODE>
    2032:	4d c0       	rjmp	.+154    	; 0x20ce <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    2034:	ab e5       	ldi	r26, 0x5B	; 91
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	eb e5       	ldi	r30, 0x5B	; 91
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	80 68       	ori	r24, 0x80	; 128
    2040:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	3e 83       	std	Y+6, r19	; 0x06
    204a:	2d 83       	std	Y+5, r18	; 0x05
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	91 05       	cpc	r25, r1
    2054:	c1 f0       	breq	.+48     	; 0x2086 <EXTI_INTEnable+0xf8>
    2056:	2d 81       	ldd	r18, Y+5	; 0x05
    2058:	3e 81       	ldd	r19, Y+6	; 0x06
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <EXTI_INTEnable+0xdc>
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	61 f0       	breq	.+24     	; 0x2080 <EXTI_INTEnable+0xf2>
    2068:	32 c0       	rjmp	.+100    	; 0x20ce <EXTI_INTEnable+0x140>
    206a:	2d 81       	ldd	r18, Y+5	; 0x05
    206c:	3e 81       	ldd	r19, Y+6	; 0x06
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	61 f0       	breq	.+24     	; 0x208c <EXTI_INTEnable+0xfe>
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	51 f0       	breq	.+20     	; 0x2092 <EXTI_INTEnable+0x104>
    207e:	27 c0       	rjmp	.+78     	; 0x20ce <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    2080:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <EXTI1_LowLevel_MODE>
    2084:	24 c0       	rjmp	.+72     	; 0x20ce <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    2086:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <EXTI1_FALLING_MODE>
    208a:	21 c0       	rjmp	.+66     	; 0x20ce <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    208c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <EXTI1_AnyLogicalChange_MODE>
    2090:	1e c0       	rjmp	.+60     	; 0x20ce <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    2092:	0e 94 76 0f 	call	0x1eec	; 0x1eec <EXTI1_RISING_MODE>
    2096:	1b c0       	rjmp	.+54     	; 0x20ce <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    2098:	ab e5       	ldi	r26, 0x5B	; 91
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	eb e5       	ldi	r30, 0x5B	; 91
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 62       	ori	r24, 0x20	; 32
    20a4:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	3c 83       	std	Y+4, r19	; 0x04
    20ae:	2b 83       	std	Y+3, r18	; 0x03
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	41 f0       	breq	.+16     	; 0x20ca <EXTI_INTEnable+0x13c>
    20ba:	2b 81       	ldd	r18, Y+3	; 0x03
    20bc:	3c 81       	ldd	r19, Y+4	; 0x04
    20be:	23 30       	cpi	r18, 0x03	; 3
    20c0:	31 05       	cpc	r19, r1
    20c2:	29 f4       	brne	.+10     	; 0x20ce <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    20c4:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <EXTI2_RISING_MODE>
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    20ca:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    20ce:	2a 96       	adiw	r28, 0x0a	; 10
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <EXTI_voidINTDisable+0x6>
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	3b 83       	std	Y+3, r19	; 0x03
    20f6:	2a 83       	std	Y+2, r18	; 0x02
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	91 05       	cpc	r25, r1
    2100:	89 f0       	breq	.+34     	; 0x2124 <EXTI_voidINTDisable+0x44>
    2102:	2a 81       	ldd	r18, Y+2	; 0x02
    2104:	3b 81       	ldd	r19, Y+3	; 0x03
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	a1 f0       	breq	.+40     	; 0x2134 <EXTI_voidINTDisable+0x54>
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	9b 81       	ldd	r25, Y+3	; 0x03
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	b9 f4       	brne	.+46     	; 0x2142 <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    2114:	ab e5       	ldi	r26, 0x5B	; 91
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	eb e5       	ldi	r30, 0x5B	; 91
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8f 7b       	andi	r24, 0xBF	; 191
    2120:	8c 93       	st	X, r24
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    2124:	ab e5       	ldi	r26, 0x5B	; 91
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	eb e5       	ldi	r30, 0x5B	; 91
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8f 77       	andi	r24, 0x7F	; 127
    2130:	8c 93       	st	X, r24
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    2134:	ab e5       	ldi	r26, 0x5B	; 91
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	eb e5       	ldi	r30, 0x5B	; 91
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8f 7d       	andi	r24, 0xDF	; 223
    2140:	8c 93       	st	X, r24
			break;
	}
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    2178:	80 91 8c 01 	lds	r24, 0x018C
    217c:	90 91 8d 01 	lds	r25, 0x018D
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	29 f0       	breq	.+10     	; 0x218e <__vector_1+0x40>
		EXTI[0]();
    2184:	e0 91 8c 01 	lds	r30, 0x018C
    2188:	f0 91 8d 01 	lds	r31, 0x018D
    218c:	09 95       	icall
	}

}
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	bf 91       	pop	r27
    2198:	af 91       	pop	r26
    219a:	9f 91       	pop	r25
    219c:	8f 91       	pop	r24
    219e:	7f 91       	pop	r23
    21a0:	6f 91       	pop	r22
    21a2:	5f 91       	pop	r21
    21a4:	4f 91       	pop	r20
    21a6:	3f 91       	pop	r19
    21a8:	2f 91       	pop	r18
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	0f 90       	pop	r0
    21b0:	1f 90       	pop	r1
    21b2:	18 95       	reti

000021b4 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    21b4:	1f 92       	push	r1
    21b6:	0f 92       	push	r0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	0f 92       	push	r0
    21bc:	11 24       	eor	r1, r1
    21be:	2f 93       	push	r18
    21c0:	3f 93       	push	r19
    21c2:	4f 93       	push	r20
    21c4:	5f 93       	push	r21
    21c6:	6f 93       	push	r22
    21c8:	7f 93       	push	r23
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    21de:	80 91 8e 01 	lds	r24, 0x018E
    21e2:	90 91 8f 01 	lds	r25, 0x018F
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <__vector_2+0x40>
			EXTI[1]();
    21ea:	e0 91 8e 01 	lds	r30, 0x018E
    21ee:	f0 91 8f 01 	lds	r31, 0x018F
    21f2:	09 95       	icall
	}

}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	ff 91       	pop	r31
    21fa:	ef 91       	pop	r30
    21fc:	bf 91       	pop	r27
    21fe:	af 91       	pop	r26
    2200:	9f 91       	pop	r25
    2202:	8f 91       	pop	r24
    2204:	7f 91       	pop	r23
    2206:	6f 91       	pop	r22
    2208:	5f 91       	pop	r21
    220a:	4f 91       	pop	r20
    220c:	3f 91       	pop	r19
    220e:	2f 91       	pop	r18
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	0f 92       	push	r0
    2222:	11 24       	eor	r1, r1
    2224:	2f 93       	push	r18
    2226:	3f 93       	push	r19
    2228:	4f 93       	push	r20
    222a:	5f 93       	push	r21
    222c:	6f 93       	push	r22
    222e:	7f 93       	push	r23
    2230:	8f 93       	push	r24
    2232:	9f 93       	push	r25
    2234:	af 93       	push	r26
    2236:	bf 93       	push	r27
    2238:	ef 93       	push	r30
    223a:	ff 93       	push	r31
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    2244:	80 91 90 01 	lds	r24, 0x0190
    2248:	90 91 91 01 	lds	r25, 0x0191
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	29 f0       	breq	.+10     	; 0x225a <__vector_3+0x40>
			EXTI[2]();
    2250:	e0 91 90 01 	lds	r30, 0x0190
    2254:	f0 91 91 01 	lds	r31, 0x0191
    2258:	09 95       	icall
	}

}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	ff 91       	pop	r31
    2260:	ef 91       	pop	r30
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	0f 90       	pop	r0
    227c:	1f 90       	pop	r1
    227e:	18 95       	reti

00002280 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    2288:	ea e3       	ldi	r30, 0x3A	; 58
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    228e:	e7 e3       	ldi	r30, 0x37	; 55
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 ea       	ldi	r24, 0xA0	; 160
    2294:	80 83       	st	Z, r24
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    2296:	e4 e3       	ldi	r30, 0x34	; 52
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    229e:	e1 e3       	ldi	r30, 0x31	; 49
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    22a4:	eb e3       	ldi	r30, 0x3B	; 59
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    22aa:	e8 e3       	ldi	r30, 0x38	; 56
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	88 e0       	ldi	r24, 0x08	; 8
    22b0:	80 83       	st	Z, r24
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    22b2:	e5 e3       	ldi	r30, 0x35	; 53
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    22b8:	e2 e3       	ldi	r30, 0x32	; 50
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	10 82       	st	Z, r1

}
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	2e 97       	sbiw	r28, 0x0e	; 14
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	6b 83       	std	Y+3, r22	; 0x03
    22dc:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <DIO_u8SetPinDirection+0x26>
    22e8:	0c c1       	rjmp	.+536    	; 0x2502 <DIO_u8SetPinDirection+0x23e>
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	88 30       	cpi	r24, 0x08	; 8
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <DIO_u8SetPinDirection+0x2e>
    22f0:	08 c1       	rjmp	.+528    	; 0x2502 <DIO_u8SetPinDirection+0x23e>
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	21 f0       	breq	.+8      	; 0x2300 <DIO_u8SetPinDirection+0x3c>
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	88 23       	and	r24, r24
    22fc:	09 f0       	breq	.+2      	; 0x2300 <DIO_u8SetPinDirection+0x3c>
    22fe:	01 c1       	rjmp	.+514    	; 0x2502 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	3e 87       	std	Y+14, r19	; 0x0e
    2308:	2d 87       	std	Y+13, r18	; 0x0d
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	91 05       	cpc	r25, r1
    2312:	09 f4       	brne	.+2      	; 0x2316 <DIO_u8SetPinDirection+0x52>
    2314:	4f c0       	rjmp	.+158    	; 0x23b4 <DIO_u8SetPinDirection+0xf0>
    2316:	2d 85       	ldd	r18, Y+13	; 0x0d
    2318:	3e 85       	ldd	r19, Y+14	; 0x0e
    231a:	22 30       	cpi	r18, 0x02	; 2
    231c:	31 05       	cpc	r19, r1
    231e:	2c f4       	brge	.+10     	; 0x232a <DIO_u8SetPinDirection+0x66>
    2320:	8d 85       	ldd	r24, Y+13	; 0x0d
    2322:	9e 85       	ldd	r25, Y+14	; 0x0e
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	71 f0       	breq	.+28     	; 0x2344 <DIO_u8SetPinDirection+0x80>
    2328:	ed c0       	rjmp	.+474    	; 0x2504 <DIO_u8SetPinDirection+0x240>
    232a:	2d 85       	ldd	r18, Y+13	; 0x0d
    232c:	3e 85       	ldd	r19, Y+14	; 0x0e
    232e:	22 30       	cpi	r18, 0x02	; 2
    2330:	31 05       	cpc	r19, r1
    2332:	09 f4       	brne	.+2      	; 0x2336 <DIO_u8SetPinDirection+0x72>
    2334:	77 c0       	rjmp	.+238    	; 0x2424 <DIO_u8SetPinDirection+0x160>
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <DIO_u8SetPinDirection+0x7e>
    2340:	a9 c0       	rjmp	.+338    	; 0x2494 <DIO_u8SetPinDirection+0x1d0>
    2342:	e0 c0       	rjmp	.+448    	; 0x2504 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    2344:	8c 81       	ldd	r24, Y+4	; 0x04
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	3c 87       	std	Y+12, r19	; 0x0c
    234c:	2b 87       	std	Y+11, r18	; 0x0b
    234e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2350:	9c 85       	ldd	r25, Y+12	; 0x0c
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	d1 f0       	breq	.+52     	; 0x238a <DIO_u8SetPinDirection+0xc6>
    2356:	2b 85       	ldd	r18, Y+11	; 0x0b
    2358:	3c 85       	ldd	r19, Y+12	; 0x0c
    235a:	21 30       	cpi	r18, 0x01	; 1
    235c:	31 05       	cpc	r19, r1
    235e:	09 f0       	breq	.+2      	; 0x2362 <DIO_u8SetPinDirection+0x9e>
    2360:	d1 c0       	rjmp	.+418    	; 0x2504 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2362:	aa e3       	ldi	r26, 0x3A	; 58
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ea e3       	ldi	r30, 0x3A	; 58
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 2e       	mov	r0, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <DIO_u8SetPinDirection+0xbc>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <DIO_u8SetPinDirection+0xb8>
    2384:	84 2b       	or	r24, r20
    2386:	8c 93       	st	X, r24
    2388:	bd c0       	rjmp	.+378    	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    238a:	aa e3       	ldi	r26, 0x3A	; 58
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	ea e3       	ldi	r30, 0x3A	; 58
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	48 2f       	mov	r20, r24
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	02 2e       	mov	r0, r18
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <DIO_u8SetPinDirection+0xe4>
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	0a 94       	dec	r0
    23aa:	e2 f7       	brpl	.-8      	; 0x23a4 <DIO_u8SetPinDirection+0xe0>
    23ac:	80 95       	com	r24
    23ae:	84 23       	and	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	a8 c0       	rjmp	.+336    	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	3a 87       	std	Y+10, r19	; 0x0a
    23bc:	29 87       	std	Y+9, r18	; 0x09
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	d1 f0       	breq	.+52     	; 0x23fa <DIO_u8SetPinDirection+0x136>
    23c6:	29 85       	ldd	r18, Y+9	; 0x09
    23c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    23ca:	21 30       	cpi	r18, 0x01	; 1
    23cc:	31 05       	cpc	r19, r1
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <DIO_u8SetPinDirection+0x10e>
    23d0:	99 c0       	rjmp	.+306    	; 0x2504 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    23d2:	a7 e3       	ldi	r26, 0x37	; 55
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e7 e3       	ldi	r30, 0x37	; 55
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	48 2f       	mov	r20, r24
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	02 2e       	mov	r0, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <DIO_u8SetPinDirection+0x12c>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	0a 94       	dec	r0
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <DIO_u8SetPinDirection+0x128>
    23f4:	84 2b       	or	r24, r20
    23f6:	8c 93       	st	X, r24
    23f8:	85 c0       	rjmp	.+266    	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    23fa:	a7 e3       	ldi	r26, 0x37	; 55
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e7 e3       	ldi	r30, 0x37	; 55
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	48 2f       	mov	r20, r24
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	02 2e       	mov	r0, r18
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <DIO_u8SetPinDirection+0x154>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	0a 94       	dec	r0
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <DIO_u8SetPinDirection+0x150>
    241c:	80 95       	com	r24
    241e:	84 23       	and	r24, r20
    2420:	8c 93       	st	X, r24
    2422:	70 c0       	rjmp	.+224    	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	38 87       	std	Y+8, r19	; 0x08
    242c:	2f 83       	std	Y+7, r18	; 0x07
    242e:	8f 81       	ldd	r24, Y+7	; 0x07
    2430:	98 85       	ldd	r25, Y+8	; 0x08
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	d1 f0       	breq	.+52     	; 0x246a <DIO_u8SetPinDirection+0x1a6>
    2436:	2f 81       	ldd	r18, Y+7	; 0x07
    2438:	38 85       	ldd	r19, Y+8	; 0x08
    243a:	21 30       	cpi	r18, 0x01	; 1
    243c:	31 05       	cpc	r19, r1
    243e:	09 f0       	breq	.+2      	; 0x2442 <DIO_u8SetPinDirection+0x17e>
    2440:	61 c0       	rjmp	.+194    	; 0x2504 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2442:	a4 e3       	ldi	r26, 0x34	; 52
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e4 e3       	ldi	r30, 0x34	; 52
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 2e       	mov	r0, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <DIO_u8SetPinDirection+0x19c>
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <DIO_u8SetPinDirection+0x198>
    2464:	84 2b       	or	r24, r20
    2466:	8c 93       	st	X, r24
    2468:	4d c0       	rjmp	.+154    	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    246a:	a4 e3       	ldi	r26, 0x34	; 52
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e4 e3       	ldi	r30, 0x34	; 52
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	48 2f       	mov	r20, r24
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	02 2e       	mov	r0, r18
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <DIO_u8SetPinDirection+0x1c4>
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	0a 94       	dec	r0
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <DIO_u8SetPinDirection+0x1c0>
    248c:	80 95       	com	r24
    248e:	84 23       	and	r24, r20
    2490:	8c 93       	st	X, r24
    2492:	38 c0       	rjmp	.+112    	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    2494:	8c 81       	ldd	r24, Y+4	; 0x04
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	3e 83       	std	Y+6, r19	; 0x06
    249c:	2d 83       	std	Y+5, r18	; 0x05
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	c9 f0       	breq	.+50     	; 0x24d8 <DIO_u8SetPinDirection+0x214>
    24a6:	2d 81       	ldd	r18, Y+5	; 0x05
    24a8:	3e 81       	ldd	r19, Y+6	; 0x06
    24aa:	21 30       	cpi	r18, 0x01	; 1
    24ac:	31 05       	cpc	r19, r1
    24ae:	51 f5       	brne	.+84     	; 0x2504 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    24b0:	a1 e3       	ldi	r26, 0x31	; 49
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e1 e3       	ldi	r30, 0x31	; 49
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	48 2f       	mov	r20, r24
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	02 2e       	mov	r0, r18
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <DIO_u8SetPinDirection+0x20a>
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	0a 94       	dec	r0
    24d0:	e2 f7       	brpl	.-8      	; 0x24ca <DIO_u8SetPinDirection+0x206>
    24d2:	84 2b       	or	r24, r20
    24d4:	8c 93       	st	X, r24
    24d6:	16 c0       	rjmp	.+44     	; 0x2504 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    24d8:	a1 e3       	ldi	r26, 0x31	; 49
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e1 e3       	ldi	r30, 0x31	; 49
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	48 2f       	mov	r20, r24
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <DIO_u8SetPinDirection+0x232>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <DIO_u8SetPinDirection+0x22e>
    24fa:	80 95       	com	r24
    24fc:	84 23       	and	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2502:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2504:	89 81       	ldd	r24, Y+1	; 0x01
}
    2506:	2e 96       	adiw	r28, 0x0e	; 14
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	2f 97       	sbiw	r28, 0x0f	; 15
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	8b 83       	std	Y+3, r24	; 0x03
    252e:	6c 83       	std	Y+4, r22	; 0x04
    2530:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	84 30       	cpi	r24, 0x04	; 4
    253a:	08 f0       	brcs	.+2      	; 0x253e <DIO_u8SetPinValue+0x26>
    253c:	13 c1       	rjmp	.+550    	; 0x2764 <DIO_u8SetPinValue+0x24c>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	88 30       	cpi	r24, 0x08	; 8
    2542:	08 f0       	brcs	.+2      	; 0x2546 <DIO_u8SetPinValue+0x2e>
    2544:	0f c1       	rjmp	.+542    	; 0x2764 <DIO_u8SetPinValue+0x24c>
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	88 23       	and	r24, r24
    254a:	21 f0       	breq	.+8      	; 0x2554 <DIO_u8SetPinValue+0x3c>
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	09 f0       	breq	.+2      	; 0x2554 <DIO_u8SetPinValue+0x3c>
    2552:	08 c1       	rjmp	.+528    	; 0x2764 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3f 87       	std	Y+15, r19	; 0x0f
    255c:	2e 87       	std	Y+14, r18	; 0x0e
    255e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2560:	9f 85       	ldd	r25, Y+15	; 0x0f
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	91 05       	cpc	r25, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <DIO_u8SetPinValue+0x52>
    2568:	50 c0       	rjmp	.+160    	; 0x260a <DIO_u8SetPinValue+0xf2>
    256a:	2e 85       	ldd	r18, Y+14	; 0x0e
    256c:	3f 85       	ldd	r19, Y+15	; 0x0f
    256e:	22 30       	cpi	r18, 0x02	; 2
    2570:	31 05       	cpc	r19, r1
    2572:	2c f4       	brge	.+10     	; 0x257e <DIO_u8SetPinValue+0x66>
    2574:	8e 85       	ldd	r24, Y+14	; 0x0e
    2576:	9f 85       	ldd	r25, Y+15	; 0x0f
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	71 f0       	breq	.+28     	; 0x2598 <DIO_u8SetPinValue+0x80>
    257c:	f4 c0       	rjmp	.+488    	; 0x2766 <DIO_u8SetPinValue+0x24e>
    257e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2580:	3f 85       	ldd	r19, Y+15	; 0x0f
    2582:	22 30       	cpi	r18, 0x02	; 2
    2584:	31 05       	cpc	r19, r1
    2586:	09 f4       	brne	.+2      	; 0x258a <DIO_u8SetPinValue+0x72>
    2588:	79 c0       	rjmp	.+242    	; 0x267c <DIO_u8SetPinValue+0x164>
    258a:	8e 85       	ldd	r24, Y+14	; 0x0e
    258c:	9f 85       	ldd	r25, Y+15	; 0x0f
    258e:	83 30       	cpi	r24, 0x03	; 3
    2590:	91 05       	cpc	r25, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <DIO_u8SetPinValue+0x7e>
    2594:	ad c0       	rjmp	.+346    	; 0x26f0 <DIO_u8SetPinValue+0x1d8>
    2596:	e7 c0       	rjmp	.+462    	; 0x2766 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	3d 87       	std	Y+13, r19	; 0x0d
    25a0:	2c 87       	std	Y+12, r18	; 0x0c
    25a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    25a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	c9 f0       	breq	.+50     	; 0x25dc <DIO_u8SetPinValue+0xc4>
    25aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    25ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ae:	21 30       	cpi	r18, 0x01	; 1
    25b0:	31 05       	cpc	r19, r1
    25b2:	49 f5       	brne	.+82     	; 0x2606 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    25b4:	ab e3       	ldi	r26, 0x3B	; 59
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e3       	ldi	r30, 0x3B	; 59
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	48 2f       	mov	r20, r24
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 2e       	mov	r0, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <DIO_u8SetPinValue+0xba>
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	0a 94       	dec	r0
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <DIO_u8SetPinValue+0xb6>
    25d6:	84 2b       	or	r24, r20
    25d8:	8c 93       	st	X, r24
    25da:	c5 c0       	rjmp	.+394    	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    25dc:	ab e3       	ldi	r26, 0x3B	; 59
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	eb e3       	ldi	r30, 0x3B	; 59
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	48 2f       	mov	r20, r24
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 2e       	mov	r0, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <DIO_u8SetPinValue+0xe2>
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	0a 94       	dec	r0
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <DIO_u8SetPinValue+0xde>
    25fe:	80 95       	com	r24
    2600:	84 23       	and	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	b0 c0       	rjmp	.+352    	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2606:	1a 82       	std	Y+2, r1	; 0x02
    2608:	ae c0       	rjmp	.+348    	; 0x2766 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	3b 87       	std	Y+11, r19	; 0x0b
    2612:	2a 87       	std	Y+10, r18	; 0x0a
    2614:	8a 85       	ldd	r24, Y+10	; 0x0a
    2616:	9b 85       	ldd	r25, Y+11	; 0x0b
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	c9 f0       	breq	.+50     	; 0x264e <DIO_u8SetPinValue+0x136>
    261c:	2a 85       	ldd	r18, Y+10	; 0x0a
    261e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2620:	21 30       	cpi	r18, 0x01	; 1
    2622:	31 05       	cpc	r19, r1
    2624:	49 f5       	brne	.+82     	; 0x2678 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    2626:	a8 e3       	ldi	r26, 0x38	; 56
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e8 e3       	ldi	r30, 0x38	; 56
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	48 2f       	mov	r20, r24
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <DIO_u8SetPinValue+0x12c>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <DIO_u8SetPinValue+0x128>
    2648:	84 2b       	or	r24, r20
    264a:	8c 93       	st	X, r24
    264c:	8c c0       	rjmp	.+280    	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    264e:	a8 e3       	ldi	r26, 0x38	; 56
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e8 e3       	ldi	r30, 0x38	; 56
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <DIO_u8SetPinValue+0x154>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <DIO_u8SetPinValue+0x150>
    2670:	80 95       	com	r24
    2672:	84 23       	and	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	77 c0       	rjmp	.+238    	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2678:	1a 82       	std	Y+2, r1	; 0x02
    267a:	75 c0       	rjmp	.+234    	; 0x2766 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	39 87       	std	Y+9, r19	; 0x09
    2684:	28 87       	std	Y+8, r18	; 0x08
    2686:	88 85       	ldd	r24, Y+8	; 0x08
    2688:	99 85       	ldd	r25, Y+9	; 0x09
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	31 f0       	breq	.+12     	; 0x269a <DIO_u8SetPinValue+0x182>
    268e:	28 85       	ldd	r18, Y+8	; 0x08
    2690:	39 85       	ldd	r19, Y+9	; 0x09
    2692:	21 30       	cpi	r18, 0x01	; 1
    2694:	31 05       	cpc	r19, r1
    2696:	b1 f0       	breq	.+44     	; 0x26c4 <DIO_u8SetPinValue+0x1ac>
    2698:	29 c0       	rjmp	.+82     	; 0x26ec <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    269a:	a5 e3       	ldi	r26, 0x35	; 53
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e5 e3       	ldi	r30, 0x35	; 53
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	48 2f       	mov	r20, r24
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	02 2e       	mov	r0, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <DIO_u8SetPinValue+0x1a0>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	0a 94       	dec	r0
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <DIO_u8SetPinValue+0x19c>
    26bc:	80 95       	com	r24
    26be:	84 23       	and	r24, r20
    26c0:	8c 93       	st	X, r24
    26c2:	51 c0       	rjmp	.+162    	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    26c4:	a5 e3       	ldi	r26, 0x35	; 53
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e5 e3       	ldi	r30, 0x35	; 53
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <DIO_u8SetPinValue+0x1ca>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <DIO_u8SetPinValue+0x1c6>
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
    26ea:	3d c0       	rjmp	.+122    	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    26ec:	1a 82       	std	Y+2, r1	; 0x02
    26ee:	3b c0       	rjmp	.+118    	; 0x2766 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	3f 83       	std	Y+7, r19	; 0x07
    26f8:	2e 83       	std	Y+6, r18	; 0x06
    26fa:	8e 81       	ldd	r24, Y+6	; 0x06
    26fc:	9f 81       	ldd	r25, Y+7	; 0x07
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	31 f0       	breq	.+12     	; 0x270e <DIO_u8SetPinValue+0x1f6>
    2702:	2e 81       	ldd	r18, Y+6	; 0x06
    2704:	3f 81       	ldd	r19, Y+7	; 0x07
    2706:	21 30       	cpi	r18, 0x01	; 1
    2708:	31 05       	cpc	r19, r1
    270a:	b1 f0       	breq	.+44     	; 0x2738 <DIO_u8SetPinValue+0x220>
    270c:	29 c0       	rjmp	.+82     	; 0x2760 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    270e:	a5 e3       	ldi	r26, 0x35	; 53
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e5 e3       	ldi	r30, 0x35	; 53
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	48 2f       	mov	r20, r24
    271a:	8c 81       	ldd	r24, Y+4	; 0x04
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	02 2e       	mov	r0, r18
    2726:	02 c0       	rjmp	.+4      	; 0x272c <DIO_u8SetPinValue+0x214>
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	0a 94       	dec	r0
    272e:	e2 f7       	brpl	.-8      	; 0x2728 <DIO_u8SetPinValue+0x210>
    2730:	80 95       	com	r24
    2732:	84 23       	and	r24, r20
    2734:	8c 93       	st	X, r24
    2736:	17 c0       	rjmp	.+46     	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    2738:	a2 e3       	ldi	r26, 0x32	; 50
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e2 e3       	ldi	r30, 0x32	; 50
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	48 2f       	mov	r20, r24
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 2e       	mov	r0, r18
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <DIO_u8SetPinValue+0x23e>
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	0a 94       	dec	r0
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <DIO_u8SetPinValue+0x23a>
    275a:	84 2b       	or	r24, r20
    275c:	8c 93       	st	X, r24
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2760:	1a 82       	std	Y+2, r1	; 0x02
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2764:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2768:	2f 96       	adiw	r28, 0x0f	; 15
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	28 97       	sbiw	r28, 0x08	; 8
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	6c 83       	std	Y+4, r22	; 0x04
    2792:	5e 83       	std	Y+6, r21	; 0x06
    2794:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	84 30       	cpi	r24, 0x04	; 4
    279e:	08 f0       	brcs	.+2      	; 0x27a2 <DIO_u8GetPinValue+0x28>
    27a0:	9f c0       	rjmp	.+318    	; 0x28e0 <DIO_u8GetPinValue+0x166>
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	88 30       	cpi	r24, 0x08	; 8
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <DIO_u8GetPinValue+0x30>
    27a8:	9b c0       	rjmp	.+310    	; 0x28e0 <DIO_u8GetPinValue+0x166>
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <DIO_u8GetPinValue+0x3a>
    27b2:	96 c0       	rjmp	.+300    	; 0x28e0 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	38 87       	std	Y+8, r19	; 0x08
    27bc:	2f 83       	std	Y+7, r18	; 0x07
    27be:	4f 81       	ldd	r20, Y+7	; 0x07
    27c0:	58 85       	ldd	r21, Y+8	; 0x08
    27c2:	41 30       	cpi	r20, 0x01	; 1
    27c4:	51 05       	cpc	r21, r1
    27c6:	a9 f1       	breq	.+106    	; 0x2832 <DIO_u8GetPinValue+0xb8>
    27c8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ca:	98 85       	ldd	r25, Y+8	; 0x08
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	91 05       	cpc	r25, r1
    27d0:	34 f4       	brge	.+12     	; 0x27de <DIO_u8GetPinValue+0x64>
    27d2:	2f 81       	ldd	r18, Y+7	; 0x07
    27d4:	38 85       	ldd	r19, Y+8	; 0x08
    27d6:	21 15       	cp	r18, r1
    27d8:	31 05       	cpc	r19, r1
    27da:	71 f0       	breq	.+28     	; 0x27f8 <DIO_u8GetPinValue+0x7e>
    27dc:	82 c0       	rjmp	.+260    	; 0x28e2 <DIO_u8GetPinValue+0x168>
    27de:	4f 81       	ldd	r20, Y+7	; 0x07
    27e0:	58 85       	ldd	r21, Y+8	; 0x08
    27e2:	42 30       	cpi	r20, 0x02	; 2
    27e4:	51 05       	cpc	r21, r1
    27e6:	09 f4       	brne	.+2      	; 0x27ea <DIO_u8GetPinValue+0x70>
    27e8:	41 c0       	rjmp	.+130    	; 0x286c <DIO_u8GetPinValue+0xf2>
    27ea:	8f 81       	ldd	r24, Y+7	; 0x07
    27ec:	98 85       	ldd	r25, Y+8	; 0x08
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	91 05       	cpc	r25, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <DIO_u8GetPinValue+0x7c>
    27f4:	58 c0       	rjmp	.+176    	; 0x28a6 <DIO_u8GetPinValue+0x12c>
    27f6:	75 c0       	rjmp	.+234    	; 0x28e2 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    27f8:	e9 e3       	ldi	r30, 0x39	; 57
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a9 01       	movw	r20, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <DIO_u8GetPinValue+0x96>
    280c:	55 95       	asr	r21
    280e:	47 95       	ror	r20
    2810:	8a 95       	dec	r24
    2812:	e2 f7       	brpl	.-8      	; 0x280c <DIO_u8GetPinValue+0x92>
    2814:	ca 01       	movw	r24, r20
    2816:	81 70       	andi	r24, 0x01	; 1
    2818:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	88 23       	and	r24, r24
    281e:	21 f4       	brne	.+8      	; 0x2828 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2820:	ed 81       	ldd	r30, Y+5	; 0x05
    2822:	fe 81       	ldd	r31, Y+6	; 0x06
    2824:	10 82       	st	Z, r1
    2826:	5d c0       	rjmp	.+186    	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2828:	ed 81       	ldd	r30, Y+5	; 0x05
    282a:	fe 81       	ldd	r31, Y+6	; 0x06
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	80 83       	st	Z, r24
    2830:	58 c0       	rjmp	.+176    	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    2832:	e6 e3       	ldi	r30, 0x36	; 54
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	8c 81       	ldd	r24, Y+4	; 0x04
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a9 01       	movw	r20, r18
    2844:	02 c0       	rjmp	.+4      	; 0x284a <DIO_u8GetPinValue+0xd0>
    2846:	55 95       	asr	r21
    2848:	47 95       	ror	r20
    284a:	8a 95       	dec	r24
    284c:	e2 f7       	brpl	.-8      	; 0x2846 <DIO_u8GetPinValue+0xcc>
    284e:	ca 01       	movw	r24, r20
    2850:	81 70       	andi	r24, 0x01	; 1
    2852:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	88 23       	and	r24, r24
    2858:	21 f4       	brne	.+8      	; 0x2862 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    285a:	ed 81       	ldd	r30, Y+5	; 0x05
    285c:	fe 81       	ldd	r31, Y+6	; 0x06
    285e:	10 82       	st	Z, r1
    2860:	40 c0       	rjmp	.+128    	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2862:	ed 81       	ldd	r30, Y+5	; 0x05
    2864:	fe 81       	ldd	r31, Y+6	; 0x06
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	80 83       	st	Z, r24
    286a:	3b c0       	rjmp	.+118    	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    286c:	e3 e3       	ldi	r30, 0x33	; 51
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a9 01       	movw	r20, r18
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <DIO_u8GetPinValue+0x10a>
    2880:	55 95       	asr	r21
    2882:	47 95       	ror	r20
    2884:	8a 95       	dec	r24
    2886:	e2 f7       	brpl	.-8      	; 0x2880 <DIO_u8GetPinValue+0x106>
    2888:	ca 01       	movw	r24, r20
    288a:	81 70       	andi	r24, 0x01	; 1
    288c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	88 23       	and	r24, r24
    2892:	21 f4       	brne	.+8      	; 0x289c <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2894:	ed 81       	ldd	r30, Y+5	; 0x05
    2896:	fe 81       	ldd	r31, Y+6	; 0x06
    2898:	10 82       	st	Z, r1
    289a:	23 c0       	rjmp	.+70     	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    289c:	ed 81       	ldd	r30, Y+5	; 0x05
    289e:	fe 81       	ldd	r31, Y+6	; 0x06
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	80 83       	st	Z, r24
    28a4:	1e c0       	rjmp	.+60     	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    28a6:	e0 e3       	ldi	r30, 0x30	; 48
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a9 01       	movw	r20, r18
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <DIO_u8GetPinValue+0x144>
    28ba:	55 95       	asr	r21
    28bc:	47 95       	ror	r20
    28be:	8a 95       	dec	r24
    28c0:	e2 f7       	brpl	.-8      	; 0x28ba <DIO_u8GetPinValue+0x140>
    28c2:	ca 01       	movw	r24, r20
    28c4:	81 70       	andi	r24, 0x01	; 1
    28c6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	88 23       	and	r24, r24
    28cc:	21 f4       	brne	.+8      	; 0x28d6 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    28ce:	ed 81       	ldd	r30, Y+5	; 0x05
    28d0:	fe 81       	ldd	r31, Y+6	; 0x06
    28d2:	10 82       	st	Z, r1
    28d4:	06 c0       	rjmp	.+12     	; 0x28e2 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    28d6:	ed 81       	ldd	r30, Y+5	; 0x05
    28d8:	fe 81       	ldd	r31, Y+6	; 0x06
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	80 83       	st	Z, r24
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    28e0:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28e4:	28 96       	adiw	r28, 0x08	; 8
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <DIO_getPinValueWithoutPointer+0x6>
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <DIO_getPinValueWithoutPointer+0x8>
    28fe:	0f 92       	push	r0
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	8a 83       	std	Y+2, r24	; 0x02
    2906:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    2908:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	88 30       	cpi	r24, 0x08	; 8
    290e:	08 f0       	brcs	.+2      	; 0x2912 <DIO_getPinValueWithoutPointer+0x1c>
    2910:	6b c0       	rjmp	.+214    	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	84 30       	cpi	r24, 0x04	; 4
    2916:	08 f0       	brcs	.+2      	; 0x291a <DIO_getPinValueWithoutPointer+0x24>
    2918:	67 c0       	rjmp	.+206    	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3d 83       	std	Y+5, r19	; 0x05
    2922:	2c 83       	std	Y+4, r18	; 0x04
    2924:	4c 81       	ldd	r20, Y+4	; 0x04
    2926:	5d 81       	ldd	r21, Y+5	; 0x05
    2928:	41 30       	cpi	r20, 0x01	; 1
    292a:	51 05       	cpc	r21, r1
    292c:	41 f1       	breq	.+80     	; 0x297e <DIO_getPinValueWithoutPointer+0x88>
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	91 05       	cpc	r25, r1
    2936:	34 f4       	brge	.+12     	; 0x2944 <DIO_getPinValueWithoutPointer+0x4e>
    2938:	2c 81       	ldd	r18, Y+4	; 0x04
    293a:	3d 81       	ldd	r19, Y+5	; 0x05
    293c:	21 15       	cp	r18, r1
    293e:	31 05       	cpc	r19, r1
    2940:	61 f0       	breq	.+24     	; 0x295a <DIO_getPinValueWithoutPointer+0x64>
    2942:	52 c0       	rjmp	.+164    	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
    2944:	4c 81       	ldd	r20, Y+4	; 0x04
    2946:	5d 81       	ldd	r21, Y+5	; 0x05
    2948:	42 30       	cpi	r20, 0x02	; 2
    294a:	51 05       	cpc	r21, r1
    294c:	51 f1       	breq	.+84     	; 0x29a2 <DIO_getPinValueWithoutPointer+0xac>
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	9d 81       	ldd	r25, Y+5	; 0x05
    2952:	83 30       	cpi	r24, 0x03	; 3
    2954:	91 05       	cpc	r25, r1
    2956:	b9 f1       	breq	.+110    	; 0x29c6 <DIO_getPinValueWithoutPointer+0xd0>
    2958:	47 c0       	rjmp	.+142    	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    295a:	e9 e3       	ldi	r30, 0x39	; 57
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	88 2f       	mov	r24, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a9 01       	movw	r20, r18
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <DIO_getPinValueWithoutPointer+0x7c>
    296e:	55 95       	asr	r21
    2970:	47 95       	ror	r20
    2972:	8a 95       	dec	r24
    2974:	e2 f7       	brpl	.-8      	; 0x296e <DIO_getPinValueWithoutPointer+0x78>
    2976:	ca 01       	movw	r24, r20
    2978:	81 70       	andi	r24, 0x01	; 1
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	35 c0       	rjmp	.+106    	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    297e:	e6 e3       	ldi	r30, 0x36	; 54
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a9 01       	movw	r20, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <DIO_getPinValueWithoutPointer+0xa0>
    2992:	55 95       	asr	r21
    2994:	47 95       	ror	r20
    2996:	8a 95       	dec	r24
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <DIO_getPinValueWithoutPointer+0x9c>
    299a:	ca 01       	movw	r24, r20
    299c:	81 70       	andi	r24, 0x01	; 1
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	23 c0       	rjmp	.+70     	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    29a2:	e3 e3       	ldi	r30, 0x33	; 51
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a9 01       	movw	r20, r18
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <DIO_getPinValueWithoutPointer+0xc4>
    29b6:	55 95       	asr	r21
    29b8:	47 95       	ror	r20
    29ba:	8a 95       	dec	r24
    29bc:	e2 f7       	brpl	.-8      	; 0x29b6 <DIO_getPinValueWithoutPointer+0xc0>
    29be:	ca 01       	movw	r24, r20
    29c0:	81 70       	andi	r24, 0x01	; 1
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	11 c0       	rjmp	.+34     	; 0x29e8 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    29c6:	e0 e3       	ldi	r30, 0x30	; 48
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a9 01       	movw	r20, r18
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <DIO_getPinValueWithoutPointer+0xe8>
    29da:	55 95       	asr	r21
    29dc:	47 95       	ror	r20
    29de:	8a 95       	dec	r24
    29e0:	e2 f7       	brpl	.-8      	; 0x29da <DIO_getPinValueWithoutPointer+0xe4>
    29e2:	ca 01       	movw	r24, r20
    29e4:	81 70       	andi	r24, 0x01	; 1
    29e6:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	2d 97       	sbiw	r28, 0x0d	; 13
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	3c 87       	std	Y+12, r19	; 0x0c
    2a1a:	2b 87       	std	Y+11, r18	; 0x0b
    2a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	91 05       	cpc	r25, r1
    2a24:	71 f1       	breq	.+92     	; 0x2a82 <DIO_u8SetPortDirection+0x88>
    2a26:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a28:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a2a:	22 30       	cpi	r18, 0x02	; 2
    2a2c:	31 05       	cpc	r19, r1
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <DIO_u8SetPortDirection+0x40>
    2a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f0       	breq	.+26     	; 0x2a52 <DIO_u8SetPortDirection+0x58>
    2a38:	6b c0       	rjmp	.+214    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
    2a3a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a3e:	22 30       	cpi	r18, 0x02	; 2
    2a40:	31 05       	cpc	r19, r1
    2a42:	b9 f1       	breq	.+110    	; 0x2ab2 <DIO_u8SetPortDirection+0xb8>
    2a44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a46:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a48:	83 30       	cpi	r24, 0x03	; 3
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <DIO_u8SetPortDirection+0x56>
    2a4e:	49 c0       	rjmp	.+146    	; 0x2ae2 <DIO_u8SetPortDirection+0xe8>
    2a50:	5f c0       	rjmp	.+190    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	3a 87       	std	Y+10, r19	; 0x0a
    2a5a:	29 87       	std	Y+9, r18	; 0x09
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	31 f0       	breq	.+12     	; 0x2a70 <DIO_u8SetPortDirection+0x76>
    2a64:	29 85       	ldd	r18, Y+9	; 0x09
    2a66:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a68:	21 30       	cpi	r18, 0x01	; 1
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <DIO_u8SetPortDirection+0x7e>
    2a6e:	50 c0       	rjmp	.+160    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    2a70:	ea e3       	ldi	r30, 0x3A	; 58
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	10 82       	st	Z, r1
    2a76:	4c c0       	rjmp	.+152    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    2a78:	ea e3       	ldi	r30, 0x3A	; 58
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	80 83       	st	Z, r24
    2a80:	47 c0       	rjmp	.+142    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	38 87       	std	Y+8, r19	; 0x08
    2a8a:	2f 83       	std	Y+7, r18	; 0x07
    2a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a8e:	98 85       	ldd	r25, Y+8	; 0x08
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <DIO_u8SetPortDirection+0xa6>
    2a94:	2f 81       	ldd	r18, Y+7	; 0x07
    2a96:	38 85       	ldd	r19, Y+8	; 0x08
    2a98:	21 30       	cpi	r18, 0x01	; 1
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <DIO_u8SetPortDirection+0xae>
    2a9e:	38 c0       	rjmp	.+112    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2aa0:	e7 e3       	ldi	r30, 0x37	; 55
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	10 82       	st	Z, r1
    2aa6:	34 c0       	rjmp	.+104    	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    2aa8:	e7 e3       	ldi	r30, 0x37	; 55
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	80 83       	st	Z, r24
    2ab0:	2f c0       	rjmp	.+94     	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	3e 83       	std	Y+6, r19	; 0x06
    2aba:	2d 83       	std	Y+5, r18	; 0x05
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	31 f0       	breq	.+12     	; 0x2ad0 <DIO_u8SetPortDirection+0xd6>
    2ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac8:	21 30       	cpi	r18, 0x01	; 1
    2aca:	31 05       	cpc	r19, r1
    2acc:	29 f0       	breq	.+10     	; 0x2ad8 <DIO_u8SetPortDirection+0xde>
    2ace:	20 c0       	rjmp	.+64     	; 0x2b10 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2ad0:	e4 e3       	ldi	r30, 0x34	; 52
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	10 82       	st	Z, r1
    2ad6:	1c c0       	rjmp	.+56     	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    2ad8:	e4 e3       	ldi	r30, 0x34	; 52
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	8f ef       	ldi	r24, 0xFF	; 255
    2ade:	80 83       	st	Z, r24
    2ae0:	17 c0       	rjmp	.+46     	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	3c 83       	std	Y+4, r19	; 0x04
    2aea:	2b 83       	std	Y+3, r18	; 0x03
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	31 f0       	breq	.+12     	; 0x2b00 <DIO_u8SetPortDirection+0x106>
    2af4:	2b 81       	ldd	r18, Y+3	; 0x03
    2af6:	3c 81       	ldd	r19, Y+4	; 0x04
    2af8:	21 30       	cpi	r18, 0x01	; 1
    2afa:	31 05       	cpc	r19, r1
    2afc:	29 f0       	breq	.+10     	; 0x2b08 <DIO_u8SetPortDirection+0x10e>
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2b00:	e1 e3       	ldi	r30, 0x31	; 49
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	10 82       	st	Z, r1
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    2b08:	e1 e3       	ldi	r30, 0x31	; 49
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2b10:	2d 96       	adiw	r28, 0x0d	; 13
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	2d 97       	sbiw	r28, 0x0d	; 13
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	8a 83       	std	Y+2, r24	; 0x02
    2b38:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	84 30       	cpi	r24, 0x04	; 4
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <DIO_u8SetPortValue+0x24>
    2b44:	80 c0       	rjmp	.+256    	; 0x2c46 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	3d 87       	std	Y+13, r19	; 0x0d
    2b4e:	2c 87       	std	Y+12, r18	; 0x0c
    2b50:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b52:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	91 05       	cpc	r25, r1
    2b58:	71 f1       	breq	.+92     	; 0x2bb6 <DIO_u8SetPortValue+0x94>
    2b5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b5c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	31 05       	cpc	r19, r1
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <DIO_u8SetPortValue+0x4c>
    2b64:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b66:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	69 f0       	breq	.+26     	; 0x2b86 <DIO_u8SetPortValue+0x64>
    2b6c:	6d c0       	rjmp	.+218    	; 0x2c48 <DIO_u8SetPortValue+0x126>
    2b6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b70:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b72:	22 30       	cpi	r18, 0x02	; 2
    2b74:	31 05       	cpc	r19, r1
    2b76:	b9 f1       	breq	.+110    	; 0x2be6 <DIO_u8SetPortValue+0xc4>
    2b78:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b7c:	83 30       	cpi	r24, 0x03	; 3
    2b7e:	91 05       	cpc	r25, r1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <DIO_u8SetPortValue+0x62>
    2b82:	49 c0       	rjmp	.+146    	; 0x2c16 <DIO_u8SetPortValue+0xf4>
    2b84:	61 c0       	rjmp	.+194    	; 0x2c48 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	3b 87       	std	Y+11, r19	; 0x0b
    2b8e:	2a 87       	std	Y+10, r18	; 0x0a
    2b90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	31 f0       	breq	.+12     	; 0x2ba4 <DIO_u8SetPortValue+0x82>
    2b98:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b9c:	21 30       	cpi	r18, 0x01	; 1
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	29 f0       	breq	.+10     	; 0x2bac <DIO_u8SetPortValue+0x8a>
    2ba2:	52 c0       	rjmp	.+164    	; 0x2c48 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    2ba4:	eb e3       	ldi	r30, 0x3B	; 59
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	10 82       	st	Z, r1
    2baa:	4e c0       	rjmp	.+156    	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2bac:	eb e3       	ldi	r30, 0x3B	; 59
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	80 83       	st	Z, r24
    2bb4:	49 c0       	rjmp	.+146    	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	39 87       	std	Y+9, r19	; 0x09
    2bbe:	28 87       	std	Y+8, r18	; 0x08
    2bc0:	88 85       	ldd	r24, Y+8	; 0x08
    2bc2:	99 85       	ldd	r25, Y+9	; 0x09
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	31 f0       	breq	.+12     	; 0x2bd4 <DIO_u8SetPortValue+0xb2>
    2bc8:	28 85       	ldd	r18, Y+8	; 0x08
    2bca:	39 85       	ldd	r19, Y+9	; 0x09
    2bcc:	21 30       	cpi	r18, 0x01	; 1
    2bce:	31 05       	cpc	r19, r1
    2bd0:	29 f0       	breq	.+10     	; 0x2bdc <DIO_u8SetPortValue+0xba>
    2bd2:	3a c0       	rjmp	.+116    	; 0x2c48 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    2bd4:	e8 e3       	ldi	r30, 0x38	; 56
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	10 82       	st	Z, r1
    2bda:	36 c0       	rjmp	.+108    	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2bdc:	e8 e3       	ldi	r30, 0x38	; 56
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	80 83       	st	Z, r24
    2be4:	31 c0       	rjmp	.+98     	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	3f 83       	std	Y+7, r19	; 0x07
    2bee:	2e 83       	std	Y+6, r18	; 0x06
    2bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <DIO_u8SetPortValue+0xe2>
    2bf8:	2e 81       	ldd	r18, Y+6	; 0x06
    2bfa:	3f 81       	ldd	r19, Y+7	; 0x07
    2bfc:	21 30       	cpi	r18, 0x01	; 1
    2bfe:	31 05       	cpc	r19, r1
    2c00:	29 f0       	breq	.+10     	; 0x2c0c <DIO_u8SetPortValue+0xea>
    2c02:	22 c0       	rjmp	.+68     	; 0x2c48 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    2c04:	e5 e3       	ldi	r30, 0x35	; 53
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	10 82       	st	Z, r1
    2c0a:	1e c0       	rjmp	.+60     	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2c0c:	e5 e3       	ldi	r30, 0x35	; 53
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	8f ef       	ldi	r24, 0xFF	; 255
    2c12:	80 83       	st	Z, r24
    2c14:	19 c0       	rjmp	.+50     	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	3d 83       	std	Y+5, r19	; 0x05
    2c1e:	2c 83       	std	Y+4, r18	; 0x04
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	9d 81       	ldd	r25, Y+5	; 0x05
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	31 f0       	breq	.+12     	; 0x2c34 <DIO_u8SetPortValue+0x112>
    2c28:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c2c:	21 30       	cpi	r18, 0x01	; 1
    2c2e:	31 05       	cpc	r19, r1
    2c30:	29 f0       	breq	.+10     	; 0x2c3c <DIO_u8SetPortValue+0x11a>
    2c32:	0a c0       	rjmp	.+20     	; 0x2c48 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    2c34:	e2 e3       	ldi	r30, 0x32	; 50
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	10 82       	st	Z, r1
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    2c3c:	e2 e3       	ldi	r30, 0x32	; 50
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	8f ef       	ldi	r24, 0xFF	; 255
    2c42:	80 83       	st	Z, r24
    2c44:	01 c0       	rjmp	.+2      	; 0x2c48 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2c46:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c4a:	2d 96       	adiw	r28, 0x0d	; 13
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <DIO_u8GetPortValue+0x6>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <DIO_u8GetPortValue+0x8>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <DIO_u8GetPortValue+0xa>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	8a 83       	std	Y+2, r24	; 0x02
    2c6c:	7c 83       	std	Y+4, r23	; 0x04
    2c6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	84 30       	cpi	r24, 0x04	; 4
    2c78:	08 f0       	brcs	.+2      	; 0x2c7c <DIO_u8GetPortValue+0x20>
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <DIO_u8GetPortValue+0x9e>
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	d9 f1       	breq	.+118    	; 0x2cfa <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	3e 83       	std	Y+6, r19	; 0x06
    2c8c:	2d 83       	std	Y+5, r18	; 0x05
    2c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c90:	9e 81       	ldd	r25, Y+6	; 0x06
    2c92:	81 30       	cpi	r24, 0x01	; 1
    2c94:	91 05       	cpc	r25, r1
    2c96:	e1 f0       	breq	.+56     	; 0x2cd0 <DIO_u8GetPortValue+0x74>
    2c98:	2d 81       	ldd	r18, Y+5	; 0x05
    2c9a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c9c:	22 30       	cpi	r18, 0x02	; 2
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	2c f4       	brge	.+10     	; 0x2cac <DIO_u8GetPortValue+0x50>
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	61 f0       	breq	.+24     	; 0x2cc2 <DIO_u8GetPortValue+0x66>
    2caa:	28 c0       	rjmp	.+80     	; 0x2cfc <DIO_u8GetPortValue+0xa0>
    2cac:	2d 81       	ldd	r18, Y+5	; 0x05
    2cae:	3e 81       	ldd	r19, Y+6	; 0x06
    2cb0:	22 30       	cpi	r18, 0x02	; 2
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	a1 f0       	breq	.+40     	; 0x2cde <DIO_u8GetPortValue+0x82>
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	83 30       	cpi	r24, 0x03	; 3
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	b1 f0       	breq	.+44     	; 0x2cec <DIO_u8GetPortValue+0x90>
    2cc0:	1d c0       	rjmp	.+58     	; 0x2cfc <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2cc2:	e9 e3       	ldi	r30, 0x39	; 57
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cca:	fc 81       	ldd	r31, Y+4	; 0x04
    2ccc:	80 83       	st	Z, r24
    2cce:	16 c0       	rjmp	.+44     	; 0x2cfc <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2cd0:	e6 e3       	ldi	r30, 0x36	; 54
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cda:	80 83       	st	Z, r24
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2cde:	e3 e3       	ldi	r30, 0x33	; 51
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce8:	80 83       	st	Z, r24
    2cea:	08 c0       	rjmp	.+16     	; 0x2cfc <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2cec:	e0 e3       	ldi	r30, 0x30	; 48
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	80 83       	st	Z, r24
    2cf8:	01 c0       	rjmp	.+2      	; 0x2cfc <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2cfa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cfe:	26 96       	adiw	r28, 0x06	; 6
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2d18:	a7 e2       	ldi	r26, 0x27	; 39
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e7 e2       	ldi	r30, 0x27	; 39
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8f 77       	andi	r24, 0x7F	; 127
    2d24:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2d26:	a7 e2       	ldi	r26, 0x27	; 39
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e7 e2       	ldi	r30, 0x27	; 39
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	80 64       	ori	r24, 0x40	; 64
    2d32:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2d34:	a7 e2       	ldi	r26, 0x27	; 39
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e7 e2       	ldi	r30, 0x27	; 39
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8f 7d       	andi	r24, 0xDF	; 223
    2d40:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2d42:	a6 e2       	ldi	r26, 0x26	; 38
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e6 e2       	ldi	r30, 0x26	; 38
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8f 7d       	andi	r24, 0xDF	; 223
    2d4e:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2d50:	a6 e2       	ldi	r26, 0x26	; 38
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e6 e2       	ldi	r30, 0x26	; 38
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	84 60       	ori	r24, 0x04	; 4
    2d5c:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2d5e:	a6 e2       	ldi	r26, 0x26	; 38
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e6 e2       	ldi	r30, 0x26	; 38
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	82 60       	ori	r24, 0x02	; 2
    2d6a:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2d6c:	a6 e2       	ldi	r26, 0x26	; 38
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e6 e2       	ldi	r30, 0x26	; 38
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8e 7f       	andi	r24, 0xFE	; 254
    2d78:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2d7a:	a6 e2       	ldi	r26, 0x26	; 38
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e6 e2       	ldi	r30, 0x26	; 38
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	80 68       	ori	r24, 0x80	; 128
    2d86:	8c 93       	st	X, r24

}
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	28 97       	sbiw	r28, 0x08	; 8
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	8e 83       	std	Y+6, r24	; 0x06
    2da4:	78 87       	std	Y+8, r23	; 0x08
    2da6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2dac:	19 82       	std	Y+1, r1	; 0x01
    2dae:	1a 82       	std	Y+2, r1	; 0x02
    2db0:	1b 82       	std	Y+3, r1	; 0x03
    2db2:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	80 32       	cpi	r24, 0x20	; 32
    2db8:	08 f0       	brcs	.+2      	; 0x2dbc <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2dba:	5b c0       	rjmp	.+182    	; 0x2e72 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dbe:	98 85       	ldd	r25, Y+8	; 0x08
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2dc4:	56 c0       	rjmp	.+172    	; 0x2e72 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2dc6:	a7 e2       	ldi	r26, 0x27	; 39
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e7 e2       	ldi	r30, 0x27	; 39
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	80 7e       	andi	r24, 0xE0	; 224
    2dd2:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2dd4:	a7 e2       	ldi	r26, 0x27	; 39
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e7 e2       	ldi	r30, 0x27	; 39
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	90 81       	ld	r25, Z
    2dde:	8e 81       	ldd	r24, Y+6	; 0x06
    2de0:	89 2b       	or	r24, r25
    2de2:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2de4:	a6 e2       	ldi	r26, 0x26	; 38
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e6 e2       	ldi	r30, 0x26	; 38
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	80 64       	ori	r24, 0x40	; 64
    2df0:	8c 93       	st	X, r24
    2df2:	0b c0       	rjmp	.+22     	; 0x2e0a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	ab 81       	ldd	r26, Y+3	; 0x03
    2dfa:	bc 81       	ldd	r27, Y+4	; 0x04
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	a1 1d       	adc	r26, r1
    2e00:	b1 1d       	adc	r27, r1
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	ab 83       	std	Y+3, r26	; 0x03
    2e08:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2e0a:	e6 e2       	ldi	r30, 0x26	; 38
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	82 95       	swap	r24
    2e12:	8f 70       	andi	r24, 0x0F	; 15
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	81 70       	andi	r24, 0x01	; 1
    2e1a:	90 70       	andi	r25, 0x00	; 0
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	61 f4       	brne	.+24     	; 0x2e38 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	ab 81       	ldd	r26, Y+3	; 0x03
    2e26:	bc 81       	ldd	r27, Y+4	; 0x04
    2e28:	80 35       	cpi	r24, 0x50	; 80
    2e2a:	23 ec       	ldi	r18, 0xC3	; 195
    2e2c:	92 07       	cpc	r25, r18
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	a2 07       	cpc	r26, r18
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	b2 07       	cpc	r27, r18
    2e36:	f0 f2       	brcs	.-68     	; 0x2df4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2e38:	e6 e2       	ldi	r30, 0x26	; 38
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	82 95       	swap	r24
    2e40:	8f 70       	andi	r24, 0x0F	; 15
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	81 70       	andi	r24, 0x01	; 1
    2e48:	90 70       	andi	r25, 0x00	; 0
    2e4a:	88 23       	and	r24, r24
    2e4c:	81 f0       	breq	.+32     	; 0x2e6e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2e4e:	a6 e2       	ldi	r26, 0x26	; 38
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e6 e2       	ldi	r30, 0x26	; 38
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	80 61       	ori	r24, 0x10	; 16
    2e5a:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2e5c:	e4 e2       	ldi	r30, 0x24	; 36
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	ef 81       	ldd	r30, Y+7	; 0x07
    2e66:	f8 85       	ldd	r31, Y+8	; 0x08
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
    2e6c:	03 c0       	rjmp	.+6      	; 0x2e74 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2e6e:	1d 82       	std	Y+5, r1	; 0x05
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e72:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2e76:	28 96       	adiw	r28, 0x08	; 8
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	8a 83       	std	Y+2, r24	; 0x02
    2e96:	7c 83       	std	Y+4, r23	; 0x04
    2e98:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	80 32       	cpi	r24, 0x20	; 32
    2ea2:	78 f5       	brcc	.+94     	; 0x2f02 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	59 f1       	breq	.+86     	; 0x2f02 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2eac:	80 91 94 01 	lds	r24, 0x0194
    2eb0:	88 23       	and	r24, r24
    2eb2:	39 f5       	brne	.+78     	; 0x2f02 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 94 01 	sts	0x0194, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebe:	90 93 93 01 	sts	0x0193, r25
    2ec2:	80 93 92 01 	sts	0x0192, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2ec6:	a6 e2       	ldi	r26, 0x26	; 38
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e6 e2       	ldi	r30, 0x26	; 38
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	88 60       	ori	r24, 0x08	; 8
    2ed2:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2ed4:	a7 e2       	ldi	r26, 0x27	; 39
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e7 e2       	ldi	r30, 0x27	; 39
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	80 7e       	andi	r24, 0xE0	; 224
    2ee0:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2ee2:	a7 e2       	ldi	r26, 0x27	; 39
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e7 e2       	ldi	r30, 0x27	; 39
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	90 81       	ld	r25, Z
    2eec:	8a 81       	ldd	r24, Y+2	; 0x02
    2eee:	89 2b       	or	r24, r25
    2ef0:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2ef2:	a6 e2       	ldi	r26, 0x26	; 38
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e6 e2       	ldi	r30, 0x26	; 38
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	80 64       	ori	r24, 0x40	; 64
    2efe:	8c 93       	st	X, r24
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f02:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <ADC_u8GetADCRegValue+0x6>
    2f1a:	0f 92       	push	r0
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	9b 83       	std	Y+3, r25	; 0x03
    2f22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	39 f0       	breq	.+14     	; 0x2f3e <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2f30:	e4 e2       	ldi	r30, 0x24	; 36
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	9b 83       	std	Y+3, r25	; 0x03
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2f4e:	1f 92       	push	r1
    2f50:	0f 92       	push	r0
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	0f 92       	push	r0
    2f56:	11 24       	eor	r1, r1
    2f58:	2f 93       	push	r18
    2f5a:	3f 93       	push	r19
    2f5c:	4f 93       	push	r20
    2f5e:	5f 93       	push	r21
    2f60:	6f 93       	push	r22
    2f62:	7f 93       	push	r23
    2f64:	8f 93       	push	r24
    2f66:	9f 93       	push	r25
    2f68:	af 93       	push	r26
    2f6a:	bf 93       	push	r27
    2f6c:	ef 93       	push	r30
    2f6e:	ff 93       	push	r31
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2f78:	80 91 92 01 	lds	r24, 0x0192
    2f7c:	90 91 93 01 	lds	r25, 0x0193
    2f80:	00 97       	sbiw	r24, 0x00	; 0
    2f82:	99 f0       	breq	.+38     	; 0x2faa <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2f84:	10 92 94 01 	sts	0x0194, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2f88:	a6 e2       	ldi	r26, 0x26	; 38
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e6 e2       	ldi	r30, 0x26	; 38
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	87 7f       	andi	r24, 0xF7	; 247
    2f94:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2f96:	20 91 92 01 	lds	r18, 0x0192
    2f9a:	30 91 93 01 	lds	r19, 0x0193
    2f9e:	e4 e2       	ldi	r30, 0x24	; 36
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	f9 01       	movw	r30, r18
    2fa8:	09 95       	icall
	}
}
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	ff 91       	pop	r31
    2fb0:	ef 91       	pop	r30
    2fb2:	bf 91       	pop	r27
    2fb4:	af 91       	pop	r26
    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	7f 91       	pop	r23
    2fbc:	6f 91       	pop	r22
    2fbe:	5f 91       	pop	r21
    2fc0:	4f 91       	pop	r20
    2fc2:	3f 91       	pop	r19
    2fc4:	2f 91       	pop	r18
    2fc6:	0f 90       	pop	r0
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	0f 90       	pop	r0
    2fcc:	1f 90       	pop	r1
    2fce:	18 95       	reti

00002fd0 <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	41 e0       	ldi	r20, 0x01	; 1
    2fde:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	62 e0       	ldi	r22, 0x02	; 2
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	63 e0       	ldi	r22, 0x03	; 3
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
}
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <ActivatePins1+0x6>
    300c:	00 d0       	rcall	.+0      	; 0x300e <ActivatePins1+0x8>
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
    3014:	6a 83       	std	Y+2, r22	; 0x02
    3016:	4b 83       	std	Y+3, r20	; 0x03
    3018:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	49 81       	ldd	r20, Y+1	; 0x01
    3020:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    3024:	82 e0       	ldi	r24, 0x02	; 2
    3026:	61 e0       	ldi	r22, 0x01	; 1
    3028:	4a 81       	ldd	r20, Y+2	; 0x02
    302a:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    302e:	82 e0       	ldi	r24, 0x02	; 2
    3030:	62 e0       	ldi	r22, 0x02	; 2
    3032:	4b 81       	ldd	r20, Y+3	; 0x03
    3034:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	63 e0       	ldi	r22, 0x03	; 3
    303c:	4c 81       	ldd	r20, Y+4	; 0x04
    303e:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
}
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <ActivatePins2+0x6>
    3056:	00 d0       	rcall	.+0      	; 0x3058 <ActivatePins2+0x8>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	6a 83       	std	Y+2, r22	; 0x02
    3060:	4b 83       	std	Y+3, r20	; 0x03
    3062:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	63 e0       	ldi	r22, 0x03	; 3
    3068:	4c 81       	ldd	r20, Y+4	; 0x04
    306a:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    306e:	82 e0       	ldi	r24, 0x02	; 2
    3070:	62 e0       	ldi	r22, 0x02	; 2
    3072:	4b 81       	ldd	r20, Y+3	; 0x03
    3074:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    3078:	82 e0       	ldi	r24, 0x02	; 2
    307a:	61 e0       	ldi	r22, 0x01	; 1
    307c:	4a 81       	ldd	r20, Y+2	; 0x02
    307e:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	49 81       	ldd	r20, Y+1	; 0x01
    3088:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
}
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	29 97       	sbiw	r28, 0x09	; 9
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	9a 83       	std	Y+2, r25	; 0x02
    30b0:	89 83       	std	Y+1, r24	; 0x01
    30b2:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    30b4:	29 81       	ldd	r18, Y+1	; 0x01
    30b6:	3a 81       	ldd	r19, Y+2	; 0x02
    30b8:	39 87       	std	Y+9, r19	; 0x09
    30ba:	28 87       	std	Y+8, r18	; 0x08
    30bc:	88 85       	ldd	r24, Y+8	; 0x08
    30be:	99 85       	ldd	r25, Y+9	; 0x09
    30c0:	8a 35       	cpi	r24, 0x5A	; 90
    30c2:	91 05       	cpc	r25, r1
    30c4:	31 f0       	breq	.+12     	; 0x30d2 <SelectStepAngle+0x38>
    30c6:	28 85       	ldd	r18, Y+8	; 0x08
    30c8:	39 85       	ldd	r19, Y+9	; 0x09
    30ca:	24 3b       	cpi	r18, 0xB4	; 180
    30cc:	31 05       	cpc	r19, r1
    30ce:	f1 f0       	breq	.+60     	; 0x310c <SelectStepAngle+0x72>
    30d0:	39 c0       	rjmp	.+114    	; 0x3144 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	3f 83       	std	Y+7, r19	; 0x07
    30da:	2e 83       	std	Y+6, r18	; 0x06
    30dc:	8e 81       	ldd	r24, Y+6	; 0x06
    30de:	9f 81       	ldd	r25, Y+7	; 0x07
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	31 f0       	breq	.+12     	; 0x30f0 <SelectStepAngle+0x56>
    30e4:	2e 81       	ldd	r18, Y+6	; 0x06
    30e6:	3f 81       	ldd	r19, Y+7	; 0x07
    30e8:	21 30       	cpi	r18, 0x01	; 1
    30ea:	31 05       	cpc	r19, r1
    30ec:	41 f0       	breq	.+16     	; 0x30fe <SelectStepAngle+0x64>
    30ee:	2a c0       	rjmp	.+84     	; 0x3144 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	21 e0       	ldi	r18, 0x01	; 1
    30f8:	0e 94 03 18 	call	0x3006	; 0x3006 <ActivatePins1>
    30fc:	23 c0       	rjmp	.+70     	; 0x3144 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	0e 94 28 18 	call	0x3050	; 0x3050 <ActivatePins2>
    310a:	1c c0       	rjmp	.+56     	; 0x3144 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	3d 83       	std	Y+5, r19	; 0x05
    3114:	2c 83       	std	Y+4, r18	; 0x04
    3116:	8c 81       	ldd	r24, Y+4	; 0x04
    3118:	9d 81       	ldd	r25, Y+5	; 0x05
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	31 f0       	breq	.+12     	; 0x312a <SelectStepAngle+0x90>
    311e:	2c 81       	ldd	r18, Y+4	; 0x04
    3120:	3d 81       	ldd	r19, Y+5	; 0x05
    3122:	21 30       	cpi	r18, 0x01	; 1
    3124:	31 05       	cpc	r19, r1
    3126:	41 f0       	breq	.+16     	; 0x3138 <SelectStepAngle+0x9e>
    3128:	0d c0       	rjmp	.+26     	; 0x3144 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	61 e0       	ldi	r22, 0x01	; 1
    312e:	41 e0       	ldi	r20, 0x01	; 1
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	0e 94 28 18 	call	0x3050	; 0x3050 <ActivatePins2>
    3136:	06 c0       	rjmp	.+12     	; 0x3144 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	61 e0       	ldi	r22, 0x01	; 1
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	0e 94 03 18 	call	0x3006	; 0x3006 <ActivatePins1>
						break;
				}
				break;
	}
}
    3144:	29 96       	adiw	r28, 0x09	; 9
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"

#define TIMERS_u16_OCR1A_REG			*((volatile u16 *)0x4A)

void Servo_Init(){
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    315e:	0e 94 df 08 	call	0x11be	; 0x11be <TIMERS_voidTimer1Init>
}
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <Servo_SetAngle+0x6>
    316e:	00 d0       	rcall	.+0      	; 0x3170 <Servo_SetAngle+0x8>
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCR1AValue = (Servo_Angle * 11) + 3005;
    3178:	4b 81       	ldd	r20, Y+3	; 0x03
    317a:	5c 81       	ldd	r21, Y+4	; 0x04
    317c:	ca 01       	movw	r24, r20
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	9c 01       	movw	r18, r24
    3184:	22 0f       	add	r18, r18
    3186:	33 1f       	adc	r19, r19
    3188:	22 0f       	add	r18, r18
    318a:	33 1f       	adc	r19, r19
    318c:	82 0f       	add	r24, r18
    318e:	93 1f       	adc	r25, r19
    3190:	84 0f       	add	r24, r20
    3192:	95 1f       	adc	r25, r21
    3194:	83 54       	subi	r24, 0x43	; 67
    3196:	94 4f       	sbci	r25, 0xF4	; 244
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Local_u16OCR1AValue);
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	0e 94 87 09 	call	0x130e	; 0x130e <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	e9 97       	sbiw	r28, 0x39	; 57
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	64 e0       	ldi	r22, 0x04	; 4
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_setPinValue>
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a0 e8       	ldi	r26, 0x80	; 128
    31de:	bf e3       	ldi	r27, 0x3F	; 63
    31e0:	8d ab       	std	Y+53, r24	; 0x35
    31e2:	9e ab       	std	Y+54, r25	; 0x36
    31e4:	af ab       	std	Y+55, r26	; 0x37
    31e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e8:	6d a9       	ldd	r22, Y+53	; 0x35
    31ea:	7e a9       	ldd	r23, Y+54	; 0x36
    31ec:	8f a9       	ldd	r24, Y+55	; 0x37
    31ee:	98 ad       	ldd	r25, Y+56	; 0x38
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	4a e7       	ldi	r20, 0x7A	; 122
    31f6:	55 e4       	ldi	r21, 0x45	; 69
    31f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	89 ab       	std	Y+49, r24	; 0x31
    3202:	9a ab       	std	Y+50, r25	; 0x32
    3204:	ab ab       	std	Y+51, r26	; 0x33
    3206:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3208:	69 a9       	ldd	r22, Y+49	; 0x31
    320a:	7a a9       	ldd	r23, Y+50	; 0x32
    320c:	8b a9       	ldd	r24, Y+51	; 0x33
    320e:	9c a9       	ldd	r25, Y+52	; 0x34
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e8       	ldi	r20, 0x80	; 128
    3216:	5f e3       	ldi	r21, 0x3F	; 63
    3218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321c:	88 23       	and	r24, r24
    321e:	2c f4       	brge	.+10     	; 0x322a <LCD_sendCommand+0x78>
		__ticks = 1;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	98 ab       	std	Y+48, r25	; 0x30
    3226:	8f a7       	std	Y+47, r24	; 0x2f
    3228:	3f c0       	rjmp	.+126    	; 0x32a8 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    322a:	69 a9       	ldd	r22, Y+49	; 0x31
    322c:	7a a9       	ldd	r23, Y+50	; 0x32
    322e:	8b a9       	ldd	r24, Y+51	; 0x33
    3230:	9c a9       	ldd	r25, Y+52	; 0x34
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	3f ef       	ldi	r19, 0xFF	; 255
    3236:	4f e7       	ldi	r20, 0x7F	; 127
    3238:	57 e4       	ldi	r21, 0x47	; 71
    323a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    323e:	18 16       	cp	r1, r24
    3240:	4c f5       	brge	.+82     	; 0x3294 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3242:	6d a9       	ldd	r22, Y+53	; 0x35
    3244:	7e a9       	ldd	r23, Y+54	; 0x36
    3246:	8f a9       	ldd	r24, Y+55	; 0x37
    3248:	98 ad       	ldd	r25, Y+56	; 0x38
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e2       	ldi	r20, 0x20	; 32
    3250:	51 e4       	ldi	r21, 0x41	; 65
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	98 ab       	std	Y+48, r25	; 0x30
    3268:	8f a7       	std	Y+47, r24	; 0x2f
    326a:	0f c0       	rjmp	.+30     	; 0x328a <LCD_sendCommand+0xd8>
    326c:	80 e9       	ldi	r24, 0x90	; 144
    326e:	91 e0       	ldi	r25, 0x01	; 1
    3270:	9e a7       	std	Y+46, r25	; 0x2e
    3272:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3274:	8d a5       	ldd	r24, Y+45	; 0x2d
    3276:	9e a5       	ldd	r25, Y+46	; 0x2e
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LCD_sendCommand+0xc6>
    327c:	9e a7       	std	Y+46, r25	; 0x2e
    327e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3280:	8f a5       	ldd	r24, Y+47	; 0x2f
    3282:	98 a9       	ldd	r25, Y+48	; 0x30
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	98 ab       	std	Y+48, r25	; 0x30
    3288:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328a:	8f a5       	ldd	r24, Y+47	; 0x2f
    328c:	98 a9       	ldd	r25, Y+48	; 0x30
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	69 f7       	brne	.-38     	; 0x326c <LCD_sendCommand+0xba>
    3292:	14 c0       	rjmp	.+40     	; 0x32bc <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3294:	69 a9       	ldd	r22, Y+49	; 0x31
    3296:	7a a9       	ldd	r23, Y+50	; 0x32
    3298:	8b a9       	ldd	r24, Y+51	; 0x33
    329a:	9c a9       	ldd	r25, Y+52	; 0x34
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	98 ab       	std	Y+48, r25	; 0x30
    32a6:	8f a7       	std	Y+47, r24	; 0x2f
    32a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32aa:	98 a9       	ldd	r25, Y+48	; 0x30
    32ac:	9c a7       	std	Y+44, r25	; 0x2c
    32ae:	8b a7       	std	Y+43, r24	; 0x2b
    32b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <LCD_sendCommand+0x102>
    32b8:	9c a7       	std	Y+44, r25	; 0x2c
    32ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	65 e0       	ldi	r22, 0x05	; 5
    32c2:	70 e0       	ldi	r23, 0x00	; 0
    32c4:	41 e0       	ldi	r20, 0x01	; 1
    32c6:	50 e0       	ldi	r21, 0x00	; 0
    32c8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_setPinValue>
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	a0 e8       	ldi	r26, 0x80	; 128
    32d2:	bf e3       	ldi	r27, 0x3F	; 63
    32d4:	8f a3       	std	Y+39, r24	; 0x27
    32d6:	98 a7       	std	Y+40, r25	; 0x28
    32d8:	a9 a7       	std	Y+41, r26	; 0x29
    32da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32dc:	6f a1       	ldd	r22, Y+39	; 0x27
    32de:	78 a5       	ldd	r23, Y+40	; 0x28
    32e0:	89 a5       	ldd	r24, Y+41	; 0x29
    32e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4a e7       	ldi	r20, 0x7A	; 122
    32ea:	55 e4       	ldi	r21, 0x45	; 69
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	8b a3       	std	Y+35, r24	; 0x23
    32f6:	9c a3       	std	Y+36, r25	; 0x24
    32f8:	ad a3       	std	Y+37, r26	; 0x25
    32fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32fc:	6b a1       	ldd	r22, Y+35	; 0x23
    32fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3300:	8d a1       	ldd	r24, Y+37	; 0x25
    3302:	9e a1       	ldd	r25, Y+38	; 0x26
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e8       	ldi	r20, 0x80	; 128
    330a:	5f e3       	ldi	r21, 0x3F	; 63
    330c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3310:	88 23       	and	r24, r24
    3312:	2c f4       	brge	.+10     	; 0x331e <LCD_sendCommand+0x16c>
		__ticks = 1;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9a a3       	std	Y+34, r25	; 0x22
    331a:	89 a3       	std	Y+33, r24	; 0x21
    331c:	3f c0       	rjmp	.+126    	; 0x339c <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    331e:	6b a1       	ldd	r22, Y+35	; 0x23
    3320:	7c a1       	ldd	r23, Y+36	; 0x24
    3322:	8d a1       	ldd	r24, Y+37	; 0x25
    3324:	9e a1       	ldd	r25, Y+38	; 0x26
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	4c f5       	brge	.+82     	; 0x3388 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3336:	6f a1       	ldd	r22, Y+39	; 0x27
    3338:	78 a5       	ldd	r23, Y+40	; 0x28
    333a:	89 a5       	ldd	r24, Y+41	; 0x29
    333c:	9a a5       	ldd	r25, Y+42	; 0x2a
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e2       	ldi	r20, 0x20	; 32
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	9a a3       	std	Y+34, r25	; 0x22
    335c:	89 a3       	std	Y+33, r24	; 0x21
    335e:	0f c0       	rjmp	.+30     	; 0x337e <LCD_sendCommand+0x1cc>
    3360:	80 e9       	ldi	r24, 0x90	; 144
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	98 a3       	std	Y+32, r25	; 0x20
    3366:	8f 8f       	std	Y+31, r24	; 0x1f
    3368:	8f 8d       	ldd	r24, Y+31	; 0x1f
    336a:	98 a1       	ldd	r25, Y+32	; 0x20
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <LCD_sendCommand+0x1ba>
    3370:	98 a3       	std	Y+32, r25	; 0x20
    3372:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3374:	89 a1       	ldd	r24, Y+33	; 0x21
    3376:	9a a1       	ldd	r25, Y+34	; 0x22
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	9a a3       	std	Y+34, r25	; 0x22
    337c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337e:	89 a1       	ldd	r24, Y+33	; 0x21
    3380:	9a a1       	ldd	r25, Y+34	; 0x22
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	69 f7       	brne	.-38     	; 0x3360 <LCD_sendCommand+0x1ae>
    3386:	14 c0       	rjmp	.+40     	; 0x33b0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3388:	6b a1       	ldd	r22, Y+35	; 0x23
    338a:	7c a1       	ldd	r23, Y+36	; 0x24
    338c:	8d a1       	ldd	r24, Y+37	; 0x25
    338e:	9e a1       	ldd	r25, Y+38	; 0x26
    3390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	9a a3       	std	Y+34, r25	; 0x22
    339a:	89 a3       	std	Y+33, r24	; 0x21
    339c:	89 a1       	ldd	r24, Y+33	; 0x21
    339e:	9a a1       	ldd	r25, Y+34	; 0x22
    33a0:	9e 8f       	std	Y+30, r25	; 0x1e
    33a2:	8d 8f       	std	Y+29, r24	; 0x1d
    33a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <LCD_sendCommand+0x1f6>
    33ac:	9e 8f       	std	Y+30, r25	; 0x1e
    33ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    33b0:	89 ad       	ldd	r24, Y+57	; 0x39
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	82 e0       	ldi	r24, 0x02	; 2
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	b9 01       	movw	r22, r18
    33bc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_setPortValue>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a0 e8       	ldi	r26, 0x80	; 128
    33c6:	bf e3       	ldi	r27, 0x3F	; 63
    33c8:	89 8f       	std	Y+25, r24	; 0x19
    33ca:	9a 8f       	std	Y+26, r25	; 0x1a
    33cc:	ab 8f       	std	Y+27, r26	; 0x1b
    33ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	69 8d       	ldd	r22, Y+25	; 0x19
    33d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a e7       	ldi	r20, 0x7A	; 122
    33de:	55 e4       	ldi	r21, 0x45	; 69
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8d 8b       	std	Y+21, r24	; 0x15
    33ea:	9e 8b       	std	Y+22, r25	; 0x16
    33ec:	af 8b       	std	Y+23, r26	; 0x17
    33ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f0:	6d 89       	ldd	r22, Y+21	; 0x15
    33f2:	7e 89       	ldd	r23, Y+22	; 0x16
    33f4:	8f 89       	ldd	r24, Y+23	; 0x17
    33f6:	98 8d       	ldd	r25, Y+24	; 0x18
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <LCD_sendCommand+0x260>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 8b       	std	Y+20, r25	; 0x14
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	69 8d       	ldd	r22, Y+25	; 0x19
    342c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9c 8b       	std	Y+20, r25	; 0x14
    3450:	8b 8b       	std	Y+19, r24	; 0x13
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <LCD_sendCommand+0x2c0>
    3454:	80 e9       	ldi	r24, 0x90	; 144
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9a 8b       	std	Y+18, r25	; 0x12
    345a:	89 8b       	std	Y+17, r24	; 0x11
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	9a 89       	ldd	r25, Y+18	; 0x12
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <LCD_sendCommand+0x2ae>
    3464:	9a 8b       	std	Y+18, r25	; 0x12
    3466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <LCD_sendCommand+0x2a2>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6d 89       	ldd	r22, Y+21	; 0x15
    347e:	7e 89       	ldd	r23, Y+22	; 0x16
    3480:	8f 89       	ldd	r24, Y+23	; 0x17
    3482:	98 8d       	ldd	r25, Y+24	; 0x18
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9c 8b       	std	Y+20, r25	; 0x14
    348e:	8b 8b       	std	Y+19, r24	; 0x13
    3490:	8b 89       	ldd	r24, Y+19	; 0x13
    3492:	9c 89       	ldd	r25, Y+20	; 0x14
    3494:	98 8b       	std	Y+16, r25	; 0x10
    3496:	8f 87       	std	Y+15, r24	; 0x0f
    3498:	8f 85       	ldd	r24, Y+15	; 0x0f
    349a:	98 89       	ldd	r25, Y+16	; 0x10
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <LCD_sendCommand+0x2ea>
    34a0:	98 8b       	std	Y+16, r25	; 0x10
    34a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	65 e0       	ldi	r22, 0x05	; 5
    34aa:	70 e0       	ldi	r23, 0x00	; 0
    34ac:	40 e0       	ldi	r20, 0x00	; 0
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_setPinValue>
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	a0 e8       	ldi	r26, 0x80	; 128
    34ba:	bf e3       	ldi	r27, 0x3F	; 63
    34bc:	8b 87       	std	Y+11, r24	; 0x0b
    34be:	9c 87       	std	Y+12, r25	; 0x0c
    34c0:	ad 87       	std	Y+13, r26	; 0x0d
    34c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a e7       	ldi	r20, 0x7A	; 122
    34d2:	55 e4       	ldi	r21, 0x45	; 69
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	8f 83       	std	Y+7, r24	; 0x07
    34de:	98 87       	std	Y+8, r25	; 0x08
    34e0:	a9 87       	std	Y+9, r26	; 0x09
    34e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e4:	6f 81       	ldd	r22, Y+7	; 0x07
    34e6:	78 85       	ldd	r23, Y+8	; 0x08
    34e8:	89 85       	ldd	r24, Y+9	; 0x09
    34ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e8       	ldi	r20, 0x80	; 128
    34f2:	5f e3       	ldi	r21, 0x3F	; 63
    34f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f8:	88 23       	and	r24, r24
    34fa:	2c f4       	brge	.+10     	; 0x3506 <LCD_sendCommand+0x354>
		__ticks = 1;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
    3504:	3f c0       	rjmp	.+126    	; 0x3584 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    3506:	6f 81       	ldd	r22, Y+7	; 0x07
    3508:	78 85       	ldd	r23, Y+8	; 0x08
    350a:	89 85       	ldd	r24, Y+9	; 0x09
    350c:	9a 85       	ldd	r25, Y+10	; 0x0a
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	3f ef       	ldi	r19, 0xFF	; 255
    3512:	4f e7       	ldi	r20, 0x7F	; 127
    3514:	57 e4       	ldi	r21, 0x47	; 71
    3516:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    351a:	18 16       	cp	r1, r24
    351c:	4c f5       	brge	.+82     	; 0x3570 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3520:	7c 85       	ldd	r23, Y+12	; 0x0c
    3522:	8d 85       	ldd	r24, Y+13	; 0x0d
    3524:	9e 85       	ldd	r25, Y+14	; 0x0e
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e2       	ldi	r20, 0x20	; 32
    352c:	51 e4       	ldi	r21, 0x41	; 65
    352e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9e 83       	std	Y+6, r25	; 0x06
    3544:	8d 83       	std	Y+5, r24	; 0x05
    3546:	0f c0       	rjmp	.+30     	; 0x3566 <LCD_sendCommand+0x3b4>
    3548:	80 e9       	ldi	r24, 0x90	; 144
    354a:	91 e0       	ldi	r25, 0x01	; 1
    354c:	9c 83       	std	Y+4, r25	; 0x04
    354e:	8b 83       	std	Y+3, r24	; 0x03
    3550:	8b 81       	ldd	r24, Y+3	; 0x03
    3552:	9c 81       	ldd	r25, Y+4	; 0x04
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <LCD_sendCommand+0x3a2>
    3558:	9c 83       	std	Y+4, r25	; 0x04
    355a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	69 f7       	brne	.-38     	; 0x3548 <LCD_sendCommand+0x396>
    356e:	14 c0       	rjmp	.+40     	; 0x3598 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3570:	6f 81       	ldd	r22, Y+7	; 0x07
    3572:	78 85       	ldd	r23, Y+8	; 0x08
    3574:	89 85       	ldd	r24, Y+9	; 0x09
    3576:	9a 85       	ldd	r25, Y+10	; 0x0a
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <LCD_sendCommand+0x3de>
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3598:	e9 96       	adiw	r28, 0x39	; 57
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	e9 97       	sbiw	r28, 0x39	; 57
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    35c0:	83 e0       	ldi	r24, 0x03	; 3
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	64 e0       	ldi	r22, 0x04	; 4
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	41 e0       	ldi	r20, 0x01	; 1
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_setPinValue>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	a0 e8       	ldi	r26, 0x80	; 128
    35d6:	bf e3       	ldi	r27, 0x3F	; 63
    35d8:	8d ab       	std	Y+53, r24	; 0x35
    35da:	9e ab       	std	Y+54, r25	; 0x36
    35dc:	af ab       	std	Y+55, r26	; 0x37
    35de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e0:	6d a9       	ldd	r22, Y+53	; 0x35
    35e2:	7e a9       	ldd	r23, Y+54	; 0x36
    35e4:	8f a9       	ldd	r24, Y+55	; 0x37
    35e6:	98 ad       	ldd	r25, Y+56	; 0x38
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4a e7       	ldi	r20, 0x7A	; 122
    35ee:	55 e4       	ldi	r21, 0x45	; 69
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	89 ab       	std	Y+49, r24	; 0x31
    35fa:	9a ab       	std	Y+50, r25	; 0x32
    35fc:	ab ab       	std	Y+51, r26	; 0x33
    35fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3600:	69 a9       	ldd	r22, Y+49	; 0x31
    3602:	7a a9       	ldd	r23, Y+50	; 0x32
    3604:	8b a9       	ldd	r24, Y+51	; 0x33
    3606:	9c a9       	ldd	r25, Y+52	; 0x34
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	5f e3       	ldi	r21, 0x3F	; 63
    3610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3614:	88 23       	and	r24, r24
    3616:	2c f4       	brge	.+10     	; 0x3622 <LCD_displayCharacter+0x78>
		__ticks = 1;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	98 ab       	std	Y+48, r25	; 0x30
    361e:	8f a7       	std	Y+47, r24	; 0x2f
    3620:	3f c0       	rjmp	.+126    	; 0x36a0 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    3622:	69 a9       	ldd	r22, Y+49	; 0x31
    3624:	7a a9       	ldd	r23, Y+50	; 0x32
    3626:	8b a9       	ldd	r24, Y+51	; 0x33
    3628:	9c a9       	ldd	r25, Y+52	; 0x34
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	3f ef       	ldi	r19, 0xFF	; 255
    362e:	4f e7       	ldi	r20, 0x7F	; 127
    3630:	57 e4       	ldi	r21, 0x47	; 71
    3632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3636:	18 16       	cp	r1, r24
    3638:	4c f5       	brge	.+82     	; 0x368c <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363a:	6d a9       	ldd	r22, Y+53	; 0x35
    363c:	7e a9       	ldd	r23, Y+54	; 0x36
    363e:	8f a9       	ldd	r24, Y+55	; 0x37
    3640:	98 ad       	ldd	r25, Y+56	; 0x38
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e2       	ldi	r20, 0x20	; 32
    3648:	51 e4       	ldi	r21, 0x41	; 65
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	98 ab       	std	Y+48, r25	; 0x30
    3660:	8f a7       	std	Y+47, r24	; 0x2f
    3662:	0f c0       	rjmp	.+30     	; 0x3682 <LCD_displayCharacter+0xd8>
    3664:	80 e9       	ldi	r24, 0x90	; 144
    3666:	91 e0       	ldi	r25, 0x01	; 1
    3668:	9e a7       	std	Y+46, r25	; 0x2e
    366a:	8d a7       	std	Y+45, r24	; 0x2d
    366c:	8d a5       	ldd	r24, Y+45	; 0x2d
    366e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <LCD_displayCharacter+0xc6>
    3674:	9e a7       	std	Y+46, r25	; 0x2e
    3676:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3678:	8f a5       	ldd	r24, Y+47	; 0x2f
    367a:	98 a9       	ldd	r25, Y+48	; 0x30
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	98 ab       	std	Y+48, r25	; 0x30
    3680:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3682:	8f a5       	ldd	r24, Y+47	; 0x2f
    3684:	98 a9       	ldd	r25, Y+48	; 0x30
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	69 f7       	brne	.-38     	; 0x3664 <LCD_displayCharacter+0xba>
    368a:	14 c0       	rjmp	.+40     	; 0x36b4 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368c:	69 a9       	ldd	r22, Y+49	; 0x31
    368e:	7a a9       	ldd	r23, Y+50	; 0x32
    3690:	8b a9       	ldd	r24, Y+51	; 0x33
    3692:	9c a9       	ldd	r25, Y+52	; 0x34
    3694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	98 ab       	std	Y+48, r25	; 0x30
    369e:	8f a7       	std	Y+47, r24	; 0x2f
    36a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a2:	98 a9       	ldd	r25, Y+48	; 0x30
    36a4:	9c a7       	std	Y+44, r25	; 0x2c
    36a6:	8b a7       	std	Y+43, r24	; 0x2b
    36a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <LCD_displayCharacter+0x102>
    36b0:	9c a7       	std	Y+44, r25	; 0x2c
    36b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    36b4:	83 e0       	ldi	r24, 0x03	; 3
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	65 e0       	ldi	r22, 0x05	; 5
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	41 e0       	ldi	r20, 0x01	; 1
    36be:	50 e0       	ldi	r21, 0x00	; 0
    36c0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_setPinValue>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	a0 e8       	ldi	r26, 0x80	; 128
    36ca:	bf e3       	ldi	r27, 0x3F	; 63
    36cc:	8f a3       	std	Y+39, r24	; 0x27
    36ce:	98 a7       	std	Y+40, r25	; 0x28
    36d0:	a9 a7       	std	Y+41, r26	; 0x29
    36d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d4:	6f a1       	ldd	r22, Y+39	; 0x27
    36d6:	78 a5       	ldd	r23, Y+40	; 0x28
    36d8:	89 a5       	ldd	r24, Y+41	; 0x29
    36da:	9a a5       	ldd	r25, Y+42	; 0x2a
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	4a e7       	ldi	r20, 0x7A	; 122
    36e2:	55 e4       	ldi	r21, 0x45	; 69
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	8b a3       	std	Y+35, r24	; 0x23
    36ee:	9c a3       	std	Y+36, r25	; 0x24
    36f0:	ad a3       	std	Y+37, r26	; 0x25
    36f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36f4:	6b a1       	ldd	r22, Y+35	; 0x23
    36f6:	7c a1       	ldd	r23, Y+36	; 0x24
    36f8:	8d a1       	ldd	r24, Y+37	; 0x25
    36fa:	9e a1       	ldd	r25, Y+38	; 0x26
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e8       	ldi	r20, 0x80	; 128
    3702:	5f e3       	ldi	r21, 0x3F	; 63
    3704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3708:	88 23       	and	r24, r24
    370a:	2c f4       	brge	.+10     	; 0x3716 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	9a a3       	std	Y+34, r25	; 0x22
    3712:	89 a3       	std	Y+33, r24	; 0x21
    3714:	3f c0       	rjmp	.+126    	; 0x3794 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    3716:	6b a1       	ldd	r22, Y+35	; 0x23
    3718:	7c a1       	ldd	r23, Y+36	; 0x24
    371a:	8d a1       	ldd	r24, Y+37	; 0x25
    371c:	9e a1       	ldd	r25, Y+38	; 0x26
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	3f ef       	ldi	r19, 0xFF	; 255
    3722:	4f e7       	ldi	r20, 0x7F	; 127
    3724:	57 e4       	ldi	r21, 0x47	; 71
    3726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    372a:	18 16       	cp	r1, r24
    372c:	4c f5       	brge	.+82     	; 0x3780 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372e:	6f a1       	ldd	r22, Y+39	; 0x27
    3730:	78 a5       	ldd	r23, Y+40	; 0x28
    3732:	89 a5       	ldd	r24, Y+41	; 0x29
    3734:	9a a5       	ldd	r25, Y+42	; 0x2a
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e2       	ldi	r20, 0x20	; 32
    373c:	51 e4       	ldi	r21, 0x41	; 65
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	9a a3       	std	Y+34, r25	; 0x22
    3754:	89 a3       	std	Y+33, r24	; 0x21
    3756:	0f c0       	rjmp	.+30     	; 0x3776 <LCD_displayCharacter+0x1cc>
    3758:	80 e9       	ldi	r24, 0x90	; 144
    375a:	91 e0       	ldi	r25, 0x01	; 1
    375c:	98 a3       	std	Y+32, r25	; 0x20
    375e:	8f 8f       	std	Y+31, r24	; 0x1f
    3760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3762:	98 a1       	ldd	r25, Y+32	; 0x20
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <LCD_displayCharacter+0x1ba>
    3768:	98 a3       	std	Y+32, r25	; 0x20
    376a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376c:	89 a1       	ldd	r24, Y+33	; 0x21
    376e:	9a a1       	ldd	r25, Y+34	; 0x22
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	9a a3       	std	Y+34, r25	; 0x22
    3774:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3776:	89 a1       	ldd	r24, Y+33	; 0x21
    3778:	9a a1       	ldd	r25, Y+34	; 0x22
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	69 f7       	brne	.-38     	; 0x3758 <LCD_displayCharacter+0x1ae>
    377e:	14 c0       	rjmp	.+40     	; 0x37a8 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3780:	6b a1       	ldd	r22, Y+35	; 0x23
    3782:	7c a1       	ldd	r23, Y+36	; 0x24
    3784:	8d a1       	ldd	r24, Y+37	; 0x25
    3786:	9e a1       	ldd	r25, Y+38	; 0x26
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9a a3       	std	Y+34, r25	; 0x22
    3792:	89 a3       	std	Y+33, r24	; 0x21
    3794:	89 a1       	ldd	r24, Y+33	; 0x21
    3796:	9a a1       	ldd	r25, Y+34	; 0x22
    3798:	9e 8f       	std	Y+30, r25	; 0x1e
    379a:	8d 8f       	std	Y+29, r24	; 0x1d
    379c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    379e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <LCD_displayCharacter+0x1f6>
    37a4:	9e 8f       	std	Y+30, r25	; 0x1e
    37a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    37a8:	89 ad       	ldd	r24, Y+57	; 0x39
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	b9 01       	movw	r22, r18
    37b4:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_setPortValue>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	a0 e8       	ldi	r26, 0x80	; 128
    37be:	bf e3       	ldi	r27, 0x3F	; 63
    37c0:	89 8f       	std	Y+25, r24	; 0x19
    37c2:	9a 8f       	std	Y+26, r25	; 0x1a
    37c4:	ab 8f       	std	Y+27, r26	; 0x1b
    37c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c8:	69 8d       	ldd	r22, Y+25	; 0x19
    37ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	4a e7       	ldi	r20, 0x7A	; 122
    37d6:	55 e4       	ldi	r21, 0x45	; 69
    37d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	8d 8b       	std	Y+21, r24	; 0x15
    37e2:	9e 8b       	std	Y+22, r25	; 0x16
    37e4:	af 8b       	std	Y+23, r26	; 0x17
    37e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37e8:	6d 89       	ldd	r22, Y+21	; 0x15
    37ea:	7e 89       	ldd	r23, Y+22	; 0x16
    37ec:	8f 89       	ldd	r24, Y+23	; 0x17
    37ee:	98 8d       	ldd	r25, Y+24	; 0x18
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e8       	ldi	r20, 0x80	; 128
    37f6:	5f e3       	ldi	r21, 0x3F	; 63
    37f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37fc:	88 23       	and	r24, r24
    37fe:	2c f4       	brge	.+10     	; 0x380a <LCD_displayCharacter+0x260>
		__ticks = 1;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9c 8b       	std	Y+20, r25	; 0x14
    3806:	8b 8b       	std	Y+19, r24	; 0x13
    3808:	3f c0       	rjmp	.+126    	; 0x3888 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    380a:	6d 89       	ldd	r22, Y+21	; 0x15
    380c:	7e 89       	ldd	r23, Y+22	; 0x16
    380e:	8f 89       	ldd	r24, Y+23	; 0x17
    3810:	98 8d       	ldd	r25, Y+24	; 0x18
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	3f ef       	ldi	r19, 0xFF	; 255
    3816:	4f e7       	ldi	r20, 0x7F	; 127
    3818:	57 e4       	ldi	r21, 0x47	; 71
    381a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    381e:	18 16       	cp	r1, r24
    3820:	4c f5       	brge	.+82     	; 0x3874 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3822:	69 8d       	ldd	r22, Y+25	; 0x19
    3824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e2       	ldi	r20, 0x20	; 32
    3830:	51 e4       	ldi	r21, 0x41	; 65
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9c 8b       	std	Y+20, r25	; 0x14
    3848:	8b 8b       	std	Y+19, r24	; 0x13
    384a:	0f c0       	rjmp	.+30     	; 0x386a <LCD_displayCharacter+0x2c0>
    384c:	80 e9       	ldi	r24, 0x90	; 144
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	9a 8b       	std	Y+18, r25	; 0x12
    3852:	89 8b       	std	Y+17, r24	; 0x11
    3854:	89 89       	ldd	r24, Y+17	; 0x11
    3856:	9a 89       	ldd	r25, Y+18	; 0x12
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <LCD_displayCharacter+0x2ae>
    385c:	9a 8b       	std	Y+18, r25	; 0x12
    385e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3860:	8b 89       	ldd	r24, Y+19	; 0x13
    3862:	9c 89       	ldd	r25, Y+20	; 0x14
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	9c 8b       	std	Y+20, r25	; 0x14
    3868:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386a:	8b 89       	ldd	r24, Y+19	; 0x13
    386c:	9c 89       	ldd	r25, Y+20	; 0x14
    386e:	00 97       	sbiw	r24, 0x00	; 0
    3870:	69 f7       	brne	.-38     	; 0x384c <LCD_displayCharacter+0x2a2>
    3872:	14 c0       	rjmp	.+40     	; 0x389c <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3874:	6d 89       	ldd	r22, Y+21	; 0x15
    3876:	7e 89       	ldd	r23, Y+22	; 0x16
    3878:	8f 89       	ldd	r24, Y+23	; 0x17
    387a:	98 8d       	ldd	r25, Y+24	; 0x18
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	9c 8b       	std	Y+20, r25	; 0x14
    3886:	8b 8b       	std	Y+19, r24	; 0x13
    3888:	8b 89       	ldd	r24, Y+19	; 0x13
    388a:	9c 89       	ldd	r25, Y+20	; 0x14
    388c:	98 8b       	std	Y+16, r25	; 0x10
    388e:	8f 87       	std	Y+15, r24	; 0x0f
    3890:	8f 85       	ldd	r24, Y+15	; 0x0f
    3892:	98 89       	ldd	r25, Y+16	; 0x10
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <LCD_displayCharacter+0x2ea>
    3898:	98 8b       	std	Y+16, r25	; 0x10
    389a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    389c:	83 e0       	ldi	r24, 0x03	; 3
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	65 e0       	ldi	r22, 0x05	; 5
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_setPinValue>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a0 e8       	ldi	r26, 0x80	; 128
    38b2:	bf e3       	ldi	r27, 0x3F	; 63
    38b4:	8b 87       	std	Y+11, r24	; 0x0b
    38b6:	9c 87       	std	Y+12, r25	; 0x0c
    38b8:	ad 87       	std	Y+13, r26	; 0x0d
    38ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38be:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	4a e7       	ldi	r20, 0x7A	; 122
    38ca:	55 e4       	ldi	r21, 0x45	; 69
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	8f 83       	std	Y+7, r24	; 0x07
    38d6:	98 87       	std	Y+8, r25	; 0x08
    38d8:	a9 87       	std	Y+9, r26	; 0x09
    38da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38dc:	6f 81       	ldd	r22, Y+7	; 0x07
    38de:	78 85       	ldd	r23, Y+8	; 0x08
    38e0:	89 85       	ldd	r24, Y+9	; 0x09
    38e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	2c f4       	brge	.+10     	; 0x38fe <LCD_displayCharacter+0x354>
		__ticks = 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
    38fc:	3f c0       	rjmp	.+126    	; 0x397c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    38fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3900:	78 85       	ldd	r23, Y+8	; 0x08
    3902:	89 85       	ldd	r24, Y+9	; 0x09
    3904:	9a 85       	ldd	r25, Y+10	; 0x0a
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	3f ef       	ldi	r19, 0xFF	; 255
    390a:	4f e7       	ldi	r20, 0x7F	; 127
    390c:	57 e4       	ldi	r21, 0x47	; 71
    390e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3912:	18 16       	cp	r1, r24
    3914:	4c f5       	brge	.+82     	; 0x3968 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3916:	6b 85       	ldd	r22, Y+11	; 0x0b
    3918:	7c 85       	ldd	r23, Y+12	; 0x0c
    391a:	8d 85       	ldd	r24, Y+13	; 0x0d
    391c:	9e 85       	ldd	r25, Y+14	; 0x0e
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9e 83       	std	Y+6, r25	; 0x06
    393c:	8d 83       	std	Y+5, r24	; 0x05
    393e:	0f c0       	rjmp	.+30     	; 0x395e <LCD_displayCharacter+0x3b4>
    3940:	80 e9       	ldi	r24, 0x90	; 144
    3942:	91 e0       	ldi	r25, 0x01	; 1
    3944:	9c 83       	std	Y+4, r25	; 0x04
    3946:	8b 83       	std	Y+3, r24	; 0x03
    3948:	8b 81       	ldd	r24, Y+3	; 0x03
    394a:	9c 81       	ldd	r25, Y+4	; 0x04
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <LCD_displayCharacter+0x3a2>
    3950:	9c 83       	std	Y+4, r25	; 0x04
    3952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	9e 81       	ldd	r25, Y+6	; 0x06
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	9e 83       	std	Y+6, r25	; 0x06
    395c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	9e 81       	ldd	r25, Y+6	; 0x06
    3962:	00 97       	sbiw	r24, 0x00	; 0
    3964:	69 f7       	brne	.-38     	; 0x3940 <LCD_displayCharacter+0x396>
    3966:	14 c0       	rjmp	.+40     	; 0x3990 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3968:	6f 81       	ldd	r22, Y+7	; 0x07
    396a:	78 85       	ldd	r23, Y+8	; 0x08
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	8d 83       	std	Y+5, r24	; 0x05
    397c:	8d 81       	ldd	r24, Y+5	; 0x05
    397e:	9e 81       	ldd	r25, Y+6	; 0x06
    3980:	9a 83       	std	Y+2, r25	; 0x02
    3982:	89 83       	std	Y+1, r24	; 0x01
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	9a 81       	ldd	r25, Y+2	; 0x02
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <LCD_displayCharacter+0x3de>
    398c:	9a 83       	std	Y+2, r25	; 0x02
    398e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3990:	e9 96       	adiw	r28, 0x39	; 57
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <LCD_DisplayInteger>:

void LCD_DisplayInteger(u32 num) {
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	68 97       	sbiw	r28, 0x18	; 24
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	6d 8b       	std	Y+21, r22	; 0x15
    39bc:	7e 8b       	std	Y+22, r23	; 0x16
    39be:	8f 8b       	std	Y+23, r24	; 0x17
    39c0:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
    39c2:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
    39c4:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
    39c6:	8c 81       	ldd	r24, Y+4	; 0x04
    39c8:	08 2f       	mov	r16, r24
    39ca:	10 e0       	ldi	r17, 0x00	; 0
    39cc:	8d 89       	ldd	r24, Y+21	; 0x15
    39ce:	9e 89       	ldd	r25, Y+22	; 0x16
    39d0:	af 89       	ldd	r26, Y+23	; 0x17
    39d2:	b8 8d       	ldd	r27, Y+24	; 0x18
    39d4:	2a e0       	ldi	r18, 0x0A	; 10
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	bc 01       	movw	r22, r24
    39de:	cd 01       	movw	r24, r26
    39e0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	28 2f       	mov	r18, r24
    39ea:	20 5d       	subi	r18, 0xD0	; 208
    39ec:	ce 01       	movw	r24, r28
    39ee:	05 96       	adiw	r24, 0x05	; 5
    39f0:	fc 01       	movw	r30, r24
    39f2:	e0 0f       	add	r30, r16
    39f4:	f1 1f       	adc	r31, r17
    39f6:	20 83       	st	Z, r18
    39f8:	8c 81       	ldd	r24, Y+4	; 0x04
    39fa:	8f 5f       	subi	r24, 0xFF	; 255
    39fc:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
    39fe:	8d 89       	ldd	r24, Y+21	; 0x15
    3a00:	9e 89       	ldd	r25, Y+22	; 0x16
    3a02:	af 89       	ldd	r26, Y+23	; 0x17
    3a04:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a06:	2a e0       	ldi	r18, 0x0A	; 10
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodsi4>
    3a16:	da 01       	movw	r26, r20
    3a18:	c9 01       	movw	r24, r18
    3a1a:	8d 8b       	std	Y+21, r24	; 0x15
    3a1c:	9e 8b       	std	Y+22, r25	; 0x16
    3a1e:	af 8b       	std	Y+23, r26	; 0x17
    3a20:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
    3a22:	8d 89       	ldd	r24, Y+21	; 0x15
    3a24:	9e 89       	ldd	r25, Y+22	; 0x16
    3a26:	af 89       	ldd	r26, Y+23	; 0x17
    3a28:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	a1 05       	cpc	r26, r1
    3a2e:	b1 05       	cpc	r27, r1
    3a30:	51 f6       	brne	.-108    	; 0x39c6 <LCD_DisplayInteger+0x24>

    if (isNegative) {
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	88 23       	and	r24, r24
    3a36:	69 f0       	breq	.+26     	; 0x3a52 <LCD_DisplayInteger+0xb0>
        buffer[i++] = '-';
    3a38:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3a:	28 2f       	mov	r18, r24
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	ce 01       	movw	r24, r28
    3a40:	05 96       	adiw	r24, 0x05	; 5
    3a42:	fc 01       	movw	r30, r24
    3a44:	e2 0f       	add	r30, r18
    3a46:	f3 1f       	adc	r31, r19
    3a48:	8d e2       	ldi	r24, 0x2D	; 45
    3a4a:	80 83       	st	Z, r24
    3a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a4e:	8f 5f       	subi	r24, 0xFF	; 255
    3a50:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3a52:	1a 82       	std	Y+2, r1	; 0x02
    3a54:	3d c0       	rjmp	.+122    	; 0x3ad0 <LCD_DisplayInteger+0x12e>
        char temp = buffer[j];
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	05 96       	adiw	r24, 0x05	; 5
    3a60:	fc 01       	movw	r30, r24
    3a62:	e2 0f       	add	r30, r18
    3a64:	f3 1f       	adc	r31, r19
    3a66:	80 81       	ld	r24, Z
    3a68:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	48 2f       	mov	r20, r24
    3a6e:	50 e0       	ldi	r21, 0x00	; 0
    3a70:	8c 81       	ldd	r24, Y+4	; 0x04
    3a72:	28 2f       	mov	r18, r24
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	88 2f       	mov	r24, r24
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	b9 01       	movw	r22, r18
    3a7e:	68 1b       	sub	r22, r24
    3a80:	79 0b       	sbc	r23, r25
    3a82:	cb 01       	movw	r24, r22
    3a84:	9c 01       	movw	r18, r24
    3a86:	21 50       	subi	r18, 0x01	; 1
    3a88:	30 40       	sbci	r19, 0x00	; 0
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	05 96       	adiw	r24, 0x05	; 5
    3a8e:	fc 01       	movw	r30, r24
    3a90:	e2 0f       	add	r30, r18
    3a92:	f3 1f       	adc	r31, r19
    3a94:	20 81       	ld	r18, Z
    3a96:	ce 01       	movw	r24, r28
    3a98:	05 96       	adiw	r24, 0x05	; 5
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	e4 0f       	add	r30, r20
    3a9e:	f5 1f       	adc	r31, r21
    3aa0:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    3aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa4:	28 2f       	mov	r18, r24
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	88 2f       	mov	r24, r24
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a9 01       	movw	r20, r18
    3ab0:	48 1b       	sub	r20, r24
    3ab2:	59 0b       	sbc	r21, r25
    3ab4:	ca 01       	movw	r24, r20
    3ab6:	9c 01       	movw	r18, r24
    3ab8:	21 50       	subi	r18, 0x01	; 1
    3aba:	30 40       	sbci	r19, 0x00	; 0
    3abc:	ce 01       	movw	r24, r28
    3abe:	05 96       	adiw	r24, 0x05	; 5
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	e2 0f       	add	r30, r18
    3ac4:	f3 1f       	adc	r31, r19
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	8f 5f       	subi	r24, 0xFF	; 255
    3ace:	8a 83       	std	Y+2, r24	; 0x02
    3ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad2:	98 2f       	mov	r25, r24
    3ad4:	96 95       	lsr	r25
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	89 17       	cp	r24, r25
    3ada:	08 f4       	brcc	.+2      	; 0x3ade <LCD_DisplayInteger+0x13c>
    3adc:	bc cf       	rjmp	.-136    	; 0x3a56 <LCD_DisplayInteger+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    3ade:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae0:	28 2f       	mov	r18, r24
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	05 96       	adiw	r24, 0x05	; 5
    3ae8:	fc 01       	movw	r30, r24
    3aea:	e2 0f       	add	r30, r18
    3aec:	f3 1f       	adc	r31, r19
    3aee:	10 82       	st	Z, r1

    // Write the string to LCD
    LCD_displayString(buffer);
    3af0:	ce 01       	movw	r24, r28
    3af2:	05 96       	adiw	r24, 0x05	; 5
    3af4:	0e 94 55 1e 	call	0x3caa	; 0x3caa <LCD_displayString>
}
    3af8:	68 96       	adiw	r28, 0x18	; 24
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	08 95       	ret

00003b0e <LCD_init>:


void LCD_init(void)
{
    3b0e:	df 93       	push	r29
    3b10:	cf 93       	push	r28
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	2e 97       	sbiw	r28, 0x0e	; 14
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3b22:	83 e0       	ldi	r24, 0x03	; 3
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	64 e0       	ldi	r22, 0x04	; 4
    3b28:	70 e0       	ldi	r23, 0x00	; 0
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    3b32:	83 e0       	ldi	r24, 0x03	; 3
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	65 e0       	ldi	r22, 0x05	; 5
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3b42:	82 e0       	ldi	r24, 0x02	; 2
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	6f ef       	ldi	r22, 0xFF	; 255
    3b48:	70 e0       	ldi	r23, 0x00	; 0
    3b4a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LCD_setPortDirection>
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	a0 ea       	ldi	r26, 0xA0	; 160
    3b54:	b1 e4       	ldi	r27, 0x41	; 65
    3b56:	8b 87       	std	Y+11, r24	; 0x0b
    3b58:	9c 87       	std	Y+12, r25	; 0x0c
    3b5a:	ad 87       	std	Y+13, r26	; 0x0d
    3b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	4a e7       	ldi	r20, 0x7A	; 122
    3b6c:	55 e4       	ldi	r21, 0x45	; 69
    3b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	8f 83       	std	Y+7, r24	; 0x07
    3b78:	98 87       	std	Y+8, r25	; 0x08
    3b7a:	a9 87       	std	Y+9, r26	; 0x09
    3b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b80:	78 85       	ldd	r23, Y+8	; 0x08
    3b82:	89 85       	ldd	r24, Y+9	; 0x09
    3b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	40 e8       	ldi	r20, 0x80	; 128
    3b8c:	5f e3       	ldi	r21, 0x3F	; 63
    3b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b92:	88 23       	and	r24, r24
    3b94:	2c f4       	brge	.+10     	; 0x3ba0 <LCD_init+0x92>
		__ticks = 1;
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
    3b9e:	3f c0       	rjmp	.+126    	; 0x3c1e <LCD_init+0x110>
	else if (__tmp > 65535)
    3ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba2:	78 85       	ldd	r23, Y+8	; 0x08
    3ba4:	89 85       	ldd	r24, Y+9	; 0x09
    3ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	3f ef       	ldi	r19, 0xFF	; 255
    3bac:	4f e7       	ldi	r20, 0x7F	; 127
    3bae:	57 e4       	ldi	r21, 0x47	; 71
    3bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bb4:	18 16       	cp	r1, r24
    3bb6:	4c f5       	brge	.+82     	; 0x3c0a <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e2       	ldi	r20, 0x20	; 32
    3bc6:	51 e4       	ldi	r21, 0x41	; 65
    3bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	9e 83       	std	Y+6, r25	; 0x06
    3bde:	8d 83       	std	Y+5, r24	; 0x05
    3be0:	0f c0       	rjmp	.+30     	; 0x3c00 <LCD_init+0xf2>
    3be2:	80 e9       	ldi	r24, 0x90	; 144
    3be4:	91 e0       	ldi	r25, 0x01	; 1
    3be6:	9c 83       	std	Y+4, r25	; 0x04
    3be8:	8b 83       	std	Y+3, r24	; 0x03
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <LCD_init+0xe0>
    3bf2:	9c 83       	std	Y+4, r25	; 0x04
    3bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	01 97       	sbiw	r24, 0x01	; 1
    3bfc:	9e 83       	std	Y+6, r25	; 0x06
    3bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c00:	8d 81       	ldd	r24, Y+5	; 0x05
    3c02:	9e 81       	ldd	r25, Y+6	; 0x06
    3c04:	00 97       	sbiw	r24, 0x00	; 0
    3c06:	69 f7       	brne	.-38     	; 0x3be2 <LCD_init+0xd4>
    3c08:	14 c0       	rjmp	.+40     	; 0x3c32 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c0c:	78 85       	ldd	r23, Y+8	; 0x08
    3c0e:	89 85       	ldd	r24, Y+9	; 0x09
    3c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	9e 83       	std	Y+6, r25	; 0x06
    3c1c:	8d 83       	std	Y+5, r24	; 0x05
    3c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c20:	9e 81       	ldd	r25, Y+6	; 0x06
    3c22:	9a 83       	std	Y+2, r25	; 0x02
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	01 97       	sbiw	r24, 0x01	; 1
    3c2c:	f1 f7       	brne	.-4      	; 0x3c2a <LCD_init+0x11c>
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3c32:	88 e3       	ldi	r24, 0x38	; 56
    3c34:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3c38:	8c e0       	ldi	r24, 0x0C	; 12
    3c3a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
}
    3c44:	2e 96       	adiw	r28, 0x0e	; 14
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	08 95       	ret

00003c56 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3c56:	df 93       	push	r29
    3c58:	cf 93       	push	r28
    3c5a:	00 d0       	rcall	.+0      	; 0x3c5c <LCD_GoToXY+0x6>
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <LCD_GoToXY+0x8>
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	89 83       	std	Y+1, r24	; 0x01
    3c64:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	88 32       	cpi	r24, 0x28	; 40
    3c6a:	c0 f4       	brcc	.+48     	; 0x3c9c <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	28 2f       	mov	r18, r24
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	3c 83       	std	Y+4, r19	; 0x04
    3c74:	2b 83       	std	Y+3, r18	; 0x03
    3c76:	8b 81       	ldd	r24, Y+3	; 0x03
    3c78:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	31 f0       	breq	.+12     	; 0x3c8a <LCD_GoToXY+0x34>
    3c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c80:	3c 81       	ldd	r19, Y+4	; 0x04
    3c82:	21 30       	cpi	r18, 0x01	; 1
    3c84:	31 05       	cpc	r19, r1
    3c86:	31 f0       	breq	.+12     	; 0x3c94 <LCD_GoToXY+0x3e>
    3c88:	09 c0       	rjmp	.+18     	; 0x3c9c <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	80 58       	subi	r24, 0x80	; 128
    3c8e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
    3c92:	04 c0       	rjmp	.+8      	; 0x3c9c <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	80 54       	subi	r24, 0x40	; 64
    3c98:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
			break;
		}
	}
}
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	08 95       	ret

00003caa <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3caa:	df 93       	push	r29
    3cac:	cf 93       	push	r28
    3cae:	00 d0       	rcall	.+0      	; 0x3cb0 <LCD_displayString+0x6>
    3cb0:	0f 92       	push	r0
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
    3cb6:	9b 83       	std	Y+3, r25	; 0x03
    3cb8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3cba:	19 82       	std	Y+1, r1	; 0x01
    3cbc:	0e c0       	rjmp	.+28     	; 0x3cda <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	28 2f       	mov	r18, r24
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	fc 01       	movw	r30, r24
    3cca:	e2 0f       	add	r30, r18
    3ccc:	f3 1f       	adc	r31, r19
    3cce:	80 81       	ld	r24, Z
    3cd0:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>
		i++;
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	8f 5f       	subi	r24, 0xFF	; 255
    3cd8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	28 2f       	mov	r18, r24
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e2 0f       	add	r30, r18
    3ce8:	f3 1f       	adc	r31, r19
    3cea:	80 81       	ld	r24, Z
    3cec:	88 23       	and	r24, r24
    3cee:	39 f7       	brne	.-50     	; 0x3cbe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	28 97       	sbiw	r28, 0x08	; 8
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	f8 94       	cli
    3d0a:	de bf       	out	0x3e, r29	; 62
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	8b 83       	std	Y+3, r24	; 0x03
    3d12:	6c 83       	std	Y+4, r22	; 0x04
    3d14:	5e 83       	std	Y+6, r21	; 0x06
    3d16:	4d 83       	std	Y+5, r20	; 0x05
    3d18:	38 87       	std	Y+8, r19	; 0x08
    3d1a:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3d1c:	1a 82       	std	Y+2, r1	; 0x02
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	88 23       	and	r24, r24
    3d26:	49 f4       	brne	.+18     	; 0x3d3a <LCD_String_xy+0x3e>
    3d28:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2a:	80 31       	cpi	r24, 0x10	; 16
    3d2c:	30 f4       	brcc	.+12     	; 0x3d3a <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d30:	8f 70       	andi	r24, 0x0F	; 15
    3d32:	80 68       	ori	r24, 0x80	; 128
    3d34:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
    3d38:	3a c0       	rjmp	.+116    	; 0x3dae <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	81 30       	cpi	r24, 0x01	; 1
    3d3e:	b9 f5       	brne	.+110    	; 0x3dae <LCD_String_xy+0xb2>
    3d40:	8c 81       	ldd	r24, Y+4	; 0x04
    3d42:	80 31       	cpi	r24, 0x10	; 16
    3d44:	a0 f5       	brcc	.+104    	; 0x3dae <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    3d46:	8c 81       	ldd	r24, Y+4	; 0x04
    3d48:	8f 70       	andi	r24, 0x0F	; 15
    3d4a:	80 6c       	ori	r24, 0xC0	; 192
    3d4c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
    3d50:	2e c0       	rjmp	.+92     	; 0x3dae <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3d52:	8a 81       	ldd	r24, Y+2	; 0x02
    3d54:	28 2f       	mov	r18, r24
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	e2 0f       	add	r30, r18
    3d60:	f3 1f       	adc	r31, r19
    3d62:	80 81       	ld	r24, Z
    3d64:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>
		i++;
    3d68:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6a:	8f 5f       	subi	r24, 0xFF	; 255
    3d6c:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d70:	88 23       	and	r24, r24
    3d72:	71 f4       	brne	.+28     	; 0x3d90 <LCD_String_xy+0x94>
    3d74:	8c 81       	ldd	r24, Y+4	; 0x04
    3d76:	83 30       	cpi	r24, 0x03	; 3
    3d78:	58 f0       	brcs	.+22     	; 0x3d90 <LCD_String_xy+0x94>
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	8b 30       	cpi	r24, 0x0B	; 11
    3d7e:	41 f4       	brne	.+16     	; 0x3d90 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <LCD_GoToXY>
			c++;
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	8f 5f       	subi	r24, 0xFF	; 255
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	0b c0       	rjmp	.+22     	; 0x3da6 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	81 30       	cpi	r24, 0x01	; 1
    3d94:	41 f4       	brne	.+16     	; 0x3da6 <LCD_String_xy+0xaa>
    3d96:	8c 81       	ldd	r24, Y+4	; 0x04
    3d98:	83 30       	cpi	r24, 0x03	; 3
    3d9a:	28 f0       	brcs	.+10     	; 0x3da6 <LCD_String_xy+0xaa>
    3d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9e:	8b 30       	cpi	r24, 0x0B	; 11
    3da0:	11 f4       	brne	.+4      	; 0x3da6 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3da2:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <LCD_ClearScreen>
		}

		*count = c;
    3da6:	ef 81       	ldd	r30, Y+7	; 0x07
    3da8:	f8 85       	ldd	r31, Y+8	; 0x08
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	28 2f       	mov	r18, r24
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	8d 81       	ldd	r24, Y+5	; 0x05
    3db6:	9e 81       	ldd	r25, Y+6	; 0x06
    3db8:	fc 01       	movw	r30, r24
    3dba:	e2 0f       	add	r30, r18
    3dbc:	f3 1f       	adc	r31, r19
    3dbe:	80 81       	ld	r24, Z
    3dc0:	88 23       	and	r24, r24
    3dc2:	39 f6       	brne	.-114    	; 0x3d52 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3dc4:	28 96       	adiw	r28, 0x08	; 8
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	08 95       	ret

00003dd6 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3dd6:	df 93       	push	r29
    3dd8:	cf 93       	push	r28
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	2e 97       	sbiw	r28, 0x0e	; 14
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	a0 e0       	ldi	r26, 0x00	; 0
    3df6:	b0 e4       	ldi	r27, 0x40	; 64
    3df8:	8b 87       	std	Y+11, r24	; 0x0b
    3dfa:	9c 87       	std	Y+12, r25	; 0x0c
    3dfc:	ad 87       	std	Y+13, r26	; 0x0d
    3dfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a e7       	ldi	r20, 0x7A	; 122
    3e0e:	55 e4       	ldi	r21, 0x45	; 69
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	8f 83       	std	Y+7, r24	; 0x07
    3e1a:	98 87       	std	Y+8, r25	; 0x08
    3e1c:	a9 87       	std	Y+9, r26	; 0x09
    3e1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e20:	6f 81       	ldd	r22, Y+7	; 0x07
    3e22:	78 85       	ldd	r23, Y+8	; 0x08
    3e24:	89 85       	ldd	r24, Y+9	; 0x09
    3e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e8       	ldi	r20, 0x80	; 128
    3e2e:	5f e3       	ldi	r21, 0x3F	; 63
    3e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e34:	88 23       	and	r24, r24
    3e36:	2c f4       	brge	.+10     	; 0x3e42 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
    3e40:	3f c0       	rjmp	.+126    	; 0x3ec0 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3e42:	6f 81       	ldd	r22, Y+7	; 0x07
    3e44:	78 85       	ldd	r23, Y+8	; 0x08
    3e46:	89 85       	ldd	r24, Y+9	; 0x09
    3e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	3f ef       	ldi	r19, 0xFF	; 255
    3e4e:	4f e7       	ldi	r20, 0x7F	; 127
    3e50:	57 e4       	ldi	r21, 0x47	; 71
    3e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e56:	18 16       	cp	r1, r24
    3e58:	4c f5       	brge	.+82     	; 0x3eac <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e2       	ldi	r20, 0x20	; 32
    3e68:	51 e4       	ldi	r21, 0x41	; 65
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	bc 01       	movw	r22, r24
    3e74:	cd 01       	movw	r24, r26
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9e 83       	std	Y+6, r25	; 0x06
    3e80:	8d 83       	std	Y+5, r24	; 0x05
    3e82:	0f c0       	rjmp	.+30     	; 0x3ea2 <LCD_ClearScreen+0xcc>
    3e84:	80 e9       	ldi	r24, 0x90	; 144
    3e86:	91 e0       	ldi	r25, 0x01	; 1
    3e88:	9c 83       	std	Y+4, r25	; 0x04
    3e8a:	8b 83       	std	Y+3, r24	; 0x03
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <LCD_ClearScreen+0xba>
    3e94:	9c 83       	std	Y+4, r25	; 0x04
    3e96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	69 f7       	brne	.-38     	; 0x3e84 <LCD_ClearScreen+0xae>
    3eaa:	14 c0       	rjmp	.+40     	; 0x3ed4 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	6f 81       	ldd	r22, Y+7	; 0x07
    3eae:	78 85       	ldd	r23, Y+8	; 0x08
    3eb0:	89 85       	ldd	r24, Y+9	; 0x09
    3eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	9e 83       	std	Y+6, r25	; 0x06
    3ebe:	8d 83       	std	Y+5, r24	; 0x05
    3ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec4:	9a 83       	std	Y+2, r25	; 0x02
    3ec6:	89 83       	std	Y+1, r24	; 0x01
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <LCD_ClearScreen+0xf6>
    3ed0:	9a 83       	std	Y+2, r25	; 0x02
    3ed2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3ed4:	2e 96       	adiw	r28, 0x0e	; 14
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	08 95       	ret

00003ee6 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	2e 97       	sbiw	r28, 0x0e	; 14
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3efa:	88 e1       	ldi	r24, 0x18	; 24
    3efc:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 ea       	ldi	r26, 0xA0	; 160
    3f06:	b1 e4       	ldi	r27, 0x41	; 65
    3f08:	8b 87       	std	Y+11, r24	; 0x0b
    3f0a:	9c 87       	std	Y+12, r25	; 0x0c
    3f0c:	ad 87       	std	Y+13, r26	; 0x0d
    3f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	4a e7       	ldi	r20, 0x7A	; 122
    3f1e:	55 e4       	ldi	r21, 0x45	; 69
    3f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	8f 83       	std	Y+7, r24	; 0x07
    3f2a:	98 87       	std	Y+8, r25	; 0x08
    3f2c:	a9 87       	std	Y+9, r26	; 0x09
    3f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f30:	6f 81       	ldd	r22, Y+7	; 0x07
    3f32:	78 85       	ldd	r23, Y+8	; 0x08
    3f34:	89 85       	ldd	r24, Y+9	; 0x09
    3f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e8       	ldi	r20, 0x80	; 128
    3f3e:	5f e3       	ldi	r21, 0x3F	; 63
    3f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f44:	88 23       	and	r24, r24
    3f46:	2c f4       	brge	.+10     	; 0x3f52 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9e 83       	std	Y+6, r25	; 0x06
    3f4e:	8d 83       	std	Y+5, r24	; 0x05
    3f50:	3f c0       	rjmp	.+126    	; 0x3fd0 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3f52:	6f 81       	ldd	r22, Y+7	; 0x07
    3f54:	78 85       	ldd	r23, Y+8	; 0x08
    3f56:	89 85       	ldd	r24, Y+9	; 0x09
    3f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	3f ef       	ldi	r19, 0xFF	; 255
    3f5e:	4f e7       	ldi	r20, 0x7F	; 127
    3f60:	57 e4       	ldi	r21, 0x47	; 71
    3f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f66:	18 16       	cp	r1, r24
    3f68:	4c f5       	brge	.+82     	; 0x3fbc <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e2       	ldi	r20, 0x20	; 32
    3f78:	51 e4       	ldi	r21, 0x41	; 65
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	9e 83       	std	Y+6, r25	; 0x06
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	0f c0       	rjmp	.+30     	; 0x3fb2 <LCD_ShiftingLeft+0xcc>
    3f94:	80 e9       	ldi	r24, 0x90	; 144
    3f96:	91 e0       	ldi	r25, 0x01	; 1
    3f98:	9c 83       	std	Y+4, r25	; 0x04
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <LCD_ShiftingLeft+0xba>
    3fa4:	9c 83       	std	Y+4, r25	; 0x04
    3fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3faa:	9e 81       	ldd	r25, Y+6	; 0x06
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	69 f7       	brne	.-38     	; 0x3f94 <LCD_ShiftingLeft+0xae>
    3fba:	14 c0       	rjmp	.+40     	; 0x3fe4 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbe:	78 85       	ldd	r23, Y+8	; 0x08
    3fc0:	89 85       	ldd	r24, Y+9	; 0x09
    3fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd4:	9a 83       	std	Y+2, r25	; 0x02
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <LCD_ShiftingLeft+0xf6>
    3fe0:	9a 83       	std	Y+2, r25	; 0x02
    3fe2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3fe4:	2e 96       	adiw	r28, 0x0e	; 14
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	2e 97       	sbiw	r28, 0x0e	; 14
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    400a:	8c e1       	ldi	r24, 0x1C	; 28
    400c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	a0 ea       	ldi	r26, 0xA0	; 160
    4016:	b1 e4       	ldi	r27, 0x41	; 65
    4018:	8b 87       	std	Y+11, r24	; 0x0b
    401a:	9c 87       	std	Y+12, r25	; 0x0c
    401c:	ad 87       	std	Y+13, r26	; 0x0d
    401e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4020:	6b 85       	ldd	r22, Y+11	; 0x0b
    4022:	7c 85       	ldd	r23, Y+12	; 0x0c
    4024:	8d 85       	ldd	r24, Y+13	; 0x0d
    4026:	9e 85       	ldd	r25, Y+14	; 0x0e
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	4a e7       	ldi	r20, 0x7A	; 122
    402e:	55 e4       	ldi	r21, 0x45	; 69
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	8f 83       	std	Y+7, r24	; 0x07
    403a:	98 87       	std	Y+8, r25	; 0x08
    403c:	a9 87       	std	Y+9, r26	; 0x09
    403e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4040:	6f 81       	ldd	r22, Y+7	; 0x07
    4042:	78 85       	ldd	r23, Y+8	; 0x08
    4044:	89 85       	ldd	r24, Y+9	; 0x09
    4046:	9a 85       	ldd	r25, Y+10	; 0x0a
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e8       	ldi	r20, 0x80	; 128
    404e:	5f e3       	ldi	r21, 0x3F	; 63
    4050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4054:	88 23       	and	r24, r24
    4056:	2c f4       	brge	.+10     	; 0x4062 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	9e 83       	std	Y+6, r25	; 0x06
    405e:	8d 83       	std	Y+5, r24	; 0x05
    4060:	3f c0       	rjmp	.+126    	; 0x40e0 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    4062:	6f 81       	ldd	r22, Y+7	; 0x07
    4064:	78 85       	ldd	r23, Y+8	; 0x08
    4066:	89 85       	ldd	r24, Y+9	; 0x09
    4068:	9a 85       	ldd	r25, Y+10	; 0x0a
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	3f ef       	ldi	r19, 0xFF	; 255
    406e:	4f e7       	ldi	r20, 0x7F	; 127
    4070:	57 e4       	ldi	r21, 0x47	; 71
    4072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4076:	18 16       	cp	r1, r24
    4078:	4c f5       	brge	.+82     	; 0x40cc <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    407a:	6b 85       	ldd	r22, Y+11	; 0x0b
    407c:	7c 85       	ldd	r23, Y+12	; 0x0c
    407e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4080:	9e 85       	ldd	r25, Y+14	; 0x0e
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	40 e2       	ldi	r20, 0x20	; 32
    4088:	51 e4       	ldi	r21, 0x41	; 65
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409a:	dc 01       	movw	r26, r24
    409c:	cb 01       	movw	r24, r22
    409e:	9e 83       	std	Y+6, r25	; 0x06
    40a0:	8d 83       	std	Y+5, r24	; 0x05
    40a2:	0f c0       	rjmp	.+30     	; 0x40c2 <LCD_ShiftingRight+0xcc>
    40a4:	80 e9       	ldi	r24, 0x90	; 144
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	9c 83       	std	Y+4, r25	; 0x04
    40aa:	8b 83       	std	Y+3, r24	; 0x03
    40ac:	8b 81       	ldd	r24, Y+3	; 0x03
    40ae:	9c 81       	ldd	r25, Y+4	; 0x04
    40b0:	01 97       	sbiw	r24, 0x01	; 1
    40b2:	f1 f7       	brne	.-4      	; 0x40b0 <LCD_ShiftingRight+0xba>
    40b4:	9c 83       	std	Y+4, r25	; 0x04
    40b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ba:	9e 81       	ldd	r25, Y+6	; 0x06
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	9e 83       	std	Y+6, r25	; 0x06
    40c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c2:	8d 81       	ldd	r24, Y+5	; 0x05
    40c4:	9e 81       	ldd	r25, Y+6	; 0x06
    40c6:	00 97       	sbiw	r24, 0x00	; 0
    40c8:	69 f7       	brne	.-38     	; 0x40a4 <LCD_ShiftingRight+0xae>
    40ca:	14 c0       	rjmp	.+40     	; 0x40f4 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40cc:	6f 81       	ldd	r22, Y+7	; 0x07
    40ce:	78 85       	ldd	r23, Y+8	; 0x08
    40d0:	89 85       	ldd	r24, Y+9	; 0x09
    40d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	9e 83       	std	Y+6, r25	; 0x06
    40de:	8d 83       	std	Y+5, r24	; 0x05
    40e0:	8d 81       	ldd	r24, Y+5	; 0x05
    40e2:	9e 81       	ldd	r25, Y+6	; 0x06
    40e4:	9a 83       	std	Y+2, r25	; 0x02
    40e6:	89 83       	std	Y+1, r24	; 0x01
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	01 97       	sbiw	r24, 0x01	; 1
    40ee:	f1 f7       	brne	.-4      	; 0x40ec <LCD_ShiftingRight+0xf6>
    40f0:	9a 83       	std	Y+2, r25	; 0x02
    40f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    40f4:	2e 96       	adiw	r28, 0x0e	; 14
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	f8 94       	cli
    40fa:	de bf       	out	0x3e, r29	; 62
    40fc:	0f be       	out	0x3f, r0	; 63
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	cf 91       	pop	r28
    4102:	df 91       	pop	r29
    4104:	08 95       	ret

00004106 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    4106:	0f 93       	push	r16
    4108:	df 93       	push	r29
    410a:	cf 93       	push	r28
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	28 97       	sbiw	r28, 0x08	; 8
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	f8 94       	cli
    4116:	de bf       	out	0x3e, r29	; 62
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	cd bf       	out	0x3d, r28	; 61
    411c:	8b 83       	std	Y+3, r24	; 0x03
    411e:	7d 83       	std	Y+5, r23	; 0x05
    4120:	6c 83       	std	Y+4, r22	; 0x04
    4122:	4e 83       	std	Y+6, r20	; 0x06
    4124:	2f 83       	std	Y+7, r18	; 0x07
    4126:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    4128:	88 85       	ldd	r24, Y+8	; 0x08
    412a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    412e:	1a 82       	std	Y+2, r1	; 0x02
    4130:	19 82       	std	Y+1, r1	; 0x01
    4132:	0f c0       	rjmp	.+30     	; 0x4152 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    4134:	29 81       	ldd	r18, Y+1	; 0x01
    4136:	3a 81       	ldd	r19, Y+2	; 0x02
    4138:	8c 81       	ldd	r24, Y+4	; 0x04
    413a:	9d 81       	ldd	r25, Y+5	; 0x05
    413c:	fc 01       	movw	r30, r24
    413e:	e2 0f       	add	r30, r18
    4140:	f3 1f       	adc	r31, r19
    4142:	80 81       	ld	r24, Z
    4144:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	9a 81       	ldd	r25, Y+2	; 0x02
    414c:	01 96       	adiw	r24, 0x01	; 1
    414e:	9a 83       	std	Y+2, r25	; 0x02
    4150:	89 83       	std	Y+1, r24	; 0x01
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	9a 81       	ldd	r25, Y+2	; 0x02
    4156:	88 30       	cpi	r24, 0x08	; 8
    4158:	91 05       	cpc	r25, r1
    415a:	64 f3       	brlt	.-40     	; 0x4134 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    415c:	8e 81       	ldd	r24, Y+6	; 0x06
    415e:	6f 81       	ldd	r22, Y+7	; 0x07
    4160:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    4164:	8b 81       	ldd	r24, Y+3	; 0x03
    4166:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    416a:	8f 81       	ldd	r24, Y+7	; 0x07
    416c:	80 31       	cpi	r24, 0x10	; 16
    416e:	48 f0       	brcs	.+18     	; 0x4182 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    4170:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	60 e0       	ldi	r22, 0x00	; 0
    4178:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    417c:	8b 81       	ldd	r24, Y+3	; 0x03
    417e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>
	}
}
    4182:	28 96       	adiw	r28, 0x08	; 8
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	cf 91       	pop	r28
    4190:	df 91       	pop	r29
    4192:	0f 91       	pop	r16
    4194:	08 95       	ret

00004196 <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    419e:	28 97       	sbiw	r28, 0x08	; 8
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	6d 83       	std	Y+5, r22	; 0x05
    41ac:	7e 83       	std	Y+6, r23	; 0x06
    41ae:	8f 83       	std	Y+7, r24	; 0x07
    41b0:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    41b2:	6d 81       	ldd	r22, Y+5	; 0x05
    41b4:	7e 81       	ldd	r23, Y+6	; 0x06
    41b6:	8f 81       	ldd	r24, Y+7	; 0x07
    41b8:	98 85       	ldd	r25, Y+8	; 0x08
    41ba:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	9c 83       	std	Y+4, r25	; 0x04
    41c4:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ca:	aa 27       	eor	r26, r26
    41cc:	97 fd       	sbrc	r25, 7
    41ce:	a0 95       	com	r26
    41d0:	ba 2f       	mov	r27, r26
    41d2:	bc 01       	movw	r22, r24
    41d4:	cd 01       	movw	r24, r26
    41d6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    41da:	9b 01       	movw	r18, r22
    41dc:	ac 01       	movw	r20, r24
    41de:	6d 81       	ldd	r22, Y+5	; 0x05
    41e0:	7e 81       	ldd	r23, Y+6	; 0x06
    41e2:	8f 81       	ldd	r24, Y+7	; 0x07
    41e4:	98 85       	ldd	r25, Y+8	; 0x08
    41e6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	bc 01       	movw	r22, r24
    41f0:	cd 01       	movw	r24, r26
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	4a e7       	ldi	r20, 0x7A	; 122
    41f8:	54 e4       	ldi	r21, 0x44	; 68
    41fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	9a 83       	std	Y+2, r25	; 0x02
    4210:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	9c 81       	ldd	r25, Y+4	; 0x04
    4216:	84 36       	cpi	r24, 0x64	; 100
    4218:	91 05       	cpc	r25, r1
    421a:	54 f0       	brlt	.+20     	; 0x4230 <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    421c:	8b 81       	ldd	r24, Y+3	; 0x03
    421e:	9c 81       	ldd	r25, Y+4	; 0x04
    4220:	2a e0       	ldi	r18, 0x0A	; 10
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	b9 01       	movw	r22, r18
    4226:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <__divmodhi4>
    422a:	cb 01       	movw	r24, r22
    422c:	9c 83       	std	Y+4, r25	; 0x04
    422e:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_DisplayInteger(integerPart);
    4230:	8b 81       	ldd	r24, Y+3	; 0x03
    4232:	9c 81       	ldd	r25, Y+4	; 0x04
    4234:	aa 27       	eor	r26, r26
    4236:	97 fd       	sbrc	r25, 7
    4238:	a0 95       	com	r26
    423a:	ba 2f       	mov	r27, r26
    423c:	bc 01       	movw	r22, r24
    423e:	cd 01       	movw	r24, r26
    4240:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <LCD_DisplayInteger>
    LCD_displayCharacter('.');
    4244:	8e e2       	ldi	r24, 0x2E	; 46
    4246:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>
    LCD_DisplayInteger(decimalPart);
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	aa 27       	eor	r26, r26
    4250:	97 fd       	sbrc	r25, 7
    4252:	a0 95       	com	r26
    4254:	ba 2f       	mov	r27, r26
    4256:	bc 01       	movw	r22, r24
    4258:	cd 01       	movw	r24, r26
    425a:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <LCD_DisplayInteger>
    
}
    425e:	28 96       	adiw	r28, 0x08	; 8
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret

00004270 <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	00 d0       	rcall	.+0      	; 0x4276 <displayMinusNumbers+0x6>
    4276:	00 d0       	rcall	.+0      	; 0x4278 <displayMinusNumbers+0x8>
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	69 83       	std	Y+1, r22	; 0x01
    427e:	7a 83       	std	Y+2, r23	; 0x02
    4280:	8b 83       	std	Y+3, r24	; 0x03
    4282:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    4284:	8d e2       	ldi	r24, 0x2D	; 45
    4286:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayCharacter>
	number = -number;
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	9a 81       	ldd	r25, Y+2	; 0x02
    428e:	ab 81       	ldd	r26, Y+3	; 0x03
    4290:	bc 81       	ldd	r27, Y+4	; 0x04
    4292:	b0 58       	subi	r27, 0x80	; 128
    4294:	89 83       	std	Y+1, r24	; 0x01
    4296:	9a 83       	std	Y+2, r25	; 0x02
    4298:	ab 83       	std	Y+3, r26	; 0x03
    429a:	bc 83       	std	Y+4, r27	; 0x04
	LCD_DisplayInteger(number);   
    429c:	69 81       	ldd	r22, Y+1	; 0x01
    429e:	7a 81       	ldd	r23, Y+2	; 0x02
    42a0:	8b 81       	ldd	r24, Y+3	; 0x03
    42a2:	9c 81       	ldd	r25, Y+4	; 0x04
    42a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	bc 01       	movw	r22, r24
    42ae:	cd 01       	movw	r24, r26
    42b0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <LCD_DisplayInteger>
}
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	08 95       	ret

000042c2 <KPD_voidInit>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	00 d0       	rcall	.+0      	; 0x42c8 <KPD_voidInit+0x6>
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    42cc:	1a 82       	std	Y+2, r1	; 0x02
    42ce:	19 82       	std	Y+1, r1	; 0x01
    42d0:	31 c0       	rjmp	.+98     	; 0x4334 <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	fc 01       	movw	r30, r24
    42d8:	e5 58       	subi	r30, 0x85	; 133
    42da:	fe 4f       	sbci	r31, 0xFE	; 254
    42dc:	90 81       	ld	r25, Z
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	69 2f       	mov	r22, r25
    42e2:	41 e0       	ldi	r20, 0x01	; 1
    42e4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	9a 81       	ldd	r25, Y+2	; 0x02
    42ec:	fc 01       	movw	r30, r24
    42ee:	e5 58       	subi	r30, 0x85	; 133
    42f0:	fe 4f       	sbci	r31, 0xFE	; 254
    42f2:	90 81       	ld	r25, Z
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	69 2f       	mov	r22, r25
    42f8:	41 e0       	ldi	r20, 0x01	; 1
    42fa:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
    4300:	9a 81       	ldd	r25, Y+2	; 0x02
    4302:	fc 01       	movw	r30, r24
    4304:	e1 58       	subi	r30, 0x81	; 129
    4306:	fe 4f       	sbci	r31, 0xFE	; 254
    4308:	90 81       	ld	r25, Z
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	69 2f       	mov	r22, r25
    430e:	40 e0       	ldi	r20, 0x00	; 0
    4310:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	9a 81       	ldd	r25, Y+2	; 0x02
    4318:	fc 01       	movw	r30, r24
    431a:	e1 58       	subi	r30, 0x81	; 129
    431c:	fe 4f       	sbci	r31, 0xFE	; 254
    431e:	90 81       	ld	r25, Z
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	69 2f       	mov	r22, r25
    4324:	41 e0       	ldi	r20, 0x01	; 1
    4326:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	9a 81       	ldd	r25, Y+2	; 0x02
    432e:	01 96       	adiw	r24, 0x01	; 1
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	9a 81       	ldd	r25, Y+2	; 0x02
    4338:	84 30       	cpi	r24, 0x04	; 4
    433a:	91 05       	cpc	r25, r1
    433c:	54 f2       	brlt	.-108    	; 0x42d2 <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	08 95       	ret

00004348 <KPD_u8GetKeyState>:



u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    4348:	df 93       	push	r29
    434a:	cf 93       	push	r28
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	65 97       	sbiw	r28, 0x15	; 21
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	9d 8b       	std	Y+21, r25	; 0x15
    435e:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    4364:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    4366:	8c 89       	ldd	r24, Y+20	; 0x14
    4368:	9d 89       	ldd	r25, Y+21	; 0x15
    436a:	00 97       	sbiw	r24, 0x00	; 0
    436c:	09 f4       	brne	.+2      	; 0x4370 <KPD_u8GetKeyState+0x28>
    436e:	f0 c0       	rjmp	.+480    	; 0x4550 <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    4370:	ec 89       	ldd	r30, Y+20	; 0x14
    4372:	fd 89       	ldd	r31, Y+21	; 0x15
    4374:	8f ef       	ldi	r24, 0xFF	; 255
    4376:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    4378:	19 8a       	std	Y+17, r1	; 0x11
    437a:	e5 c0       	rjmp	.+458    	; 0x4546 <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    437c:	89 89       	ldd	r24, Y+17	; 0x11
    437e:	88 2f       	mov	r24, r24
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	fc 01       	movw	r30, r24
    4384:	e5 58       	subi	r30, 0x85	; 133
    4386:	fe 4f       	sbci	r31, 0xFE	; 254
    4388:	90 81       	ld	r25, Z
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	69 2f       	mov	r22, r25
    438e:	40 e0       	ldi	r20, 0x00	; 0
    4390:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    4394:	18 8a       	std	Y+16, r1	; 0x10
    4396:	c1 c0       	rjmp	.+386    	; 0x451a <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    4398:	88 89       	ldd	r24, Y+16	; 0x10
    439a:	88 2f       	mov	r24, r24
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	fc 01       	movw	r30, r24
    43a0:	e1 58       	subi	r30, 0x81	; 129
    43a2:	fe 4f       	sbci	r31, 0xFE	; 254
    43a4:	90 81       	ld	r25, Z
    43a6:	9e 01       	movw	r18, r28
    43a8:	2d 5e       	subi	r18, 0xED	; 237
    43aa:	3f 4f       	sbci	r19, 0xFF	; 255
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	69 2f       	mov	r22, r25
    43b0:	a9 01       	movw	r20, r18
    43b2:	0e 94 bd 13 	call	0x277a	; 0x277a <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    43b6:	8b 89       	ldd	r24, Y+19	; 0x13
    43b8:	88 23       	and	r24, r24
    43ba:	09 f0       	breq	.+2      	; 0x43be <KPD_u8GetKeyState+0x76>
    43bc:	ab c0       	rjmp	.+342    	; 0x4514 <KPD_u8GetKeyState+0x1cc>
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	a0 ea       	ldi	r26, 0xA0	; 160
    43c4:	b1 e4       	ldi	r27, 0x41	; 65
    43c6:	8b 87       	std	Y+11, r24	; 0x0b
    43c8:	9c 87       	std	Y+12, r25	; 0x0c
    43ca:	ad 87       	std	Y+13, r26	; 0x0d
    43cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    43d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	4a e7       	ldi	r20, 0x7A	; 122
    43dc:	55 e4       	ldi	r21, 0x45	; 69
    43de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	8f 83       	std	Y+7, r24	; 0x07
    43e8:	98 87       	std	Y+8, r25	; 0x08
    43ea:	a9 87       	std	Y+9, r26	; 0x09
    43ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43ee:	6f 81       	ldd	r22, Y+7	; 0x07
    43f0:	78 85       	ldd	r23, Y+8	; 0x08
    43f2:	89 85       	ldd	r24, Y+9	; 0x09
    43f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e8       	ldi	r20, 0x80	; 128
    43fc:	5f e3       	ldi	r21, 0x3F	; 63
    43fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4402:	88 23       	and	r24, r24
    4404:	2c f4       	brge	.+10     	; 0x4410 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	9e 83       	std	Y+6, r25	; 0x06
    440c:	8d 83       	std	Y+5, r24	; 0x05
    440e:	3f c0       	rjmp	.+126    	; 0x448e <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    4410:	6f 81       	ldd	r22, Y+7	; 0x07
    4412:	78 85       	ldd	r23, Y+8	; 0x08
    4414:	89 85       	ldd	r24, Y+9	; 0x09
    4416:	9a 85       	ldd	r25, Y+10	; 0x0a
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	3f ef       	ldi	r19, 0xFF	; 255
    441c:	4f e7       	ldi	r20, 0x7F	; 127
    441e:	57 e4       	ldi	r21, 0x47	; 71
    4420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4424:	18 16       	cp	r1, r24
    4426:	4c f5       	brge	.+82     	; 0x447a <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4428:	6b 85       	ldd	r22, Y+11	; 0x0b
    442a:	7c 85       	ldd	r23, Y+12	; 0x0c
    442c:	8d 85       	ldd	r24, Y+13	; 0x0d
    442e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e2       	ldi	r20, 0x20	; 32
    4436:	51 e4       	ldi	r21, 0x41	; 65
    4438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	bc 01       	movw	r22, r24
    4442:	cd 01       	movw	r24, r26
    4444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4448:	dc 01       	movw	r26, r24
    444a:	cb 01       	movw	r24, r22
    444c:	9e 83       	std	Y+6, r25	; 0x06
    444e:	8d 83       	std	Y+5, r24	; 0x05
    4450:	0f c0       	rjmp	.+30     	; 0x4470 <KPD_u8GetKeyState+0x128>
    4452:	80 e9       	ldi	r24, 0x90	; 144
    4454:	91 e0       	ldi	r25, 0x01	; 1
    4456:	9c 83       	std	Y+4, r25	; 0x04
    4458:	8b 83       	std	Y+3, r24	; 0x03
    445a:	8b 81       	ldd	r24, Y+3	; 0x03
    445c:	9c 81       	ldd	r25, Y+4	; 0x04
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	f1 f7       	brne	.-4      	; 0x445e <KPD_u8GetKeyState+0x116>
    4462:	9c 83       	std	Y+4, r25	; 0x04
    4464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4466:	8d 81       	ldd	r24, Y+5	; 0x05
    4468:	9e 81       	ldd	r25, Y+6	; 0x06
    446a:	01 97       	sbiw	r24, 0x01	; 1
    446c:	9e 83       	std	Y+6, r25	; 0x06
    446e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4470:	8d 81       	ldd	r24, Y+5	; 0x05
    4472:	9e 81       	ldd	r25, Y+6	; 0x06
    4474:	00 97       	sbiw	r24, 0x00	; 0
    4476:	69 f7       	brne	.-38     	; 0x4452 <KPD_u8GetKeyState+0x10a>
    4478:	14 c0       	rjmp	.+40     	; 0x44a2 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447a:	6f 81       	ldd	r22, Y+7	; 0x07
    447c:	78 85       	ldd	r23, Y+8	; 0x08
    447e:	89 85       	ldd	r24, Y+9	; 0x09
    4480:	9a 85       	ldd	r25, Y+10	; 0x0a
    4482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	9e 83       	std	Y+6, r25	; 0x06
    448c:	8d 83       	std	Y+5, r24	; 0x05
    448e:	8d 81       	ldd	r24, Y+5	; 0x05
    4490:	9e 81       	ldd	r25, Y+6	; 0x06
    4492:	9a 83       	std	Y+2, r25	; 0x02
    4494:	89 83       	std	Y+1, r24	; 0x01
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	9a 81       	ldd	r25, Y+2	; 0x02
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <KPD_u8GetKeyState+0x152>
    449e:	9a 83       	std	Y+2, r25	; 0x02
    44a0:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    44a2:	88 89       	ldd	r24, Y+16	; 0x10
    44a4:	88 2f       	mov	r24, r24
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	fc 01       	movw	r30, r24
    44aa:	e1 58       	subi	r30, 0x81	; 129
    44ac:	fe 4f       	sbci	r31, 0xFE	; 254
    44ae:	90 81       	ld	r25, Z
    44b0:	9e 01       	movw	r18, r28
    44b2:	2d 5e       	subi	r18, 0xED	; 237
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	69 2f       	mov	r22, r25
    44ba:	a9 01       	movw	r20, r18
    44bc:	0e 94 bd 13 	call	0x277a	; 0x277a <DIO_u8GetPinValue>
    44c0:	0f c0       	rjmp	.+30     	; 0x44e0 <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    44c2:	88 89       	ldd	r24, Y+16	; 0x10
    44c4:	88 2f       	mov	r24, r24
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	fc 01       	movw	r30, r24
    44ca:	e1 58       	subi	r30, 0x81	; 129
    44cc:	fe 4f       	sbci	r31, 0xFE	; 254
    44ce:	90 81       	ld	r25, Z
    44d0:	9e 01       	movw	r18, r28
    44d2:	2d 5e       	subi	r18, 0xED	; 237
    44d4:	3f 4f       	sbci	r19, 0xFF	; 255
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	69 2f       	mov	r22, r25
    44da:	a9 01       	movw	r20, r18
    44dc:	0e 94 bd 13 	call	0x277a	; 0x277a <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    44e0:	8b 89       	ldd	r24, Y+19	; 0x13
    44e2:	88 23       	and	r24, r24
    44e4:	71 f3       	breq	.-36     	; 0x44c2 <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    44e6:	89 89       	ldd	r24, Y+17	; 0x11
    44e8:	48 2f       	mov	r20, r24
    44ea:	50 e0       	ldi	r21, 0x00	; 0
    44ec:	88 89       	ldd	r24, Y+16	; 0x10
    44ee:	28 2f       	mov	r18, r24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	ca 01       	movw	r24, r20
    44f4:	88 0f       	add	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	88 0f       	add	r24, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	82 0f       	add	r24, r18
    44fe:	93 1f       	adc	r25, r19
    4500:	fc 01       	movw	r30, r24
    4502:	e5 59       	subi	r30, 0x95	; 149
    4504:	fe 4f       	sbci	r31, 0xFE	; 254
    4506:	80 81       	ld	r24, Z
    4508:	ec 89       	ldd	r30, Y+20	; 0x14
    450a:	fd 89       	ldd	r31, Y+21	; 0x15
    450c:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	8f 87       	std	Y+15, r24	; 0x0f
    4512:	07 c0       	rjmp	.+14     	; 0x4522 <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    4514:	88 89       	ldd	r24, Y+16	; 0x10
    4516:	8f 5f       	subi	r24, 0xFF	; 255
    4518:	88 8b       	std	Y+16, r24	; 0x10
    451a:	88 89       	ldd	r24, Y+16	; 0x10
    451c:	84 30       	cpi	r24, 0x04	; 4
    451e:	08 f4       	brcc	.+2      	; 0x4522 <KPD_u8GetKeyState+0x1da>
    4520:	3b cf       	rjmp	.-394    	; 0x4398 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    4522:	89 89       	ldd	r24, Y+17	; 0x11
    4524:	88 2f       	mov	r24, r24
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	fc 01       	movw	r30, r24
    452a:	e5 58       	subi	r30, 0x85	; 133
    452c:	fe 4f       	sbci	r31, 0xFE	; 254
    452e:	90 81       	ld	r25, Z
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	69 2f       	mov	r22, r25
    4534:	41 e0       	ldi	r20, 0x01	; 1
    4536:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
			if(Local_u8Flag){
    453a:	8f 85       	ldd	r24, Y+15	; 0x0f
    453c:	88 23       	and	r24, r24
    453e:	49 f4       	brne	.+18     	; 0x4552 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    4540:	89 89       	ldd	r24, Y+17	; 0x11
    4542:	8f 5f       	subi	r24, 0xFF	; 255
    4544:	89 8b       	std	Y+17, r24	; 0x11
    4546:	89 89       	ldd	r24, Y+17	; 0x11
    4548:	84 30       	cpi	r24, 0x04	; 4
    454a:	08 f4       	brcc	.+2      	; 0x454e <KPD_u8GetKeyState+0x206>
    454c:	17 cf       	rjmp	.-466    	; 0x437c <KPD_u8GetKeyState+0x34>
    454e:	01 c0       	rjmp	.+2      	; 0x4552 <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    4550:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    4552:	8a 89       	ldd	r24, Y+18	; 0x12
}
    4554:	65 96       	adiw	r28, 0x15	; 21
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	de bf       	out	0x3e, r29	; 62
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	08 95       	ret

00004566 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h"

#include "DC_Motor_Config.h"
#include "DC_Motor_Private.h"

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    4566:	df 93       	push	r29
    4568:	cf 93       	push	r28
    456a:	00 d0       	rcall	.+0      	; 0x456c <DC_Motor_Init+0x6>
    456c:	0f 92       	push	r0
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	8a 83       	std	Y+2, r24	; 0x02
    4574:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    457a:	8a 81       	ldd	r24, Y+2	; 0x02
    457c:	81 30       	cpi	r24, 0x01	; 1
    457e:	79 f4       	brne	.+30     	; 0x459e <DC_Motor_Init+0x38>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, DIO_u8_OUTPUT);
    4580:	83 e0       	ldi	r24, 0x03	; 3
    4582:	62 e0       	ldi	r22, 0x02	; 2
    4584:	41 e0       	ldi	r20, 0x01	; 1
    4586:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_u8_OUTPUT);
    458a:	83 e0       	ldi	r24, 0x03	; 3
    458c:	60 e0       	ldi	r22, 0x00	; 0
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_u8_OUTPUT);
    4594:	83 e0       	ldi	r24, 0x03	; 3
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	41 e0       	ldi	r20, 0x01	; 1
    459a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
	}

	if(Copy_u8_Motor2 == MOTOR_Connected){
    459e:	8b 81       	ldd	r24, Y+3	; 0x03
    45a0:	81 30       	cpi	r24, 0x01	; 1
    45a2:	81 f4       	brne	.+32     	; 0x45c4 <DC_Motor_Init+0x5e>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, DIO_u8_OUTPUT);
    45a4:	83 e0       	ldi	r24, 0x03	; 3
    45a6:	63 e0       	ldi	r22, 0x03	; 3
    45a8:	41 e0       	ldi	r20, 0x01	; 1
    45aa:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_u8_OUTPUT);
    45ae:	83 e0       	ldi	r24, 0x03	; 3
    45b0:	66 e0       	ldi	r22, 0x06	; 6
    45b2:	41 e0       	ldi	r20, 0x01	; 1
    45b4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_u8_OUTPUT);
    45b8:	83 e0       	ldi	r24, 0x03	; 3
    45ba:	67 e0       	ldi	r22, 0x07	; 7
    45bc:	41 e0       	ldi	r20, 0x01	; 1
    45be:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPinDirection>
    45c2:	01 c0       	rjmp	.+2      	; 0x45c6 <DC_Motor_Init+0x60>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    45c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    45c8:	0f 90       	pop	r0
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	cf 91       	pop	r28
    45d0:	df 91       	pop	r29
    45d2:	08 95       	ret

000045d4 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    45d4:	df 93       	push	r29
    45d6:	cf 93       	push	r28
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
    45dc:	29 97       	sbiw	r28, 0x09	; 9
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	f8 94       	cli
    45e2:	de bf       	out	0x3e, r29	; 62
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	cd bf       	out	0x3d, r28	; 61
    45e8:	8a 83       	std	Y+2, r24	; 0x02
    45ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    45f0:	8a 81       	ldd	r24, Y+2	; 0x02
    45f2:	28 2f       	mov	r18, r24
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	39 87       	std	Y+9, r19	; 0x09
    45f8:	28 87       	std	Y+8, r18	; 0x08
    45fa:	88 85       	ldd	r24, Y+8	; 0x08
    45fc:	99 85       	ldd	r25, Y+9	; 0x09
    45fe:	00 97       	sbiw	r24, 0x00	; 0
    4600:	31 f0       	breq	.+12     	; 0x460e <DC_Motor_Rotate+0x3a>
    4602:	28 85       	ldd	r18, Y+8	; 0x08
    4604:	39 85       	ldd	r19, Y+9	; 0x09
    4606:	21 30       	cpi	r18, 0x01	; 1
    4608:	31 05       	cpc	r19, r1
    460a:	89 f1       	breq	.+98     	; 0x466e <DC_Motor_Rotate+0x9a>
    460c:	60 c0       	rjmp	.+192    	; 0x46ce <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	28 2f       	mov	r18, r24
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	3f 83       	std	Y+7, r19	; 0x07
    4616:	2e 83       	std	Y+6, r18	; 0x06
    4618:	8e 81       	ldd	r24, Y+6	; 0x06
    461a:	9f 81       	ldd	r25, Y+7	; 0x07
    461c:	00 97       	sbiw	r24, 0x00	; 0
    461e:	a9 f0       	breq	.+42     	; 0x464a <DC_Motor_Rotate+0x76>
    4620:	2e 81       	ldd	r18, Y+6	; 0x06
    4622:	3f 81       	ldd	r19, Y+7	; 0x07
    4624:	21 30       	cpi	r18, 0x01	; 1
    4626:	31 05       	cpc	r19, r1
    4628:	01 f5       	brne	.+64     	; 0x466a <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    462a:	83 e0       	ldi	r24, 0x03	; 3
    462c:	62 e0       	ldi	r22, 0x02	; 2
    462e:	41 e0       	ldi	r20, 0x01	; 1
    4630:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    4634:	83 e0       	ldi	r24, 0x03	; 3
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    463e:	83 e0       	ldi	r24, 0x03	; 3
    4640:	61 e0       	ldi	r22, 0x01	; 1
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
    4648:	43 c0       	rjmp	.+134    	; 0x46d0 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    464a:	83 e0       	ldi	r24, 0x03	; 3
    464c:	62 e0       	ldi	r22, 0x02	; 2
    464e:	41 e0       	ldi	r20, 0x01	; 1
    4650:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	40 e0       	ldi	r20, 0x00	; 0
    465a:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    465e:	83 e0       	ldi	r24, 0x03	; 3
    4660:	61 e0       	ldi	r22, 0x01	; 1
    4662:	41 e0       	ldi	r20, 0x01	; 1
    4664:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
    4668:	33 c0       	rjmp	.+102    	; 0x46d0 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    466a:	19 82       	std	Y+1, r1	; 0x01
    466c:	31 c0       	rjmp	.+98     	; 0x46d0 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    466e:	8b 81       	ldd	r24, Y+3	; 0x03
    4670:	28 2f       	mov	r18, r24
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	3d 83       	std	Y+5, r19	; 0x05
    4676:	2c 83       	std	Y+4, r18	; 0x04
    4678:	8c 81       	ldd	r24, Y+4	; 0x04
    467a:	9d 81       	ldd	r25, Y+5	; 0x05
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	a9 f0       	breq	.+42     	; 0x46aa <DC_Motor_Rotate+0xd6>
    4680:	2c 81       	ldd	r18, Y+4	; 0x04
    4682:	3d 81       	ldd	r19, Y+5	; 0x05
    4684:	21 30       	cpi	r18, 0x01	; 1
    4686:	31 05       	cpc	r19, r1
    4688:	01 f5       	brne	.+64     	; 0x46ca <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    468a:	83 e0       	ldi	r24, 0x03	; 3
    468c:	63 e0       	ldi	r22, 0x03	; 3
    468e:	41 e0       	ldi	r20, 0x01	; 1
    4690:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    4694:	83 e0       	ldi	r24, 0x03	; 3
    4696:	66 e0       	ldi	r22, 0x06	; 6
    4698:	41 e0       	ldi	r20, 0x01	; 1
    469a:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    469e:	83 e0       	ldi	r24, 0x03	; 3
    46a0:	67 e0       	ldi	r22, 0x07	; 7
    46a2:	40 e0       	ldi	r20, 0x00	; 0
    46a4:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
    46a8:	13 c0       	rjmp	.+38     	; 0x46d0 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    46aa:	83 e0       	ldi	r24, 0x03	; 3
    46ac:	63 e0       	ldi	r22, 0x03	; 3
    46ae:	41 e0       	ldi	r20, 0x01	; 1
    46b0:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    46b4:	83 e0       	ldi	r24, 0x03	; 3
    46b6:	66 e0       	ldi	r22, 0x06	; 6
    46b8:	40 e0       	ldi	r20, 0x00	; 0
    46ba:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    46be:	83 e0       	ldi	r24, 0x03	; 3
    46c0:	67 e0       	ldi	r22, 0x07	; 7
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
    46c8:	03 c0       	rjmp	.+6      	; 0x46d0 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    46ca:	19 82       	std	Y+1, r1	; 0x01
    46cc:	01 c0       	rjmp	.+2      	; 0x46d0 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    46ce:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46d2:	29 96       	adiw	r28, 0x09	; 9
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	f8 94       	cli
    46d8:	de bf       	out	0x3e, r29	; 62
    46da:	0f be       	out	0x3f, r0	; 63
    46dc:	cd bf       	out	0x3d, r28	; 61
    46de:	cf 91       	pop	r28
    46e0:	df 91       	pop	r29
    46e2:	08 95       	ret

000046e4 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    46e4:	df 93       	push	r29
    46e6:	cf 93       	push	r28
    46e8:	00 d0       	rcall	.+0      	; 0x46ea <DC_Motor_Stop+0x6>
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
    46f6:	88 23       	and	r24, r24
    46f8:	31 f4       	brne	.+12     	; 0x4706 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    46fa:	83 e0       	ldi	r24, 0x03	; 3
    46fc:	62 e0       	ldi	r22, 0x02	; 2
    46fe:	40 e0       	ldi	r20, 0x00	; 0
    4700:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
    4704:	0a c0       	rjmp	.+20     	; 0x471a <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    4706:	8a 81       	ldd	r24, Y+2	; 0x02
    4708:	81 30       	cpi	r24, 0x01	; 1
    470a:	31 f4       	brne	.+12     	; 0x4718 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    470c:	83 e0       	ldi	r24, 0x03	; 3
    470e:	63 e0       	ldi	r22, 0x03	; 3
    4710:	40 e0       	ldi	r20, 0x00	; 0
    4712:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
    4716:	01 c0       	rjmp	.+2      	; 0x471a <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4718:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    471a:	89 81       	ldd	r24, Y+1	; 0x01
}
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	cf 91       	pop	r28
    4722:	df 91       	pop	r29
    4724:	08 95       	ret

00004726 <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    4726:	df 93       	push	r29
    4728:	cf 93       	push	r28
    472a:	0f 92       	push	r0
    472c:	cd b7       	in	r28, 0x3d	; 61
    472e:	de b7       	in	r29, 0x3e	; 62
    4730:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    4732:	89 81       	ldd	r24, Y+1	; 0x01
    4734:	61 e0       	ldi	r22, 0x01	; 1
    4736:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_u8SetPortDirection>
}
    473a:	0f 90       	pop	r0
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret

00004742 <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    4742:	af 92       	push	r10
    4744:	cf 92       	push	r12
    4746:	ef 92       	push	r14
    4748:	0f 93       	push	r16
    474a:	df 93       	push	r29
    474c:	cf 93       	push	r28
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	2a 97       	sbiw	r28, 0x0a	; 10
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	89 83       	std	Y+1, r24	; 0x01
    4760:	6a 83       	std	Y+2, r22	; 0x02
    4762:	4b 83       	std	Y+3, r20	; 0x03
    4764:	2c 83       	std	Y+4, r18	; 0x04
    4766:	0d 83       	std	Y+5, r16	; 0x05
    4768:	ee 82       	std	Y+6, r14	; 0x06
    476a:	cf 82       	std	Y+7, r12	; 0x07
    476c:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	28 2f       	mov	r18, r24
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	3a 87       	std	Y+10, r19	; 0x0a
    4776:	29 87       	std	Y+9, r18	; 0x09
    4778:	89 85       	ldd	r24, Y+9	; 0x09
    477a:	9a 85       	ldd	r25, Y+10	; 0x0a
    477c:	81 30       	cpi	r24, 0x01	; 1
    477e:	91 05       	cpc	r25, r1
    4780:	09 f4       	brne	.+2      	; 0x4784 <SevenSegment_Display+0x42>
    4782:	96 c0       	rjmp	.+300    	; 0x48b0 <SevenSegment_Display+0x16e>
    4784:	29 85       	ldd	r18, Y+9	; 0x09
    4786:	3a 85       	ldd	r19, Y+10	; 0x0a
    4788:	22 30       	cpi	r18, 0x02	; 2
    478a:	31 05       	cpc	r19, r1
    478c:	2c f4       	brge	.+10     	; 0x4798 <SevenSegment_Display+0x56>
    478e:	89 85       	ldd	r24, Y+9	; 0x09
    4790:	9a 85       	ldd	r25, Y+10	; 0x0a
    4792:	00 97       	sbiw	r24, 0x00	; 0
    4794:	71 f0       	breq	.+28     	; 0x47b2 <SevenSegment_Display+0x70>
    4796:	08 c2       	rjmp	.+1040   	; 0x4ba8 <SevenSegment_Display+0x466>
    4798:	29 85       	ldd	r18, Y+9	; 0x09
    479a:	3a 85       	ldd	r19, Y+10	; 0x0a
    479c:	22 30       	cpi	r18, 0x02	; 2
    479e:	31 05       	cpc	r19, r1
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <SevenSegment_Display+0x62>
    47a2:	05 c1       	rjmp	.+522    	; 0x49ae <SevenSegment_Display+0x26c>
    47a4:	89 85       	ldd	r24, Y+9	; 0x09
    47a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a8:	83 30       	cpi	r24, 0x03	; 3
    47aa:	91 05       	cpc	r25, r1
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <SevenSegment_Display+0x6e>
    47ae:	7e c1       	rjmp	.+764    	; 0x4aac <SevenSegment_Display+0x36a>
    47b0:	fb c1       	rjmp	.+1014   	; 0x4ba8 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	81 30       	cpi	r24, 0x01	; 1
    47b6:	41 f4       	brne	.+16     	; 0x47c8 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    47b8:	ab e3       	ldi	r26, 0x3B	; 59
    47ba:	b0 e0       	ldi	r27, 0x00	; 0
    47bc:	eb e3       	ldi	r30, 0x3B	; 59
    47be:	f0 e0       	ldi	r31, 0x00	; 0
    47c0:	80 81       	ld	r24, Z
    47c2:	81 60       	ori	r24, 0x01	; 1
    47c4:	8c 93       	st	X, r24
    47c6:	07 c0       	rjmp	.+14     	; 0x47d6 <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    47c8:	ab e3       	ldi	r26, 0x3B	; 59
    47ca:	b0 e0       	ldi	r27, 0x00	; 0
    47cc:	eb e3       	ldi	r30, 0x3B	; 59
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	80 81       	ld	r24, Z
    47d2:	8e 7f       	andi	r24, 0xFE	; 254
    47d4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    47d6:	8b 81       	ldd	r24, Y+3	; 0x03
    47d8:	81 30       	cpi	r24, 0x01	; 1
    47da:	41 f4       	brne	.+16     	; 0x47ec <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    47dc:	ab e3       	ldi	r26, 0x3B	; 59
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	eb e3       	ldi	r30, 0x3B	; 59
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	82 60       	ori	r24, 0x02	; 2
    47e8:	8c 93       	st	X, r24
    47ea:	07 c0       	rjmp	.+14     	; 0x47fa <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    47ec:	ab e3       	ldi	r26, 0x3B	; 59
    47ee:	b0 e0       	ldi	r27, 0x00	; 0
    47f0:	eb e3       	ldi	r30, 0x3B	; 59
    47f2:	f0 e0       	ldi	r31, 0x00	; 0
    47f4:	80 81       	ld	r24, Z
    47f6:	8d 7f       	andi	r24, 0xFD	; 253
    47f8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    47fa:	8c 81       	ldd	r24, Y+4	; 0x04
    47fc:	81 30       	cpi	r24, 0x01	; 1
    47fe:	41 f4       	brne	.+16     	; 0x4810 <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    4800:	ab e3       	ldi	r26, 0x3B	; 59
    4802:	b0 e0       	ldi	r27, 0x00	; 0
    4804:	eb e3       	ldi	r30, 0x3B	; 59
    4806:	f0 e0       	ldi	r31, 0x00	; 0
    4808:	80 81       	ld	r24, Z
    480a:	84 60       	ori	r24, 0x04	; 4
    480c:	8c 93       	st	X, r24
    480e:	07 c0       	rjmp	.+14     	; 0x481e <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    4810:	ab e3       	ldi	r26, 0x3B	; 59
    4812:	b0 e0       	ldi	r27, 0x00	; 0
    4814:	eb e3       	ldi	r30, 0x3B	; 59
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	80 81       	ld	r24, Z
    481a:	8b 7f       	andi	r24, 0xFB	; 251
    481c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    481e:	8d 81       	ldd	r24, Y+5	; 0x05
    4820:	81 30       	cpi	r24, 0x01	; 1
    4822:	41 f4       	brne	.+16     	; 0x4834 <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    4824:	ab e3       	ldi	r26, 0x3B	; 59
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	eb e3       	ldi	r30, 0x3B	; 59
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	80 81       	ld	r24, Z
    482e:	88 60       	ori	r24, 0x08	; 8
    4830:	8c 93       	st	X, r24
    4832:	07 c0       	rjmp	.+14     	; 0x4842 <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    4834:	ab e3       	ldi	r26, 0x3B	; 59
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	eb e3       	ldi	r30, 0x3B	; 59
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	87 7f       	andi	r24, 0xF7	; 247
    4840:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4842:	8e 81       	ldd	r24, Y+6	; 0x06
    4844:	81 30       	cpi	r24, 0x01	; 1
    4846:	41 f4       	brne	.+16     	; 0x4858 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4848:	ab e3       	ldi	r26, 0x3B	; 59
    484a:	b0 e0       	ldi	r27, 0x00	; 0
    484c:	eb e3       	ldi	r30, 0x3B	; 59
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	80 81       	ld	r24, Z
    4852:	80 61       	ori	r24, 0x10	; 16
    4854:	8c 93       	st	X, r24
    4856:	07 c0       	rjmp	.+14     	; 0x4866 <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4858:	ab e3       	ldi	r26, 0x3B	; 59
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	eb e3       	ldi	r30, 0x3B	; 59
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	8f 7e       	andi	r24, 0xEF	; 239
    4864:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4866:	8f 81       	ldd	r24, Y+7	; 0x07
    4868:	81 30       	cpi	r24, 0x01	; 1
    486a:	41 f4       	brne	.+16     	; 0x487c <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    486c:	ab e3       	ldi	r26, 0x3B	; 59
    486e:	b0 e0       	ldi	r27, 0x00	; 0
    4870:	eb e3       	ldi	r30, 0x3B	; 59
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	80 81       	ld	r24, Z
    4876:	80 62       	ori	r24, 0x20	; 32
    4878:	8c 93       	st	X, r24
    487a:	07 c0       	rjmp	.+14     	; 0x488a <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    487c:	ab e3       	ldi	r26, 0x3B	; 59
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	eb e3       	ldi	r30, 0x3B	; 59
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	8f 7d       	andi	r24, 0xDF	; 223
    4888:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    488a:	88 85       	ldd	r24, Y+8	; 0x08
    488c:	81 30       	cpi	r24, 0x01	; 1
    488e:	41 f4       	brne	.+16     	; 0x48a0 <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    4890:	ab e3       	ldi	r26, 0x3B	; 59
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	eb e3       	ldi	r30, 0x3B	; 59
    4896:	f0 e0       	ldi	r31, 0x00	; 0
    4898:	80 81       	ld	r24, Z
    489a:	80 64       	ori	r24, 0x40	; 64
    489c:	8c 93       	st	X, r24
    489e:	84 c1       	rjmp	.+776    	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    48a0:	ab e3       	ldi	r26, 0x3B	; 59
    48a2:	b0 e0       	ldi	r27, 0x00	; 0
    48a4:	eb e3       	ldi	r30, 0x3B	; 59
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	80 81       	ld	r24, Z
    48aa:	8f 7b       	andi	r24, 0xBF	; 191
    48ac:	8c 93       	st	X, r24
    48ae:	7c c1       	rjmp	.+760    	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    48b0:	8a 81       	ldd	r24, Y+2	; 0x02
    48b2:	81 30       	cpi	r24, 0x01	; 1
    48b4:	41 f4       	brne	.+16     	; 0x48c6 <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    48b6:	a8 e3       	ldi	r26, 0x38	; 56
    48b8:	b0 e0       	ldi	r27, 0x00	; 0
    48ba:	e8 e3       	ldi	r30, 0x38	; 56
    48bc:	f0 e0       	ldi	r31, 0x00	; 0
    48be:	80 81       	ld	r24, Z
    48c0:	81 60       	ori	r24, 0x01	; 1
    48c2:	8c 93       	st	X, r24
    48c4:	07 c0       	rjmp	.+14     	; 0x48d4 <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    48c6:	a8 e3       	ldi	r26, 0x38	; 56
    48c8:	b0 e0       	ldi	r27, 0x00	; 0
    48ca:	e8 e3       	ldi	r30, 0x38	; 56
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	80 81       	ld	r24, Z
    48d0:	8e 7f       	andi	r24, 0xFE	; 254
    48d2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    48d4:	8b 81       	ldd	r24, Y+3	; 0x03
    48d6:	81 30       	cpi	r24, 0x01	; 1
    48d8:	41 f4       	brne	.+16     	; 0x48ea <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    48da:	a8 e3       	ldi	r26, 0x38	; 56
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	e8 e3       	ldi	r30, 0x38	; 56
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	82 60       	ori	r24, 0x02	; 2
    48e6:	8c 93       	st	X, r24
    48e8:	07 c0       	rjmp	.+14     	; 0x48f8 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    48ea:	a8 e3       	ldi	r26, 0x38	; 56
    48ec:	b0 e0       	ldi	r27, 0x00	; 0
    48ee:	e8 e3       	ldi	r30, 0x38	; 56
    48f0:	f0 e0       	ldi	r31, 0x00	; 0
    48f2:	80 81       	ld	r24, Z
    48f4:	8d 7f       	andi	r24, 0xFD	; 253
    48f6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    48f8:	8c 81       	ldd	r24, Y+4	; 0x04
    48fa:	81 30       	cpi	r24, 0x01	; 1
    48fc:	41 f4       	brne	.+16     	; 0x490e <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    48fe:	a8 e3       	ldi	r26, 0x38	; 56
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	e8 e3       	ldi	r30, 0x38	; 56
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	84 60       	ori	r24, 0x04	; 4
    490a:	8c 93       	st	X, r24
    490c:	07 c0       	rjmp	.+14     	; 0x491c <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    490e:	a8 e3       	ldi	r26, 0x38	; 56
    4910:	b0 e0       	ldi	r27, 0x00	; 0
    4912:	e8 e3       	ldi	r30, 0x38	; 56
    4914:	f0 e0       	ldi	r31, 0x00	; 0
    4916:	80 81       	ld	r24, Z
    4918:	8b 7f       	andi	r24, 0xFB	; 251
    491a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    491c:	8d 81       	ldd	r24, Y+5	; 0x05
    491e:	81 30       	cpi	r24, 0x01	; 1
    4920:	41 f4       	brne	.+16     	; 0x4932 <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    4922:	a8 e3       	ldi	r26, 0x38	; 56
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	e8 e3       	ldi	r30, 0x38	; 56
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	88 60       	ori	r24, 0x08	; 8
    492e:	8c 93       	st	X, r24
    4930:	07 c0       	rjmp	.+14     	; 0x4940 <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    4932:	a8 e3       	ldi	r26, 0x38	; 56
    4934:	b0 e0       	ldi	r27, 0x00	; 0
    4936:	e8 e3       	ldi	r30, 0x38	; 56
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	87 7f       	andi	r24, 0xF7	; 247
    493e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4940:	8e 81       	ldd	r24, Y+6	; 0x06
    4942:	81 30       	cpi	r24, 0x01	; 1
    4944:	41 f4       	brne	.+16     	; 0x4956 <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4946:	a8 e3       	ldi	r26, 0x38	; 56
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	e8 e3       	ldi	r30, 0x38	; 56
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	80 61       	ori	r24, 0x10	; 16
    4952:	8c 93       	st	X, r24
    4954:	07 c0       	rjmp	.+14     	; 0x4964 <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4956:	a8 e3       	ldi	r26, 0x38	; 56
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	e8 e3       	ldi	r30, 0x38	; 56
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	80 81       	ld	r24, Z
    4960:	8f 7e       	andi	r24, 0xEF	; 239
    4962:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4964:	8f 81       	ldd	r24, Y+7	; 0x07
    4966:	81 30       	cpi	r24, 0x01	; 1
    4968:	41 f4       	brne	.+16     	; 0x497a <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    496a:	a8 e3       	ldi	r26, 0x38	; 56
    496c:	b0 e0       	ldi	r27, 0x00	; 0
    496e:	e8 e3       	ldi	r30, 0x38	; 56
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	80 81       	ld	r24, Z
    4974:	80 62       	ori	r24, 0x20	; 32
    4976:	8c 93       	st	X, r24
    4978:	07 c0       	rjmp	.+14     	; 0x4988 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    497a:	a8 e3       	ldi	r26, 0x38	; 56
    497c:	b0 e0       	ldi	r27, 0x00	; 0
    497e:	e8 e3       	ldi	r30, 0x38	; 56
    4980:	f0 e0       	ldi	r31, 0x00	; 0
    4982:	80 81       	ld	r24, Z
    4984:	8f 7d       	andi	r24, 0xDF	; 223
    4986:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4988:	88 85       	ldd	r24, Y+8	; 0x08
    498a:	81 30       	cpi	r24, 0x01	; 1
    498c:	41 f4       	brne	.+16     	; 0x499e <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    498e:	a8 e3       	ldi	r26, 0x38	; 56
    4990:	b0 e0       	ldi	r27, 0x00	; 0
    4992:	e8 e3       	ldi	r30, 0x38	; 56
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	80 81       	ld	r24, Z
    4998:	80 64       	ori	r24, 0x40	; 64
    499a:	8c 93       	st	X, r24
    499c:	05 c1       	rjmp	.+522    	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    499e:	a8 e3       	ldi	r26, 0x38	; 56
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	e8 e3       	ldi	r30, 0x38	; 56
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	80 81       	ld	r24, Z
    49a8:	8f 7b       	andi	r24, 0xBF	; 191
    49aa:	8c 93       	st	X, r24
    49ac:	fd c0       	rjmp	.+506    	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    49ae:	8a 81       	ldd	r24, Y+2	; 0x02
    49b0:	81 30       	cpi	r24, 0x01	; 1
    49b2:	41 f4       	brne	.+16     	; 0x49c4 <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    49b4:	a5 e3       	ldi	r26, 0x35	; 53
    49b6:	b0 e0       	ldi	r27, 0x00	; 0
    49b8:	e5 e3       	ldi	r30, 0x35	; 53
    49ba:	f0 e0       	ldi	r31, 0x00	; 0
    49bc:	80 81       	ld	r24, Z
    49be:	81 60       	ori	r24, 0x01	; 1
    49c0:	8c 93       	st	X, r24
    49c2:	07 c0       	rjmp	.+14     	; 0x49d2 <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    49c4:	a5 e3       	ldi	r26, 0x35	; 53
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	e5 e3       	ldi	r30, 0x35	; 53
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	8e 7f       	andi	r24, 0xFE	; 254
    49d0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    49d2:	8b 81       	ldd	r24, Y+3	; 0x03
    49d4:	81 30       	cpi	r24, 0x01	; 1
    49d6:	41 f4       	brne	.+16     	; 0x49e8 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    49d8:	a5 e3       	ldi	r26, 0x35	; 53
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	e5 e3       	ldi	r30, 0x35	; 53
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	80 81       	ld	r24, Z
    49e2:	82 60       	ori	r24, 0x02	; 2
    49e4:	8c 93       	st	X, r24
    49e6:	07 c0       	rjmp	.+14     	; 0x49f6 <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    49e8:	a5 e3       	ldi	r26, 0x35	; 53
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	e5 e3       	ldi	r30, 0x35	; 53
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	80 81       	ld	r24, Z
    49f2:	8d 7f       	andi	r24, 0xFD	; 253
    49f4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    49f6:	8c 81       	ldd	r24, Y+4	; 0x04
    49f8:	81 30       	cpi	r24, 0x01	; 1
    49fa:	41 f4       	brne	.+16     	; 0x4a0c <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    49fc:	a5 e3       	ldi	r26, 0x35	; 53
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	e5 e3       	ldi	r30, 0x35	; 53
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	80 81       	ld	r24, Z
    4a06:	84 60       	ori	r24, 0x04	; 4
    4a08:	8c 93       	st	X, r24
    4a0a:	07 c0       	rjmp	.+14     	; 0x4a1a <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    4a0c:	a5 e3       	ldi	r26, 0x35	; 53
    4a0e:	b0 e0       	ldi	r27, 0x00	; 0
    4a10:	e5 e3       	ldi	r30, 0x35	; 53
    4a12:	f0 e0       	ldi	r31, 0x00	; 0
    4a14:	80 81       	ld	r24, Z
    4a16:	8b 7f       	andi	r24, 0xFB	; 251
    4a18:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1c:	81 30       	cpi	r24, 0x01	; 1
    4a1e:	41 f4       	brne	.+16     	; 0x4a30 <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    4a20:	a5 e3       	ldi	r26, 0x35	; 53
    4a22:	b0 e0       	ldi	r27, 0x00	; 0
    4a24:	e5 e3       	ldi	r30, 0x35	; 53
    4a26:	f0 e0       	ldi	r31, 0x00	; 0
    4a28:	80 81       	ld	r24, Z
    4a2a:	88 60       	ori	r24, 0x08	; 8
    4a2c:	8c 93       	st	X, r24
    4a2e:	07 c0       	rjmp	.+14     	; 0x4a3e <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    4a30:	a5 e3       	ldi	r26, 0x35	; 53
    4a32:	b0 e0       	ldi	r27, 0x00	; 0
    4a34:	e5 e3       	ldi	r30, 0x35	; 53
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	80 81       	ld	r24, Z
    4a3a:	87 7f       	andi	r24, 0xF7	; 247
    4a3c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a40:	81 30       	cpi	r24, 0x01	; 1
    4a42:	41 f4       	brne	.+16     	; 0x4a54 <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4a44:	a5 e3       	ldi	r26, 0x35	; 53
    4a46:	b0 e0       	ldi	r27, 0x00	; 0
    4a48:	e5 e3       	ldi	r30, 0x35	; 53
    4a4a:	f0 e0       	ldi	r31, 0x00	; 0
    4a4c:	80 81       	ld	r24, Z
    4a4e:	80 61       	ori	r24, 0x10	; 16
    4a50:	8c 93       	st	X, r24
    4a52:	07 c0       	rjmp	.+14     	; 0x4a62 <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4a54:	a5 e3       	ldi	r26, 0x35	; 53
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	e5 e3       	ldi	r30, 0x35	; 53
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	80 81       	ld	r24, Z
    4a5e:	8f 7e       	andi	r24, 0xEF	; 239
    4a60:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4a62:	8f 81       	ldd	r24, Y+7	; 0x07
    4a64:	81 30       	cpi	r24, 0x01	; 1
    4a66:	41 f4       	brne	.+16     	; 0x4a78 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4a68:	a5 e3       	ldi	r26, 0x35	; 53
    4a6a:	b0 e0       	ldi	r27, 0x00	; 0
    4a6c:	e5 e3       	ldi	r30, 0x35	; 53
    4a6e:	f0 e0       	ldi	r31, 0x00	; 0
    4a70:	80 81       	ld	r24, Z
    4a72:	80 62       	ori	r24, 0x20	; 32
    4a74:	8c 93       	st	X, r24
    4a76:	07 c0       	rjmp	.+14     	; 0x4a86 <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4a78:	a5 e3       	ldi	r26, 0x35	; 53
    4a7a:	b0 e0       	ldi	r27, 0x00	; 0
    4a7c:	e5 e3       	ldi	r30, 0x35	; 53
    4a7e:	f0 e0       	ldi	r31, 0x00	; 0
    4a80:	80 81       	ld	r24, Z
    4a82:	8f 7d       	andi	r24, 0xDF	; 223
    4a84:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4a86:	88 85       	ldd	r24, Y+8	; 0x08
    4a88:	81 30       	cpi	r24, 0x01	; 1
    4a8a:	41 f4       	brne	.+16     	; 0x4a9c <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4a8c:	a5 e3       	ldi	r26, 0x35	; 53
    4a8e:	b0 e0       	ldi	r27, 0x00	; 0
    4a90:	e5 e3       	ldi	r30, 0x35	; 53
    4a92:	f0 e0       	ldi	r31, 0x00	; 0
    4a94:	80 81       	ld	r24, Z
    4a96:	80 64       	ori	r24, 0x40	; 64
    4a98:	8c 93       	st	X, r24
    4a9a:	86 c0       	rjmp	.+268    	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4a9c:	a5 e3       	ldi	r26, 0x35	; 53
    4a9e:	b0 e0       	ldi	r27, 0x00	; 0
    4aa0:	e5 e3       	ldi	r30, 0x35	; 53
    4aa2:	f0 e0       	ldi	r31, 0x00	; 0
    4aa4:	80 81       	ld	r24, Z
    4aa6:	8f 7b       	andi	r24, 0xBF	; 191
    4aa8:	8c 93       	st	X, r24
    4aaa:	7e c0       	rjmp	.+252    	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4aac:	8a 81       	ldd	r24, Y+2	; 0x02
    4aae:	81 30       	cpi	r24, 0x01	; 1
    4ab0:	41 f4       	brne	.+16     	; 0x4ac2 <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4ab2:	a2 e3       	ldi	r26, 0x32	; 50
    4ab4:	b0 e0       	ldi	r27, 0x00	; 0
    4ab6:	e2 e3       	ldi	r30, 0x32	; 50
    4ab8:	f0 e0       	ldi	r31, 0x00	; 0
    4aba:	80 81       	ld	r24, Z
    4abc:	81 60       	ori	r24, 0x01	; 1
    4abe:	8c 93       	st	X, r24
    4ac0:	07 c0       	rjmp	.+14     	; 0x4ad0 <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4ac2:	a2 e3       	ldi	r26, 0x32	; 50
    4ac4:	b0 e0       	ldi	r27, 0x00	; 0
    4ac6:	e2 e3       	ldi	r30, 0x32	; 50
    4ac8:	f0 e0       	ldi	r31, 0x00	; 0
    4aca:	80 81       	ld	r24, Z
    4acc:	8e 7f       	andi	r24, 0xFE	; 254
    4ace:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad2:	81 30       	cpi	r24, 0x01	; 1
    4ad4:	41 f4       	brne	.+16     	; 0x4ae6 <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4ad6:	a2 e3       	ldi	r26, 0x32	; 50
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	e2 e3       	ldi	r30, 0x32	; 50
    4adc:	f0 e0       	ldi	r31, 0x00	; 0
    4ade:	80 81       	ld	r24, Z
    4ae0:	82 60       	ori	r24, 0x02	; 2
    4ae2:	8c 93       	st	X, r24
    4ae4:	07 c0       	rjmp	.+14     	; 0x4af4 <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4ae6:	a2 e3       	ldi	r26, 0x32	; 50
    4ae8:	b0 e0       	ldi	r27, 0x00	; 0
    4aea:	e2 e3       	ldi	r30, 0x32	; 50
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	80 81       	ld	r24, Z
    4af0:	8d 7f       	andi	r24, 0xFD	; 253
    4af2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4af4:	8c 81       	ldd	r24, Y+4	; 0x04
    4af6:	81 30       	cpi	r24, 0x01	; 1
    4af8:	41 f4       	brne	.+16     	; 0x4b0a <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4afa:	a2 e3       	ldi	r26, 0x32	; 50
    4afc:	b0 e0       	ldi	r27, 0x00	; 0
    4afe:	e2 e3       	ldi	r30, 0x32	; 50
    4b00:	f0 e0       	ldi	r31, 0x00	; 0
    4b02:	80 81       	ld	r24, Z
    4b04:	84 60       	ori	r24, 0x04	; 4
    4b06:	8c 93       	st	X, r24
    4b08:	07 c0       	rjmp	.+14     	; 0x4b18 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4b0a:	a2 e3       	ldi	r26, 0x32	; 50
    4b0c:	b0 e0       	ldi	r27, 0x00	; 0
    4b0e:	e2 e3       	ldi	r30, 0x32	; 50
    4b10:	f0 e0       	ldi	r31, 0x00	; 0
    4b12:	80 81       	ld	r24, Z
    4b14:	8b 7f       	andi	r24, 0xFB	; 251
    4b16:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4b18:	8d 81       	ldd	r24, Y+5	; 0x05
    4b1a:	81 30       	cpi	r24, 0x01	; 1
    4b1c:	41 f4       	brne	.+16     	; 0x4b2e <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    4b1e:	a2 e3       	ldi	r26, 0x32	; 50
    4b20:	b0 e0       	ldi	r27, 0x00	; 0
    4b22:	e2 e3       	ldi	r30, 0x32	; 50
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	80 81       	ld	r24, Z
    4b28:	88 60       	ori	r24, 0x08	; 8
    4b2a:	8c 93       	st	X, r24
    4b2c:	07 c0       	rjmp	.+14     	; 0x4b3c <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    4b2e:	a2 e3       	ldi	r26, 0x32	; 50
    4b30:	b0 e0       	ldi	r27, 0x00	; 0
    4b32:	e2 e3       	ldi	r30, 0x32	; 50
    4b34:	f0 e0       	ldi	r31, 0x00	; 0
    4b36:	80 81       	ld	r24, Z
    4b38:	87 7f       	andi	r24, 0xF7	; 247
    4b3a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b3e:	81 30       	cpi	r24, 0x01	; 1
    4b40:	41 f4       	brne	.+16     	; 0x4b52 <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4b42:	a2 e3       	ldi	r26, 0x32	; 50
    4b44:	b0 e0       	ldi	r27, 0x00	; 0
    4b46:	e2 e3       	ldi	r30, 0x32	; 50
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	80 81       	ld	r24, Z
    4b4c:	80 61       	ori	r24, 0x10	; 16
    4b4e:	8c 93       	st	X, r24
    4b50:	07 c0       	rjmp	.+14     	; 0x4b60 <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4b52:	a2 e3       	ldi	r26, 0x32	; 50
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	e2 e3       	ldi	r30, 0x32	; 50
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8f 7e       	andi	r24, 0xEF	; 239
    4b5e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4b60:	8f 81       	ldd	r24, Y+7	; 0x07
    4b62:	81 30       	cpi	r24, 0x01	; 1
    4b64:	41 f4       	brne	.+16     	; 0x4b76 <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4b66:	a2 e3       	ldi	r26, 0x32	; 50
    4b68:	b0 e0       	ldi	r27, 0x00	; 0
    4b6a:	e2 e3       	ldi	r30, 0x32	; 50
    4b6c:	f0 e0       	ldi	r31, 0x00	; 0
    4b6e:	80 81       	ld	r24, Z
    4b70:	80 62       	ori	r24, 0x20	; 32
    4b72:	8c 93       	st	X, r24
    4b74:	07 c0       	rjmp	.+14     	; 0x4b84 <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4b76:	a2 e3       	ldi	r26, 0x32	; 50
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	e2 e3       	ldi	r30, 0x32	; 50
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	80 81       	ld	r24, Z
    4b80:	8f 7d       	andi	r24, 0xDF	; 223
    4b82:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4b84:	88 85       	ldd	r24, Y+8	; 0x08
    4b86:	81 30       	cpi	r24, 0x01	; 1
    4b88:	41 f4       	brne	.+16     	; 0x4b9a <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4b8a:	a2 e3       	ldi	r26, 0x32	; 50
    4b8c:	b0 e0       	ldi	r27, 0x00	; 0
    4b8e:	e2 e3       	ldi	r30, 0x32	; 50
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	80 81       	ld	r24, Z
    4b94:	80 64       	ori	r24, 0x40	; 64
    4b96:	8c 93       	st	X, r24
    4b98:	07 c0       	rjmp	.+14     	; 0x4ba8 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4b9a:	a2 e3       	ldi	r26, 0x32	; 50
    4b9c:	b0 e0       	ldi	r27, 0x00	; 0
    4b9e:	e2 e3       	ldi	r30, 0x32	; 50
    4ba0:	f0 e0       	ldi	r31, 0x00	; 0
    4ba2:	80 81       	ld	r24, Z
    4ba4:	8f 7b       	andi	r24, 0xBF	; 191
    4ba6:	8c 93       	st	X, r24
		}
		break;
	}
}
    4ba8:	2a 96       	adiw	r28, 0x0a	; 10
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	f8 94       	cli
    4bae:	de bf       	out	0x3e, r29	; 62
    4bb0:	0f be       	out	0x3f, r0	; 63
    4bb2:	cd bf       	out	0x3d, r28	; 61
    4bb4:	cf 91       	pop	r28
    4bb6:	df 91       	pop	r29
    4bb8:	0f 91       	pop	r16
    4bba:	ef 90       	pop	r14
    4bbc:	cf 90       	pop	r12
    4bbe:	af 90       	pop	r10
    4bc0:	08 95       	ret

00004bc2 <SevenSegment_From0To9>:

void SevenSegment_From0To9(u8 Copy_u8PortId){
    4bc2:	af 92       	push	r10
    4bc4:	cf 92       	push	r12
    4bc6:	ef 92       	push	r14
    4bc8:	0f 93       	push	r16
    4bca:	1f 93       	push	r17
    4bcc:	df 93       	push	r29
    4bce:	cf 93       	push	r28
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	cd 58       	subi	r28, 0x8D	; 141
    4bd6:	d0 40       	sbci	r29, 0x00	; 0
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	fe 01       	movw	r30, r28
    4be4:	e3 57       	subi	r30, 0x73	; 115
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 0); // 0
    4bea:	fe 01       	movw	r30, r28
    4bec:	e3 57       	subi	r30, 0x73	; 115
    4bee:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf0:	80 81       	ld	r24, Z
    4bf2:	61 e0       	ldi	r22, 0x01	; 1
    4bf4:	41 e0       	ldi	r20, 0x01	; 1
    4bf6:	21 e0       	ldi	r18, 0x01	; 1
    4bf8:	01 e0       	ldi	r16, 0x01	; 1
    4bfa:	ee 24       	eor	r14, r14
    4bfc:	e3 94       	inc	r14
    4bfe:	cc 24       	eor	r12, r12
    4c00:	c3 94       	inc	r12
    4c02:	aa 24       	eor	r10, r10
    4c04:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e7 57       	subi	r30, 0x77	; 119
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	a8 e4       	ldi	r26, 0x48	; 72
    4c14:	b2 e4       	ldi	r27, 0x42	; 66
    4c16:	80 83       	st	Z, r24
    4c18:	91 83       	std	Z+1, r25	; 0x01
    4c1a:	a2 83       	std	Z+2, r26	; 0x02
    4c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c1e:	8e 01       	movw	r16, r28
    4c20:	0b 57       	subi	r16, 0x7B	; 123
    4c22:	1f 4f       	sbci	r17, 0xFF	; 255
    4c24:	fe 01       	movw	r30, r28
    4c26:	e7 57       	subi	r30, 0x77	; 119
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	60 81       	ld	r22, Z
    4c2c:	71 81       	ldd	r23, Z+1	; 0x01
    4c2e:	82 81       	ldd	r24, Z+2	; 0x02
    4c30:	93 81       	ldd	r25, Z+3	; 0x03
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	4a e7       	ldi	r20, 0x7A	; 122
    4c38:	55 e4       	ldi	r21, 0x45	; 69
    4c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	f8 01       	movw	r30, r16
    4c44:	80 83       	st	Z, r24
    4c46:	91 83       	std	Z+1, r25	; 0x01
    4c48:	a2 83       	std	Z+2, r26	; 0x02
    4c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	eb 57       	subi	r30, 0x7B	; 123
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	60 81       	ld	r22, Z
    4c54:	71 81       	ldd	r23, Z+1	; 0x01
    4c56:	82 81       	ldd	r24, Z+2	; 0x02
    4c58:	93 81       	ldd	r25, Z+3	; 0x03
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e8       	ldi	r20, 0x80	; 128
    4c60:	5f e3       	ldi	r21, 0x3F	; 63
    4c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c66:	88 23       	and	r24, r24
    4c68:	44 f4       	brge	.+16     	; 0x4c7a <SevenSegment_From0To9+0xb8>
		__ticks = 1;
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	ed 57       	subi	r30, 0x7D	; 125
    4c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	91 83       	std	Z+1, r25	; 0x01
    4c76:	80 83       	st	Z, r24
    4c78:	64 c0       	rjmp	.+200    	; 0x4d42 <SevenSegment_From0To9+0x180>
	else if (__tmp > 65535)
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	eb 57       	subi	r30, 0x7B	; 123
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	60 81       	ld	r22, Z
    4c82:	71 81       	ldd	r23, Z+1	; 0x01
    4c84:	82 81       	ldd	r24, Z+2	; 0x02
    4c86:	93 81       	ldd	r25, Z+3	; 0x03
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	3f ef       	ldi	r19, 0xFF	; 255
    4c8c:	4f e7       	ldi	r20, 0x7F	; 127
    4c8e:	57 e4       	ldi	r21, 0x47	; 71
    4c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c94:	18 16       	cp	r1, r24
    4c96:	0c f0       	brlt	.+2      	; 0x4c9a <SevenSegment_From0To9+0xd8>
    4c98:	43 c0       	rjmp	.+134    	; 0x4d20 <SevenSegment_From0To9+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	e7 57       	subi	r30, 0x77	; 119
    4c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca0:	60 81       	ld	r22, Z
    4ca2:	71 81       	ldd	r23, Z+1	; 0x01
    4ca4:	82 81       	ldd	r24, Z+2	; 0x02
    4ca6:	93 81       	ldd	r25, Z+3	; 0x03
    4ca8:	20 e0       	ldi	r18, 0x00	; 0
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	40 e2       	ldi	r20, 0x20	; 32
    4cae:	51 e4       	ldi	r21, 0x41	; 65
    4cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb4:	dc 01       	movw	r26, r24
    4cb6:	cb 01       	movw	r24, r22
    4cb8:	8e 01       	movw	r16, r28
    4cba:	0d 57       	subi	r16, 0x7D	; 125
    4cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cbe:	bc 01       	movw	r22, r24
    4cc0:	cd 01       	movw	r24, r26
    4cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	f8 01       	movw	r30, r16
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	80 83       	st	Z, r24
    4cd0:	1f c0       	rjmp	.+62     	; 0x4d10 <SevenSegment_From0To9+0x14e>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	ef 57       	subi	r30, 0x7F	; 127
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	80 e9       	ldi	r24, 0x90	; 144
    4cda:	91 e0       	ldi	r25, 0x01	; 1
    4cdc:	91 83       	std	Z+1, r25	; 0x01
    4cde:	80 83       	st	Z, r24
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	ef 57       	subi	r30, 0x7F	; 127
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	80 81       	ld	r24, Z
    4ce8:	91 81       	ldd	r25, Z+1	; 0x01
    4cea:	01 97       	sbiw	r24, 0x01	; 1
    4cec:	f1 f7       	brne	.-4      	; 0x4cea <SevenSegment_From0To9+0x128>
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ef 57       	subi	r30, 0x7F	; 127
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	91 83       	std	Z+1, r25	; 0x01
    4cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf8:	de 01       	movw	r26, r28
    4cfa:	ad 57       	subi	r26, 0x7D	; 125
    4cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    4cfe:	fe 01       	movw	r30, r28
    4d00:	ed 57       	subi	r30, 0x7D	; 125
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	80 81       	ld	r24, Z
    4d06:	91 81       	ldd	r25, Z+1	; 0x01
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	11 96       	adiw	r26, 0x01	; 1
    4d0c:	9c 93       	st	X, r25
    4d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d10:	fe 01       	movw	r30, r28
    4d12:	ed 57       	subi	r30, 0x7D	; 125
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	80 81       	ld	r24, Z
    4d18:	91 81       	ldd	r25, Z+1	; 0x01
    4d1a:	00 97       	sbiw	r24, 0x00	; 0
    4d1c:	d1 f6       	brne	.-76     	; 0x4cd2 <SevenSegment_From0To9+0x110>
    4d1e:	27 c0       	rjmp	.+78     	; 0x4d6e <SevenSegment_From0To9+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d20:	8e 01       	movw	r16, r28
    4d22:	0d 57       	subi	r16, 0x7D	; 125
    4d24:	1f 4f       	sbci	r17, 0xFF	; 255
    4d26:	fe 01       	movw	r30, r28
    4d28:	eb 57       	subi	r30, 0x7B	; 123
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	60 81       	ld	r22, Z
    4d2e:	71 81       	ldd	r23, Z+1	; 0x01
    4d30:	82 81       	ldd	r24, Z+2	; 0x02
    4d32:	93 81       	ldd	r25, Z+3	; 0x03
    4d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d38:	dc 01       	movw	r26, r24
    4d3a:	cb 01       	movw	r24, r22
    4d3c:	f8 01       	movw	r30, r16
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	80 83       	st	Z, r24
    4d42:	de 01       	movw	r26, r28
    4d44:	a1 58       	subi	r26, 0x81	; 129
    4d46:	bf 4f       	sbci	r27, 0xFF	; 255
    4d48:	fe 01       	movw	r30, r28
    4d4a:	ed 57       	subi	r30, 0x7D	; 125
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	80 81       	ld	r24, Z
    4d50:	91 81       	ldd	r25, Z+1	; 0x01
    4d52:	8d 93       	st	X+, r24
    4d54:	9c 93       	st	X, r25
    4d56:	fe 01       	movw	r30, r28
    4d58:	e1 58       	subi	r30, 0x81	; 129
    4d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5c:	80 81       	ld	r24, Z
    4d5e:	91 81       	ldd	r25, Z+1	; 0x01
    4d60:	01 97       	sbiw	r24, 0x01	; 1
    4d62:	f1 f7       	brne	.-4      	; 0x4d60 <SevenSegment_From0To9+0x19e>
    4d64:	fe 01       	movw	r30, r28
    4d66:	e1 58       	subi	r30, 0x81	; 129
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	91 83       	std	Z+1, r25	; 0x01
    4d6c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 0, 0); // 1
    4d6e:	fe 01       	movw	r30, r28
    4d70:	e3 57       	subi	r30, 0x73	; 115
    4d72:	ff 4f       	sbci	r31, 0xFF	; 255
    4d74:	80 81       	ld	r24, Z
    4d76:	60 e0       	ldi	r22, 0x00	; 0
    4d78:	41 e0       	ldi	r20, 0x01	; 1
    4d7a:	21 e0       	ldi	r18, 0x01	; 1
    4d7c:	00 e0       	ldi	r16, 0x00	; 0
    4d7e:	ee 24       	eor	r14, r14
    4d80:	cc 24       	eor	r12, r12
    4d82:	aa 24       	eor	r10, r10
    4d84:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e5 58       	subi	r30, 0x85	; 133
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	a8 e4       	ldi	r26, 0x48	; 72
    4d94:	b2 e4       	ldi	r27, 0x42	; 66
    4d96:	80 83       	st	Z, r24
    4d98:	91 83       	std	Z+1, r25	; 0x01
    4d9a:	a2 83       	std	Z+2, r26	; 0x02
    4d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d9e:	8e 01       	movw	r16, r28
    4da0:	09 58       	subi	r16, 0x89	; 137
    4da2:	1f 4f       	sbci	r17, 0xFF	; 255
    4da4:	fe 01       	movw	r30, r28
    4da6:	e5 58       	subi	r30, 0x85	; 133
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	82 81       	ldd	r24, Z+2	; 0x02
    4db0:	93 81       	ldd	r25, Z+3	; 0x03
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	4a e7       	ldi	r20, 0x7A	; 122
    4db8:	55 e4       	ldi	r21, 0x45	; 69
    4dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	f8 01       	movw	r30, r16
    4dc4:	80 83       	st	Z, r24
    4dc6:	91 83       	std	Z+1, r25	; 0x01
    4dc8:	a2 83       	std	Z+2, r26	; 0x02
    4dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dcc:	fe 01       	movw	r30, r28
    4dce:	e9 58       	subi	r30, 0x89	; 137
    4dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd2:	60 81       	ld	r22, Z
    4dd4:	71 81       	ldd	r23, Z+1	; 0x01
    4dd6:	82 81       	ldd	r24, Z+2	; 0x02
    4dd8:	93 81       	ldd	r25, Z+3	; 0x03
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	40 e8       	ldi	r20, 0x80	; 128
    4de0:	5f e3       	ldi	r21, 0x3F	; 63
    4de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4de6:	88 23       	and	r24, r24
    4de8:	44 f4       	brge	.+16     	; 0x4dfa <SevenSegment_From0To9+0x238>
		__ticks = 1;
    4dea:	fe 01       	movw	r30, r28
    4dec:	eb 58       	subi	r30, 0x8B	; 139
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	91 83       	std	Z+1, r25	; 0x01
    4df6:	80 83       	st	Z, r24
    4df8:	64 c0       	rjmp	.+200    	; 0x4ec2 <SevenSegment_From0To9+0x300>
	else if (__tmp > 65535)
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	e9 58       	subi	r30, 0x89	; 137
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	60 81       	ld	r22, Z
    4e02:	71 81       	ldd	r23, Z+1	; 0x01
    4e04:	82 81       	ldd	r24, Z+2	; 0x02
    4e06:	93 81       	ldd	r25, Z+3	; 0x03
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	3f ef       	ldi	r19, 0xFF	; 255
    4e0c:	4f e7       	ldi	r20, 0x7F	; 127
    4e0e:	57 e4       	ldi	r21, 0x47	; 71
    4e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e14:	18 16       	cp	r1, r24
    4e16:	0c f0       	brlt	.+2      	; 0x4e1a <SevenSegment_From0To9+0x258>
    4e18:	43 c0       	rjmp	.+134    	; 0x4ea0 <SevenSegment_From0To9+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e5 58       	subi	r30, 0x85	; 133
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	60 81       	ld	r22, Z
    4e22:	71 81       	ldd	r23, Z+1	; 0x01
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	40 e2       	ldi	r20, 0x20	; 32
    4e2e:	51 e4       	ldi	r21, 0x41	; 65
    4e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e34:	dc 01       	movw	r26, r24
    4e36:	cb 01       	movw	r24, r22
    4e38:	8e 01       	movw	r16, r28
    4e3a:	0b 58       	subi	r16, 0x8B	; 139
    4e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3e:	bc 01       	movw	r22, r24
    4e40:	cd 01       	movw	r24, r26
    4e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	80 83       	st	Z, r24
    4e50:	1f c0       	rjmp	.+62     	; 0x4e90 <SevenSegment_From0To9+0x2ce>
    4e52:	fe 01       	movw	r30, r28
    4e54:	ed 58       	subi	r30, 0x8D	; 141
    4e56:	ff 4f       	sbci	r31, 0xFF	; 255
    4e58:	80 e9       	ldi	r24, 0x90	; 144
    4e5a:	91 e0       	ldi	r25, 0x01	; 1
    4e5c:	91 83       	std	Z+1, r25	; 0x01
    4e5e:	80 83       	st	Z, r24
    4e60:	fe 01       	movw	r30, r28
    4e62:	ed 58       	subi	r30, 0x8D	; 141
    4e64:	ff 4f       	sbci	r31, 0xFF	; 255
    4e66:	80 81       	ld	r24, Z
    4e68:	91 81       	ldd	r25, Z+1	; 0x01
    4e6a:	01 97       	sbiw	r24, 0x01	; 1
    4e6c:	f1 f7       	brne	.-4      	; 0x4e6a <SevenSegment_From0To9+0x2a8>
    4e6e:	fe 01       	movw	r30, r28
    4e70:	ed 58       	subi	r30, 0x8D	; 141
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	91 83       	std	Z+1, r25	; 0x01
    4e76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e78:	de 01       	movw	r26, r28
    4e7a:	ab 58       	subi	r26, 0x8B	; 139
    4e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e7e:	fe 01       	movw	r30, r28
    4e80:	eb 58       	subi	r30, 0x8B	; 139
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	80 81       	ld	r24, Z
    4e86:	91 81       	ldd	r25, Z+1	; 0x01
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	11 96       	adiw	r26, 0x01	; 1
    4e8c:	9c 93       	st	X, r25
    4e8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e90:	fe 01       	movw	r30, r28
    4e92:	eb 58       	subi	r30, 0x8B	; 139
    4e94:	ff 4f       	sbci	r31, 0xFF	; 255
    4e96:	80 81       	ld	r24, Z
    4e98:	91 81       	ldd	r25, Z+1	; 0x01
    4e9a:	00 97       	sbiw	r24, 0x00	; 0
    4e9c:	d1 f6       	brne	.-76     	; 0x4e52 <SevenSegment_From0To9+0x290>
    4e9e:	27 c0       	rjmp	.+78     	; 0x4eee <SevenSegment_From0To9+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea0:	8e 01       	movw	r16, r28
    4ea2:	0b 58       	subi	r16, 0x8B	; 139
    4ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	e9 58       	subi	r30, 0x89	; 137
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	f8 01       	movw	r30, r16
    4ebe:	91 83       	std	Z+1, r25	; 0x01
    4ec0:	80 83       	st	Z, r24
    4ec2:	de 01       	movw	r26, r28
    4ec4:	af 58       	subi	r26, 0x8F	; 143
    4ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ec8:	fe 01       	movw	r30, r28
    4eca:	eb 58       	subi	r30, 0x8B	; 139
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	80 81       	ld	r24, Z
    4ed0:	91 81       	ldd	r25, Z+1	; 0x01
    4ed2:	8d 93       	st	X+, r24
    4ed4:	9c 93       	st	X, r25
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	ef 58       	subi	r30, 0x8F	; 143
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	f1 f7       	brne	.-4      	; 0x4ee0 <SevenSegment_From0To9+0x31e>
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	ef 58       	subi	r30, 0x8F	; 143
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	91 83       	std	Z+1, r25	; 0x01
    4eec:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 0, 1, 1, 0, 1); // 2
    4eee:	fe 01       	movw	r30, r28
    4ef0:	e3 57       	subi	r30, 0x73	; 115
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	80 81       	ld	r24, Z
    4ef6:	61 e0       	ldi	r22, 0x01	; 1
    4ef8:	41 e0       	ldi	r20, 0x01	; 1
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	01 e0       	ldi	r16, 0x01	; 1
    4efe:	ee 24       	eor	r14, r14
    4f00:	e3 94       	inc	r14
    4f02:	cc 24       	eor	r12, r12
    4f04:	aa 24       	eor	r10, r10
    4f06:	a3 94       	inc	r10
    4f08:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	e3 59       	subi	r30, 0x93	; 147
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	80 e0       	ldi	r24, 0x00	; 0
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	a8 e4       	ldi	r26, 0x48	; 72
    4f18:	b2 e4       	ldi	r27, 0x42	; 66
    4f1a:	80 83       	st	Z, r24
    4f1c:	91 83       	std	Z+1, r25	; 0x01
    4f1e:	a2 83       	std	Z+2, r26	; 0x02
    4f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f22:	8e 01       	movw	r16, r28
    4f24:	07 59       	subi	r16, 0x97	; 151
    4f26:	1f 4f       	sbci	r17, 0xFF	; 255
    4f28:	fe 01       	movw	r30, r28
    4f2a:	e3 59       	subi	r30, 0x93	; 147
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	60 81       	ld	r22, Z
    4f30:	71 81       	ldd	r23, Z+1	; 0x01
    4f32:	82 81       	ldd	r24, Z+2	; 0x02
    4f34:	93 81       	ldd	r25, Z+3	; 0x03
    4f36:	20 e0       	ldi	r18, 0x00	; 0
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	4a e7       	ldi	r20, 0x7A	; 122
    4f3c:	55 e4       	ldi	r21, 0x45	; 69
    4f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f42:	dc 01       	movw	r26, r24
    4f44:	cb 01       	movw	r24, r22
    4f46:	f8 01       	movw	r30, r16
    4f48:	80 83       	st	Z, r24
    4f4a:	91 83       	std	Z+1, r25	; 0x01
    4f4c:	a2 83       	std	Z+2, r26	; 0x02
    4f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f50:	fe 01       	movw	r30, r28
    4f52:	e7 59       	subi	r30, 0x97	; 151
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	60 81       	ld	r22, Z
    4f58:	71 81       	ldd	r23, Z+1	; 0x01
    4f5a:	82 81       	ldd	r24, Z+2	; 0x02
    4f5c:	93 81       	ldd	r25, Z+3	; 0x03
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	40 e8       	ldi	r20, 0x80	; 128
    4f64:	5f e3       	ldi	r21, 0x3F	; 63
    4f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f6a:	88 23       	and	r24, r24
    4f6c:	44 f4       	brge	.+16     	; 0x4f7e <SevenSegment_From0To9+0x3bc>
		__ticks = 1;
    4f6e:	fe 01       	movw	r30, r28
    4f70:	e9 59       	subi	r30, 0x99	; 153
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	91 83       	std	Z+1, r25	; 0x01
    4f7a:	80 83       	st	Z, r24
    4f7c:	64 c0       	rjmp	.+200    	; 0x5046 <SevenSegment_From0To9+0x484>
	else if (__tmp > 65535)
    4f7e:	fe 01       	movw	r30, r28
    4f80:	e7 59       	subi	r30, 0x97	; 151
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	60 81       	ld	r22, Z
    4f86:	71 81       	ldd	r23, Z+1	; 0x01
    4f88:	82 81       	ldd	r24, Z+2	; 0x02
    4f8a:	93 81       	ldd	r25, Z+3	; 0x03
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	3f ef       	ldi	r19, 0xFF	; 255
    4f90:	4f e7       	ldi	r20, 0x7F	; 127
    4f92:	57 e4       	ldi	r21, 0x47	; 71
    4f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f98:	18 16       	cp	r1, r24
    4f9a:	0c f0       	brlt	.+2      	; 0x4f9e <SevenSegment_From0To9+0x3dc>
    4f9c:	43 c0       	rjmp	.+134    	; 0x5024 <SevenSegment_From0To9+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9e:	fe 01       	movw	r30, r28
    4fa0:	e3 59       	subi	r30, 0x93	; 147
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	60 81       	ld	r22, Z
    4fa6:	71 81       	ldd	r23, Z+1	; 0x01
    4fa8:	82 81       	ldd	r24, Z+2	; 0x02
    4faa:	93 81       	ldd	r25, Z+3	; 0x03
    4fac:	20 e0       	ldi	r18, 0x00	; 0
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	40 e2       	ldi	r20, 0x20	; 32
    4fb2:	51 e4       	ldi	r21, 0x41	; 65
    4fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	8e 01       	movw	r16, r28
    4fbe:	09 59       	subi	r16, 0x99	; 153
    4fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc2:	bc 01       	movw	r22, r24
    4fc4:	cd 01       	movw	r24, r26
    4fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	f8 01       	movw	r30, r16
    4fd0:	91 83       	std	Z+1, r25	; 0x01
    4fd2:	80 83       	st	Z, r24
    4fd4:	1f c0       	rjmp	.+62     	; 0x5014 <SevenSegment_From0To9+0x452>
    4fd6:	fe 01       	movw	r30, r28
    4fd8:	eb 59       	subi	r30, 0x9B	; 155
    4fda:	ff 4f       	sbci	r31, 0xFF	; 255
    4fdc:	80 e9       	ldi	r24, 0x90	; 144
    4fde:	91 e0       	ldi	r25, 0x01	; 1
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	80 83       	st	Z, r24
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	eb 59       	subi	r30, 0x9B	; 155
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	80 81       	ld	r24, Z
    4fec:	91 81       	ldd	r25, Z+1	; 0x01
    4fee:	01 97       	sbiw	r24, 0x01	; 1
    4ff0:	f1 f7       	brne	.-4      	; 0x4fee <SevenSegment_From0To9+0x42c>
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	eb 59       	subi	r30, 0x9B	; 155
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	91 83       	std	Z+1, r25	; 0x01
    4ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ffc:	de 01       	movw	r26, r28
    4ffe:	a9 59       	subi	r26, 0x99	; 153
    5000:	bf 4f       	sbci	r27, 0xFF	; 255
    5002:	fe 01       	movw	r30, r28
    5004:	e9 59       	subi	r30, 0x99	; 153
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 81       	ld	r24, Z
    500a:	91 81       	ldd	r25, Z+1	; 0x01
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	11 96       	adiw	r26, 0x01	; 1
    5010:	9c 93       	st	X, r25
    5012:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5014:	fe 01       	movw	r30, r28
    5016:	e9 59       	subi	r30, 0x99	; 153
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	80 81       	ld	r24, Z
    501c:	91 81       	ldd	r25, Z+1	; 0x01
    501e:	00 97       	sbiw	r24, 0x00	; 0
    5020:	d1 f6       	brne	.-76     	; 0x4fd6 <SevenSegment_From0To9+0x414>
    5022:	27 c0       	rjmp	.+78     	; 0x5072 <SevenSegment_From0To9+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5024:	8e 01       	movw	r16, r28
    5026:	09 59       	subi	r16, 0x99	; 153
    5028:	1f 4f       	sbci	r17, 0xFF	; 255
    502a:	fe 01       	movw	r30, r28
    502c:	e7 59       	subi	r30, 0x97	; 151
    502e:	ff 4f       	sbci	r31, 0xFF	; 255
    5030:	60 81       	ld	r22, Z
    5032:	71 81       	ldd	r23, Z+1	; 0x01
    5034:	82 81       	ldd	r24, Z+2	; 0x02
    5036:	93 81       	ldd	r25, Z+3	; 0x03
    5038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    503c:	dc 01       	movw	r26, r24
    503e:	cb 01       	movw	r24, r22
    5040:	f8 01       	movw	r30, r16
    5042:	91 83       	std	Z+1, r25	; 0x01
    5044:	80 83       	st	Z, r24
    5046:	de 01       	movw	r26, r28
    5048:	ad 59       	subi	r26, 0x9D	; 157
    504a:	bf 4f       	sbci	r27, 0xFF	; 255
    504c:	fe 01       	movw	r30, r28
    504e:	e9 59       	subi	r30, 0x99	; 153
    5050:	ff 4f       	sbci	r31, 0xFF	; 255
    5052:	80 81       	ld	r24, Z
    5054:	91 81       	ldd	r25, Z+1	; 0x01
    5056:	8d 93       	st	X+, r24
    5058:	9c 93       	st	X, r25
    505a:	fe 01       	movw	r30, r28
    505c:	ed 59       	subi	r30, 0x9D	; 157
    505e:	ff 4f       	sbci	r31, 0xFF	; 255
    5060:	80 81       	ld	r24, Z
    5062:	91 81       	ldd	r25, Z+1	; 0x01
    5064:	01 97       	sbiw	r24, 0x01	; 1
    5066:	f1 f7       	brne	.-4      	; 0x5064 <SevenSegment_From0To9+0x4a2>
    5068:	fe 01       	movw	r30, r28
    506a:	ed 59       	subi	r30, 0x9D	; 157
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	91 83       	std	Z+1, r25	; 0x01
    5070:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 0, 1); // 3
    5072:	fe 01       	movw	r30, r28
    5074:	e3 57       	subi	r30, 0x73	; 115
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	80 81       	ld	r24, Z
    507a:	61 e0       	ldi	r22, 0x01	; 1
    507c:	41 e0       	ldi	r20, 0x01	; 1
    507e:	21 e0       	ldi	r18, 0x01	; 1
    5080:	01 e0       	ldi	r16, 0x01	; 1
    5082:	ee 24       	eor	r14, r14
    5084:	cc 24       	eor	r12, r12
    5086:	aa 24       	eor	r10, r10
    5088:	a3 94       	inc	r10
    508a:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    508e:	fe 01       	movw	r30, r28
    5090:	e1 5a       	subi	r30, 0xA1	; 161
    5092:	ff 4f       	sbci	r31, 0xFF	; 255
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	a8 e4       	ldi	r26, 0x48	; 72
    509a:	b2 e4       	ldi	r27, 0x42	; 66
    509c:	80 83       	st	Z, r24
    509e:	91 83       	std	Z+1, r25	; 0x01
    50a0:	a2 83       	std	Z+2, r26	; 0x02
    50a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50a4:	8e 01       	movw	r16, r28
    50a6:	05 5a       	subi	r16, 0xA5	; 165
    50a8:	1f 4f       	sbci	r17, 0xFF	; 255
    50aa:	fe 01       	movw	r30, r28
    50ac:	e1 5a       	subi	r30, 0xA1	; 161
    50ae:	ff 4f       	sbci	r31, 0xFF	; 255
    50b0:	60 81       	ld	r22, Z
    50b2:	71 81       	ldd	r23, Z+1	; 0x01
    50b4:	82 81       	ldd	r24, Z+2	; 0x02
    50b6:	93 81       	ldd	r25, Z+3	; 0x03
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	4a e7       	ldi	r20, 0x7A	; 122
    50be:	55 e4       	ldi	r21, 0x45	; 69
    50c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	f8 01       	movw	r30, r16
    50ca:	80 83       	st	Z, r24
    50cc:	91 83       	std	Z+1, r25	; 0x01
    50ce:	a2 83       	std	Z+2, r26	; 0x02
    50d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50d2:	fe 01       	movw	r30, r28
    50d4:	e5 5a       	subi	r30, 0xA5	; 165
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	60 81       	ld	r22, Z
    50da:	71 81       	ldd	r23, Z+1	; 0x01
    50dc:	82 81       	ldd	r24, Z+2	; 0x02
    50de:	93 81       	ldd	r25, Z+3	; 0x03
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	40 e8       	ldi	r20, 0x80	; 128
    50e6:	5f e3       	ldi	r21, 0x3F	; 63
    50e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50ec:	88 23       	and	r24, r24
    50ee:	44 f4       	brge	.+16     	; 0x5100 <SevenSegment_From0To9+0x53e>
		__ticks = 1;
    50f0:	fe 01       	movw	r30, r28
    50f2:	e7 5a       	subi	r30, 0xA7	; 167
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	91 83       	std	Z+1, r25	; 0x01
    50fc:	80 83       	st	Z, r24
    50fe:	64 c0       	rjmp	.+200    	; 0x51c8 <SevenSegment_From0To9+0x606>
	else if (__tmp > 65535)
    5100:	fe 01       	movw	r30, r28
    5102:	e5 5a       	subi	r30, 0xA5	; 165
    5104:	ff 4f       	sbci	r31, 0xFF	; 255
    5106:	60 81       	ld	r22, Z
    5108:	71 81       	ldd	r23, Z+1	; 0x01
    510a:	82 81       	ldd	r24, Z+2	; 0x02
    510c:	93 81       	ldd	r25, Z+3	; 0x03
    510e:	20 e0       	ldi	r18, 0x00	; 0
    5110:	3f ef       	ldi	r19, 0xFF	; 255
    5112:	4f e7       	ldi	r20, 0x7F	; 127
    5114:	57 e4       	ldi	r21, 0x47	; 71
    5116:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    511a:	18 16       	cp	r1, r24
    511c:	0c f0       	brlt	.+2      	; 0x5120 <SevenSegment_From0To9+0x55e>
    511e:	43 c0       	rjmp	.+134    	; 0x51a6 <SevenSegment_From0To9+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5120:	fe 01       	movw	r30, r28
    5122:	e1 5a       	subi	r30, 0xA1	; 161
    5124:	ff 4f       	sbci	r31, 0xFF	; 255
    5126:	60 81       	ld	r22, Z
    5128:	71 81       	ldd	r23, Z+1	; 0x01
    512a:	82 81       	ldd	r24, Z+2	; 0x02
    512c:	93 81       	ldd	r25, Z+3	; 0x03
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	40 e2       	ldi	r20, 0x20	; 32
    5134:	51 e4       	ldi	r21, 0x41	; 65
    5136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	8e 01       	movw	r16, r28
    5140:	07 5a       	subi	r16, 0xA7	; 167
    5142:	1f 4f       	sbci	r17, 0xFF	; 255
    5144:	bc 01       	movw	r22, r24
    5146:	cd 01       	movw	r24, r26
    5148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514c:	dc 01       	movw	r26, r24
    514e:	cb 01       	movw	r24, r22
    5150:	f8 01       	movw	r30, r16
    5152:	91 83       	std	Z+1, r25	; 0x01
    5154:	80 83       	st	Z, r24
    5156:	1f c0       	rjmp	.+62     	; 0x5196 <SevenSegment_From0To9+0x5d4>
    5158:	fe 01       	movw	r30, r28
    515a:	e9 5a       	subi	r30, 0xA9	; 169
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	80 e9       	ldi	r24, 0x90	; 144
    5160:	91 e0       	ldi	r25, 0x01	; 1
    5162:	91 83       	std	Z+1, r25	; 0x01
    5164:	80 83       	st	Z, r24
    5166:	fe 01       	movw	r30, r28
    5168:	e9 5a       	subi	r30, 0xA9	; 169
    516a:	ff 4f       	sbci	r31, 0xFF	; 255
    516c:	80 81       	ld	r24, Z
    516e:	91 81       	ldd	r25, Z+1	; 0x01
    5170:	01 97       	sbiw	r24, 0x01	; 1
    5172:	f1 f7       	brne	.-4      	; 0x5170 <SevenSegment_From0To9+0x5ae>
    5174:	fe 01       	movw	r30, r28
    5176:	e9 5a       	subi	r30, 0xA9	; 169
    5178:	ff 4f       	sbci	r31, 0xFF	; 255
    517a:	91 83       	std	Z+1, r25	; 0x01
    517c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    517e:	de 01       	movw	r26, r28
    5180:	a7 5a       	subi	r26, 0xA7	; 167
    5182:	bf 4f       	sbci	r27, 0xFF	; 255
    5184:	fe 01       	movw	r30, r28
    5186:	e7 5a       	subi	r30, 0xA7	; 167
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	80 81       	ld	r24, Z
    518c:	91 81       	ldd	r25, Z+1	; 0x01
    518e:	01 97       	sbiw	r24, 0x01	; 1
    5190:	11 96       	adiw	r26, 0x01	; 1
    5192:	9c 93       	st	X, r25
    5194:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5196:	fe 01       	movw	r30, r28
    5198:	e7 5a       	subi	r30, 0xA7	; 167
    519a:	ff 4f       	sbci	r31, 0xFF	; 255
    519c:	80 81       	ld	r24, Z
    519e:	91 81       	ldd	r25, Z+1	; 0x01
    51a0:	00 97       	sbiw	r24, 0x00	; 0
    51a2:	d1 f6       	brne	.-76     	; 0x5158 <SevenSegment_From0To9+0x596>
    51a4:	27 c0       	rjmp	.+78     	; 0x51f4 <SevenSegment_From0To9+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51a6:	8e 01       	movw	r16, r28
    51a8:	07 5a       	subi	r16, 0xA7	; 167
    51aa:	1f 4f       	sbci	r17, 0xFF	; 255
    51ac:	fe 01       	movw	r30, r28
    51ae:	e5 5a       	subi	r30, 0xA5	; 165
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	60 81       	ld	r22, Z
    51b4:	71 81       	ldd	r23, Z+1	; 0x01
    51b6:	82 81       	ldd	r24, Z+2	; 0x02
    51b8:	93 81       	ldd	r25, Z+3	; 0x03
    51ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	f8 01       	movw	r30, r16
    51c4:	91 83       	std	Z+1, r25	; 0x01
    51c6:	80 83       	st	Z, r24
    51c8:	de 01       	movw	r26, r28
    51ca:	ab 5a       	subi	r26, 0xAB	; 171
    51cc:	bf 4f       	sbci	r27, 0xFF	; 255
    51ce:	fe 01       	movw	r30, r28
    51d0:	e7 5a       	subi	r30, 0xA7	; 167
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	80 81       	ld	r24, Z
    51d6:	91 81       	ldd	r25, Z+1	; 0x01
    51d8:	8d 93       	st	X+, r24
    51da:	9c 93       	st	X, r25
    51dc:	fe 01       	movw	r30, r28
    51de:	eb 5a       	subi	r30, 0xAB	; 171
    51e0:	ff 4f       	sbci	r31, 0xFF	; 255
    51e2:	80 81       	ld	r24, Z
    51e4:	91 81       	ldd	r25, Z+1	; 0x01
    51e6:	01 97       	sbiw	r24, 0x01	; 1
    51e8:	f1 f7       	brne	.-4      	; 0x51e6 <SevenSegment_From0To9+0x624>
    51ea:	fe 01       	movw	r30, r28
    51ec:	eb 5a       	subi	r30, 0xAB	; 171
    51ee:	ff 4f       	sbci	r31, 0xFF	; 255
    51f0:	91 83       	std	Z+1, r25	; 0x01
    51f2:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 1, 1); // 4
    51f4:	fe 01       	movw	r30, r28
    51f6:	e3 57       	subi	r30, 0x73	; 115
    51f8:	ff 4f       	sbci	r31, 0xFF	; 255
    51fa:	80 81       	ld	r24, Z
    51fc:	60 e0       	ldi	r22, 0x00	; 0
    51fe:	41 e0       	ldi	r20, 0x01	; 1
    5200:	21 e0       	ldi	r18, 0x01	; 1
    5202:	00 e0       	ldi	r16, 0x00	; 0
    5204:	ee 24       	eor	r14, r14
    5206:	cc 24       	eor	r12, r12
    5208:	c3 94       	inc	r12
    520a:	aa 24       	eor	r10, r10
    520c:	a3 94       	inc	r10
    520e:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5212:	fe 01       	movw	r30, r28
    5214:	ef 5a       	subi	r30, 0xAF	; 175
    5216:	ff 4f       	sbci	r31, 0xFF	; 255
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	a8 e4       	ldi	r26, 0x48	; 72
    521e:	b2 e4       	ldi	r27, 0x42	; 66
    5220:	80 83       	st	Z, r24
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	a2 83       	std	Z+2, r26	; 0x02
    5226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5228:	8e 01       	movw	r16, r28
    522a:	03 5b       	subi	r16, 0xB3	; 179
    522c:	1f 4f       	sbci	r17, 0xFF	; 255
    522e:	fe 01       	movw	r30, r28
    5230:	ef 5a       	subi	r30, 0xAF	; 175
    5232:	ff 4f       	sbci	r31, 0xFF	; 255
    5234:	60 81       	ld	r22, Z
    5236:	71 81       	ldd	r23, Z+1	; 0x01
    5238:	82 81       	ldd	r24, Z+2	; 0x02
    523a:	93 81       	ldd	r25, Z+3	; 0x03
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	4a e7       	ldi	r20, 0x7A	; 122
    5242:	55 e4       	ldi	r21, 0x45	; 69
    5244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	f8 01       	movw	r30, r16
    524e:	80 83       	st	Z, r24
    5250:	91 83       	std	Z+1, r25	; 0x01
    5252:	a2 83       	std	Z+2, r26	; 0x02
    5254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5256:	fe 01       	movw	r30, r28
    5258:	e3 5b       	subi	r30, 0xB3	; 179
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	60 81       	ld	r22, Z
    525e:	71 81       	ldd	r23, Z+1	; 0x01
    5260:	82 81       	ldd	r24, Z+2	; 0x02
    5262:	93 81       	ldd	r25, Z+3	; 0x03
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	40 e8       	ldi	r20, 0x80	; 128
    526a:	5f e3       	ldi	r21, 0x3F	; 63
    526c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5270:	88 23       	and	r24, r24
    5272:	44 f4       	brge	.+16     	; 0x5284 <SevenSegment_From0To9+0x6c2>
		__ticks = 1;
    5274:	fe 01       	movw	r30, r28
    5276:	e5 5b       	subi	r30, 0xB5	; 181
    5278:	ff 4f       	sbci	r31, 0xFF	; 255
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	91 83       	std	Z+1, r25	; 0x01
    5280:	80 83       	st	Z, r24
    5282:	64 c0       	rjmp	.+200    	; 0x534c <SevenSegment_From0To9+0x78a>
	else if (__tmp > 65535)
    5284:	fe 01       	movw	r30, r28
    5286:	e3 5b       	subi	r30, 0xB3	; 179
    5288:	ff 4f       	sbci	r31, 0xFF	; 255
    528a:	60 81       	ld	r22, Z
    528c:	71 81       	ldd	r23, Z+1	; 0x01
    528e:	82 81       	ldd	r24, Z+2	; 0x02
    5290:	93 81       	ldd	r25, Z+3	; 0x03
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	3f ef       	ldi	r19, 0xFF	; 255
    5296:	4f e7       	ldi	r20, 0x7F	; 127
    5298:	57 e4       	ldi	r21, 0x47	; 71
    529a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    529e:	18 16       	cp	r1, r24
    52a0:	0c f0       	brlt	.+2      	; 0x52a4 <SevenSegment_From0To9+0x6e2>
    52a2:	43 c0       	rjmp	.+134    	; 0x532a <SevenSegment_From0To9+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52a4:	fe 01       	movw	r30, r28
    52a6:	ef 5a       	subi	r30, 0xAF	; 175
    52a8:	ff 4f       	sbci	r31, 0xFF	; 255
    52aa:	60 81       	ld	r22, Z
    52ac:	71 81       	ldd	r23, Z+1	; 0x01
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	93 81       	ldd	r25, Z+3	; 0x03
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e2       	ldi	r20, 0x20	; 32
    52b8:	51 e4       	ldi	r21, 0x41	; 65
    52ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	8e 01       	movw	r16, r28
    52c4:	05 5b       	subi	r16, 0xB5	; 181
    52c6:	1f 4f       	sbci	r17, 0xFF	; 255
    52c8:	bc 01       	movw	r22, r24
    52ca:	cd 01       	movw	r24, r26
    52cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d0:	dc 01       	movw	r26, r24
    52d2:	cb 01       	movw	r24, r22
    52d4:	f8 01       	movw	r30, r16
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	80 83       	st	Z, r24
    52da:	1f c0       	rjmp	.+62     	; 0x531a <SevenSegment_From0To9+0x758>
    52dc:	fe 01       	movw	r30, r28
    52de:	e7 5b       	subi	r30, 0xB7	; 183
    52e0:	ff 4f       	sbci	r31, 0xFF	; 255
    52e2:	80 e9       	ldi	r24, 0x90	; 144
    52e4:	91 e0       	ldi	r25, 0x01	; 1
    52e6:	91 83       	std	Z+1, r25	; 0x01
    52e8:	80 83       	st	Z, r24
    52ea:	fe 01       	movw	r30, r28
    52ec:	e7 5b       	subi	r30, 0xB7	; 183
    52ee:	ff 4f       	sbci	r31, 0xFF	; 255
    52f0:	80 81       	ld	r24, Z
    52f2:	91 81       	ldd	r25, Z+1	; 0x01
    52f4:	01 97       	sbiw	r24, 0x01	; 1
    52f6:	f1 f7       	brne	.-4      	; 0x52f4 <SevenSegment_From0To9+0x732>
    52f8:	fe 01       	movw	r30, r28
    52fa:	e7 5b       	subi	r30, 0xB7	; 183
    52fc:	ff 4f       	sbci	r31, 0xFF	; 255
    52fe:	91 83       	std	Z+1, r25	; 0x01
    5300:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5302:	de 01       	movw	r26, r28
    5304:	a5 5b       	subi	r26, 0xB5	; 181
    5306:	bf 4f       	sbci	r27, 0xFF	; 255
    5308:	fe 01       	movw	r30, r28
    530a:	e5 5b       	subi	r30, 0xB5	; 181
    530c:	ff 4f       	sbci	r31, 0xFF	; 255
    530e:	80 81       	ld	r24, Z
    5310:	91 81       	ldd	r25, Z+1	; 0x01
    5312:	01 97       	sbiw	r24, 0x01	; 1
    5314:	11 96       	adiw	r26, 0x01	; 1
    5316:	9c 93       	st	X, r25
    5318:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    531a:	fe 01       	movw	r30, r28
    531c:	e5 5b       	subi	r30, 0xB5	; 181
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	80 81       	ld	r24, Z
    5322:	91 81       	ldd	r25, Z+1	; 0x01
    5324:	00 97       	sbiw	r24, 0x00	; 0
    5326:	d1 f6       	brne	.-76     	; 0x52dc <SevenSegment_From0To9+0x71a>
    5328:	27 c0       	rjmp	.+78     	; 0x5378 <SevenSegment_From0To9+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    532a:	8e 01       	movw	r16, r28
    532c:	05 5b       	subi	r16, 0xB5	; 181
    532e:	1f 4f       	sbci	r17, 0xFF	; 255
    5330:	fe 01       	movw	r30, r28
    5332:	e3 5b       	subi	r30, 0xB3	; 179
    5334:	ff 4f       	sbci	r31, 0xFF	; 255
    5336:	60 81       	ld	r22, Z
    5338:	71 81       	ldd	r23, Z+1	; 0x01
    533a:	82 81       	ldd	r24, Z+2	; 0x02
    533c:	93 81       	ldd	r25, Z+3	; 0x03
    533e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5342:	dc 01       	movw	r26, r24
    5344:	cb 01       	movw	r24, r22
    5346:	f8 01       	movw	r30, r16
    5348:	91 83       	std	Z+1, r25	; 0x01
    534a:	80 83       	st	Z, r24
    534c:	de 01       	movw	r26, r28
    534e:	a9 5b       	subi	r26, 0xB9	; 185
    5350:	bf 4f       	sbci	r27, 0xFF	; 255
    5352:	fe 01       	movw	r30, r28
    5354:	e5 5b       	subi	r30, 0xB5	; 181
    5356:	ff 4f       	sbci	r31, 0xFF	; 255
    5358:	80 81       	ld	r24, Z
    535a:	91 81       	ldd	r25, Z+1	; 0x01
    535c:	8d 93       	st	X+, r24
    535e:	9c 93       	st	X, r25
    5360:	fe 01       	movw	r30, r28
    5362:	e9 5b       	subi	r30, 0xB9	; 185
    5364:	ff 4f       	sbci	r31, 0xFF	; 255
    5366:	80 81       	ld	r24, Z
    5368:	91 81       	ldd	r25, Z+1	; 0x01
    536a:	01 97       	sbiw	r24, 0x01	; 1
    536c:	f1 f7       	brne	.-4      	; 0x536a <SevenSegment_From0To9+0x7a8>
    536e:	fe 01       	movw	r30, r28
    5370:	e9 5b       	subi	r30, 0xB9	; 185
    5372:	ff 4f       	sbci	r31, 0xFF	; 255
    5374:	91 83       	std	Z+1, r25	; 0x01
    5376:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 0, 1, 1); // 5
    5378:	fe 01       	movw	r30, r28
    537a:	e3 57       	subi	r30, 0x73	; 115
    537c:	ff 4f       	sbci	r31, 0xFF	; 255
    537e:	80 81       	ld	r24, Z
    5380:	61 e0       	ldi	r22, 0x01	; 1
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	21 e0       	ldi	r18, 0x01	; 1
    5386:	01 e0       	ldi	r16, 0x01	; 1
    5388:	ee 24       	eor	r14, r14
    538a:	cc 24       	eor	r12, r12
    538c:	c3 94       	inc	r12
    538e:	aa 24       	eor	r10, r10
    5390:	a3 94       	inc	r10
    5392:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5396:	fe 01       	movw	r30, r28
    5398:	ed 5b       	subi	r30, 0xBD	; 189
    539a:	ff 4f       	sbci	r31, 0xFF	; 255
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	a8 e4       	ldi	r26, 0x48	; 72
    53a2:	b2 e4       	ldi	r27, 0x42	; 66
    53a4:	80 83       	st	Z, r24
    53a6:	91 83       	std	Z+1, r25	; 0x01
    53a8:	a2 83       	std	Z+2, r26	; 0x02
    53aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ac:	8e 01       	movw	r16, r28
    53ae:	01 5c       	subi	r16, 0xC1	; 193
    53b0:	1f 4f       	sbci	r17, 0xFF	; 255
    53b2:	fe 01       	movw	r30, r28
    53b4:	ed 5b       	subi	r30, 0xBD	; 189
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	60 81       	ld	r22, Z
    53ba:	71 81       	ldd	r23, Z+1	; 0x01
    53bc:	82 81       	ldd	r24, Z+2	; 0x02
    53be:	93 81       	ldd	r25, Z+3	; 0x03
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	4a e7       	ldi	r20, 0x7A	; 122
    53c6:	55 e4       	ldi	r21, 0x45	; 69
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	f8 01       	movw	r30, r16
    53d2:	80 83       	st	Z, r24
    53d4:	91 83       	std	Z+1, r25	; 0x01
    53d6:	a2 83       	std	Z+2, r26	; 0x02
    53d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53da:	fe 01       	movw	r30, r28
    53dc:	ff 96       	adiw	r30, 0x3f	; 63
    53de:	60 81       	ld	r22, Z
    53e0:	71 81       	ldd	r23, Z+1	; 0x01
    53e2:	82 81       	ldd	r24, Z+2	; 0x02
    53e4:	93 81       	ldd	r25, Z+3	; 0x03
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e8       	ldi	r20, 0x80	; 128
    53ec:	5f e3       	ldi	r21, 0x3F	; 63
    53ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53f2:	88 23       	and	r24, r24
    53f4:	2c f4       	brge	.+10     	; 0x5400 <SevenSegment_From0To9+0x83e>
		__ticks = 1;
    53f6:	81 e0       	ldi	r24, 0x01	; 1
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	9e af       	std	Y+62, r25	; 0x3e
    53fc:	8d af       	std	Y+61, r24	; 0x3d
    53fe:	46 c0       	rjmp	.+140    	; 0x548c <SevenSegment_From0To9+0x8ca>
	else if (__tmp > 65535)
    5400:	fe 01       	movw	r30, r28
    5402:	ff 96       	adiw	r30, 0x3f	; 63
    5404:	60 81       	ld	r22, Z
    5406:	71 81       	ldd	r23, Z+1	; 0x01
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	93 81       	ldd	r25, Z+3	; 0x03
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	3f ef       	ldi	r19, 0xFF	; 255
    5410:	4f e7       	ldi	r20, 0x7F	; 127
    5412:	57 e4       	ldi	r21, 0x47	; 71
    5414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5418:	18 16       	cp	r1, r24
    541a:	64 f5       	brge	.+88     	; 0x5474 <SevenSegment_From0To9+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    541c:	fe 01       	movw	r30, r28
    541e:	ed 5b       	subi	r30, 0xBD	; 189
    5420:	ff 4f       	sbci	r31, 0xFF	; 255
    5422:	60 81       	ld	r22, Z
    5424:	71 81       	ldd	r23, Z+1	; 0x01
    5426:	82 81       	ldd	r24, Z+2	; 0x02
    5428:	93 81       	ldd	r25, Z+3	; 0x03
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	40 e2       	ldi	r20, 0x20	; 32
    5430:	51 e4       	ldi	r21, 0x41	; 65
    5432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	bc 01       	movw	r22, r24
    543c:	cd 01       	movw	r24, r26
    543e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	9e af       	std	Y+62, r25	; 0x3e
    5448:	8d af       	std	Y+61, r24	; 0x3d
    544a:	0f c0       	rjmp	.+30     	; 0x546a <SevenSegment_From0To9+0x8a8>
    544c:	80 e9       	ldi	r24, 0x90	; 144
    544e:	91 e0       	ldi	r25, 0x01	; 1
    5450:	9c af       	std	Y+60, r25	; 0x3c
    5452:	8b af       	std	Y+59, r24	; 0x3b
    5454:	8b ad       	ldd	r24, Y+59	; 0x3b
    5456:	9c ad       	ldd	r25, Y+60	; 0x3c
    5458:	01 97       	sbiw	r24, 0x01	; 1
    545a:	f1 f7       	brne	.-4      	; 0x5458 <SevenSegment_From0To9+0x896>
    545c:	9c af       	std	Y+60, r25	; 0x3c
    545e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5460:	8d ad       	ldd	r24, Y+61	; 0x3d
    5462:	9e ad       	ldd	r25, Y+62	; 0x3e
    5464:	01 97       	sbiw	r24, 0x01	; 1
    5466:	9e af       	std	Y+62, r25	; 0x3e
    5468:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    546a:	8d ad       	ldd	r24, Y+61	; 0x3d
    546c:	9e ad       	ldd	r25, Y+62	; 0x3e
    546e:	00 97       	sbiw	r24, 0x00	; 0
    5470:	69 f7       	brne	.-38     	; 0x544c <SevenSegment_From0To9+0x88a>
    5472:	16 c0       	rjmp	.+44     	; 0x54a0 <SevenSegment_From0To9+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5474:	fe 01       	movw	r30, r28
    5476:	ff 96       	adiw	r30, 0x3f	; 63
    5478:	60 81       	ld	r22, Z
    547a:	71 81       	ldd	r23, Z+1	; 0x01
    547c:	82 81       	ldd	r24, Z+2	; 0x02
    547e:	93 81       	ldd	r25, Z+3	; 0x03
    5480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	9e af       	std	Y+62, r25	; 0x3e
    548a:	8d af       	std	Y+61, r24	; 0x3d
    548c:	8d ad       	ldd	r24, Y+61	; 0x3d
    548e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5490:	9a af       	std	Y+58, r25	; 0x3a
    5492:	89 af       	std	Y+57, r24	; 0x39
    5494:	89 ad       	ldd	r24, Y+57	; 0x39
    5496:	9a ad       	ldd	r25, Y+58	; 0x3a
    5498:	01 97       	sbiw	r24, 0x01	; 1
    549a:	f1 f7       	brne	.-4      	; 0x5498 <SevenSegment_From0To9+0x8d6>
    549c:	9a af       	std	Y+58, r25	; 0x3a
    549e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 1); // 6
    54a0:	fe 01       	movw	r30, r28
    54a2:	e3 57       	subi	r30, 0x73	; 115
    54a4:	ff 4f       	sbci	r31, 0xFF	; 255
    54a6:	80 81       	ld	r24, Z
    54a8:	61 e0       	ldi	r22, 0x01	; 1
    54aa:	40 e0       	ldi	r20, 0x00	; 0
    54ac:	21 e0       	ldi	r18, 0x01	; 1
    54ae:	01 e0       	ldi	r16, 0x01	; 1
    54b0:	ee 24       	eor	r14, r14
    54b2:	e3 94       	inc	r14
    54b4:	cc 24       	eor	r12, r12
    54b6:	c3 94       	inc	r12
    54b8:	aa 24       	eor	r10, r10
    54ba:	a3 94       	inc	r10
    54bc:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	a8 e4       	ldi	r26, 0x48	; 72
    54c6:	b2 e4       	ldi	r27, 0x42	; 66
    54c8:	8d ab       	std	Y+53, r24	; 0x35
    54ca:	9e ab       	std	Y+54, r25	; 0x36
    54cc:	af ab       	std	Y+55, r26	; 0x37
    54ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54d0:	6d a9       	ldd	r22, Y+53	; 0x35
    54d2:	7e a9       	ldd	r23, Y+54	; 0x36
    54d4:	8f a9       	ldd	r24, Y+55	; 0x37
    54d6:	98 ad       	ldd	r25, Y+56	; 0x38
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	4a e7       	ldi	r20, 0x7A	; 122
    54de:	55 e4       	ldi	r21, 0x45	; 69
    54e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	89 ab       	std	Y+49, r24	; 0x31
    54ea:	9a ab       	std	Y+50, r25	; 0x32
    54ec:	ab ab       	std	Y+51, r26	; 0x33
    54ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    54f0:	69 a9       	ldd	r22, Y+49	; 0x31
    54f2:	7a a9       	ldd	r23, Y+50	; 0x32
    54f4:	8b a9       	ldd	r24, Y+51	; 0x33
    54f6:	9c a9       	ldd	r25, Y+52	; 0x34
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	40 e8       	ldi	r20, 0x80	; 128
    54fe:	5f e3       	ldi	r21, 0x3F	; 63
    5500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5504:	88 23       	and	r24, r24
    5506:	2c f4       	brge	.+10     	; 0x5512 <SevenSegment_From0To9+0x950>
		__ticks = 1;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	98 ab       	std	Y+48, r25	; 0x30
    550e:	8f a7       	std	Y+47, r24	; 0x2f
    5510:	3f c0       	rjmp	.+126    	; 0x5590 <SevenSegment_From0To9+0x9ce>
	else if (__tmp > 65535)
    5512:	69 a9       	ldd	r22, Y+49	; 0x31
    5514:	7a a9       	ldd	r23, Y+50	; 0x32
    5516:	8b a9       	ldd	r24, Y+51	; 0x33
    5518:	9c a9       	ldd	r25, Y+52	; 0x34
    551a:	20 e0       	ldi	r18, 0x00	; 0
    551c:	3f ef       	ldi	r19, 0xFF	; 255
    551e:	4f e7       	ldi	r20, 0x7F	; 127
    5520:	57 e4       	ldi	r21, 0x47	; 71
    5522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5526:	18 16       	cp	r1, r24
    5528:	4c f5       	brge	.+82     	; 0x557c <SevenSegment_From0To9+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    552a:	6d a9       	ldd	r22, Y+53	; 0x35
    552c:	7e a9       	ldd	r23, Y+54	; 0x36
    552e:	8f a9       	ldd	r24, Y+55	; 0x37
    5530:	98 ad       	ldd	r25, Y+56	; 0x38
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	40 e2       	ldi	r20, 0x20	; 32
    5538:	51 e4       	ldi	r21, 0x41	; 65
    553a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	bc 01       	movw	r22, r24
    5544:	cd 01       	movw	r24, r26
    5546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    554a:	dc 01       	movw	r26, r24
    554c:	cb 01       	movw	r24, r22
    554e:	98 ab       	std	Y+48, r25	; 0x30
    5550:	8f a7       	std	Y+47, r24	; 0x2f
    5552:	0f c0       	rjmp	.+30     	; 0x5572 <SevenSegment_From0To9+0x9b0>
    5554:	80 e9       	ldi	r24, 0x90	; 144
    5556:	91 e0       	ldi	r25, 0x01	; 1
    5558:	9e a7       	std	Y+46, r25	; 0x2e
    555a:	8d a7       	std	Y+45, r24	; 0x2d
    555c:	8d a5       	ldd	r24, Y+45	; 0x2d
    555e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5560:	01 97       	sbiw	r24, 0x01	; 1
    5562:	f1 f7       	brne	.-4      	; 0x5560 <SevenSegment_From0To9+0x99e>
    5564:	9e a7       	std	Y+46, r25	; 0x2e
    5566:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5568:	8f a5       	ldd	r24, Y+47	; 0x2f
    556a:	98 a9       	ldd	r25, Y+48	; 0x30
    556c:	01 97       	sbiw	r24, 0x01	; 1
    556e:	98 ab       	std	Y+48, r25	; 0x30
    5570:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5572:	8f a5       	ldd	r24, Y+47	; 0x2f
    5574:	98 a9       	ldd	r25, Y+48	; 0x30
    5576:	00 97       	sbiw	r24, 0x00	; 0
    5578:	69 f7       	brne	.-38     	; 0x5554 <SevenSegment_From0To9+0x992>
    557a:	14 c0       	rjmp	.+40     	; 0x55a4 <SevenSegment_From0To9+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    557c:	69 a9       	ldd	r22, Y+49	; 0x31
    557e:	7a a9       	ldd	r23, Y+50	; 0x32
    5580:	8b a9       	ldd	r24, Y+51	; 0x33
    5582:	9c a9       	ldd	r25, Y+52	; 0x34
    5584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5588:	dc 01       	movw	r26, r24
    558a:	cb 01       	movw	r24, r22
    558c:	98 ab       	std	Y+48, r25	; 0x30
    558e:	8f a7       	std	Y+47, r24	; 0x2f
    5590:	8f a5       	ldd	r24, Y+47	; 0x2f
    5592:	98 a9       	ldd	r25, Y+48	; 0x30
    5594:	9c a7       	std	Y+44, r25	; 0x2c
    5596:	8b a7       	std	Y+43, r24	; 0x2b
    5598:	8b a5       	ldd	r24, Y+43	; 0x2b
    559a:	9c a5       	ldd	r25, Y+44	; 0x2c
    559c:	01 97       	sbiw	r24, 0x01	; 1
    559e:	f1 f7       	brne	.-4      	; 0x559c <SevenSegment_From0To9+0x9da>
    55a0:	9c a7       	std	Y+44, r25	; 0x2c
    55a2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 0, 0, 0); // 7
    55a4:	fe 01       	movw	r30, r28
    55a6:	e3 57       	subi	r30, 0x73	; 115
    55a8:	ff 4f       	sbci	r31, 0xFF	; 255
    55aa:	80 81       	ld	r24, Z
    55ac:	61 e0       	ldi	r22, 0x01	; 1
    55ae:	41 e0       	ldi	r20, 0x01	; 1
    55b0:	21 e0       	ldi	r18, 0x01	; 1
    55b2:	00 e0       	ldi	r16, 0x00	; 0
    55b4:	ee 24       	eor	r14, r14
    55b6:	cc 24       	eor	r12, r12
    55b8:	aa 24       	eor	r10, r10
    55ba:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    55be:	80 e0       	ldi	r24, 0x00	; 0
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	a8 e4       	ldi	r26, 0x48	; 72
    55c4:	b2 e4       	ldi	r27, 0x42	; 66
    55c6:	8f a3       	std	Y+39, r24	; 0x27
    55c8:	98 a7       	std	Y+40, r25	; 0x28
    55ca:	a9 a7       	std	Y+41, r26	; 0x29
    55cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ce:	6f a1       	ldd	r22, Y+39	; 0x27
    55d0:	78 a5       	ldd	r23, Y+40	; 0x28
    55d2:	89 a5       	ldd	r24, Y+41	; 0x29
    55d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	4a e7       	ldi	r20, 0x7A	; 122
    55dc:	55 e4       	ldi	r21, 0x45	; 69
    55de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	8b a3       	std	Y+35, r24	; 0x23
    55e8:	9c a3       	std	Y+36, r25	; 0x24
    55ea:	ad a3       	std	Y+37, r26	; 0x25
    55ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    55ee:	6b a1       	ldd	r22, Y+35	; 0x23
    55f0:	7c a1       	ldd	r23, Y+36	; 0x24
    55f2:	8d a1       	ldd	r24, Y+37	; 0x25
    55f4:	9e a1       	ldd	r25, Y+38	; 0x26
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	40 e8       	ldi	r20, 0x80	; 128
    55fc:	5f e3       	ldi	r21, 0x3F	; 63
    55fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5602:	88 23       	and	r24, r24
    5604:	2c f4       	brge	.+10     	; 0x5610 <SevenSegment_From0To9+0xa4e>
		__ticks = 1;
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	9a a3       	std	Y+34, r25	; 0x22
    560c:	89 a3       	std	Y+33, r24	; 0x21
    560e:	3f c0       	rjmp	.+126    	; 0x568e <SevenSegment_From0To9+0xacc>
	else if (__tmp > 65535)
    5610:	6b a1       	ldd	r22, Y+35	; 0x23
    5612:	7c a1       	ldd	r23, Y+36	; 0x24
    5614:	8d a1       	ldd	r24, Y+37	; 0x25
    5616:	9e a1       	ldd	r25, Y+38	; 0x26
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	3f ef       	ldi	r19, 0xFF	; 255
    561c:	4f e7       	ldi	r20, 0x7F	; 127
    561e:	57 e4       	ldi	r21, 0x47	; 71
    5620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5624:	18 16       	cp	r1, r24
    5626:	4c f5       	brge	.+82     	; 0x567a <SevenSegment_From0To9+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5628:	6f a1       	ldd	r22, Y+39	; 0x27
    562a:	78 a5       	ldd	r23, Y+40	; 0x28
    562c:	89 a5       	ldd	r24, Y+41	; 0x29
    562e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	30 e0       	ldi	r19, 0x00	; 0
    5634:	40 e2       	ldi	r20, 0x20	; 32
    5636:	51 e4       	ldi	r21, 0x41	; 65
    5638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    563c:	dc 01       	movw	r26, r24
    563e:	cb 01       	movw	r24, r22
    5640:	bc 01       	movw	r22, r24
    5642:	cd 01       	movw	r24, r26
    5644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	9a a3       	std	Y+34, r25	; 0x22
    564e:	89 a3       	std	Y+33, r24	; 0x21
    5650:	0f c0       	rjmp	.+30     	; 0x5670 <SevenSegment_From0To9+0xaae>
    5652:	80 e9       	ldi	r24, 0x90	; 144
    5654:	91 e0       	ldi	r25, 0x01	; 1
    5656:	98 a3       	std	Y+32, r25	; 0x20
    5658:	8f 8f       	std	Y+31, r24	; 0x1f
    565a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    565c:	98 a1       	ldd	r25, Y+32	; 0x20
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	f1 f7       	brne	.-4      	; 0x565e <SevenSegment_From0To9+0xa9c>
    5662:	98 a3       	std	Y+32, r25	; 0x20
    5664:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5666:	89 a1       	ldd	r24, Y+33	; 0x21
    5668:	9a a1       	ldd	r25, Y+34	; 0x22
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	9a a3       	std	Y+34, r25	; 0x22
    566e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5670:	89 a1       	ldd	r24, Y+33	; 0x21
    5672:	9a a1       	ldd	r25, Y+34	; 0x22
    5674:	00 97       	sbiw	r24, 0x00	; 0
    5676:	69 f7       	brne	.-38     	; 0x5652 <SevenSegment_From0To9+0xa90>
    5678:	14 c0       	rjmp	.+40     	; 0x56a2 <SevenSegment_From0To9+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567a:	6b a1       	ldd	r22, Y+35	; 0x23
    567c:	7c a1       	ldd	r23, Y+36	; 0x24
    567e:	8d a1       	ldd	r24, Y+37	; 0x25
    5680:	9e a1       	ldd	r25, Y+38	; 0x26
    5682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5686:	dc 01       	movw	r26, r24
    5688:	cb 01       	movw	r24, r22
    568a:	9a a3       	std	Y+34, r25	; 0x22
    568c:	89 a3       	std	Y+33, r24	; 0x21
    568e:	89 a1       	ldd	r24, Y+33	; 0x21
    5690:	9a a1       	ldd	r25, Y+34	; 0x22
    5692:	9e 8f       	std	Y+30, r25	; 0x1e
    5694:	8d 8f       	std	Y+29, r24	; 0x1d
    5696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5698:	9e 8d       	ldd	r25, Y+30	; 0x1e
    569a:	01 97       	sbiw	r24, 0x01	; 1
    569c:	f1 f7       	brne	.-4      	; 0x569a <SevenSegment_From0To9+0xad8>
    569e:	9e 8f       	std	Y+30, r25	; 0x1e
    56a0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 1); // 8
    56a2:	fe 01       	movw	r30, r28
    56a4:	e3 57       	subi	r30, 0x73	; 115
    56a6:	ff 4f       	sbci	r31, 0xFF	; 255
    56a8:	80 81       	ld	r24, Z
    56aa:	61 e0       	ldi	r22, 0x01	; 1
    56ac:	41 e0       	ldi	r20, 0x01	; 1
    56ae:	21 e0       	ldi	r18, 0x01	; 1
    56b0:	01 e0       	ldi	r16, 0x01	; 1
    56b2:	ee 24       	eor	r14, r14
    56b4:	e3 94       	inc	r14
    56b6:	cc 24       	eor	r12, r12
    56b8:	c3 94       	inc	r12
    56ba:	aa 24       	eor	r10, r10
    56bc:	a3 94       	inc	r10
    56be:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	a8 e4       	ldi	r26, 0x48	; 72
    56c8:	b2 e4       	ldi	r27, 0x42	; 66
    56ca:	89 8f       	std	Y+25, r24	; 0x19
    56cc:	9a 8f       	std	Y+26, r25	; 0x1a
    56ce:	ab 8f       	std	Y+27, r26	; 0x1b
    56d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56d2:	69 8d       	ldd	r22, Y+25	; 0x19
    56d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	30 e0       	ldi	r19, 0x00	; 0
    56de:	4a e7       	ldi	r20, 0x7A	; 122
    56e0:	55 e4       	ldi	r21, 0x45	; 69
    56e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56e6:	dc 01       	movw	r26, r24
    56e8:	cb 01       	movw	r24, r22
    56ea:	8d 8b       	std	Y+21, r24	; 0x15
    56ec:	9e 8b       	std	Y+22, r25	; 0x16
    56ee:	af 8b       	std	Y+23, r26	; 0x17
    56f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56f2:	6d 89       	ldd	r22, Y+21	; 0x15
    56f4:	7e 89       	ldd	r23, Y+22	; 0x16
    56f6:	8f 89       	ldd	r24, Y+23	; 0x17
    56f8:	98 8d       	ldd	r25, Y+24	; 0x18
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	40 e8       	ldi	r20, 0x80	; 128
    5700:	5f e3       	ldi	r21, 0x3F	; 63
    5702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5706:	88 23       	and	r24, r24
    5708:	2c f4       	brge	.+10     	; 0x5714 <SevenSegment_From0To9+0xb52>
		__ticks = 1;
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	9c 8b       	std	Y+20, r25	; 0x14
    5710:	8b 8b       	std	Y+19, r24	; 0x13
    5712:	3f c0       	rjmp	.+126    	; 0x5792 <SevenSegment_From0To9+0xbd0>
	else if (__tmp > 65535)
    5714:	6d 89       	ldd	r22, Y+21	; 0x15
    5716:	7e 89       	ldd	r23, Y+22	; 0x16
    5718:	8f 89       	ldd	r24, Y+23	; 0x17
    571a:	98 8d       	ldd	r25, Y+24	; 0x18
    571c:	20 e0       	ldi	r18, 0x00	; 0
    571e:	3f ef       	ldi	r19, 0xFF	; 255
    5720:	4f e7       	ldi	r20, 0x7F	; 127
    5722:	57 e4       	ldi	r21, 0x47	; 71
    5724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5728:	18 16       	cp	r1, r24
    572a:	4c f5       	brge	.+82     	; 0x577e <SevenSegment_From0To9+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    572c:	69 8d       	ldd	r22, Y+25	; 0x19
    572e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5732:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5734:	20 e0       	ldi	r18, 0x00	; 0
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	40 e2       	ldi	r20, 0x20	; 32
    573a:	51 e4       	ldi	r21, 0x41	; 65
    573c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5740:	dc 01       	movw	r26, r24
    5742:	cb 01       	movw	r24, r22
    5744:	bc 01       	movw	r22, r24
    5746:	cd 01       	movw	r24, r26
    5748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    574c:	dc 01       	movw	r26, r24
    574e:	cb 01       	movw	r24, r22
    5750:	9c 8b       	std	Y+20, r25	; 0x14
    5752:	8b 8b       	std	Y+19, r24	; 0x13
    5754:	0f c0       	rjmp	.+30     	; 0x5774 <SevenSegment_From0To9+0xbb2>
    5756:	80 e9       	ldi	r24, 0x90	; 144
    5758:	91 e0       	ldi	r25, 0x01	; 1
    575a:	9a 8b       	std	Y+18, r25	; 0x12
    575c:	89 8b       	std	Y+17, r24	; 0x11
    575e:	89 89       	ldd	r24, Y+17	; 0x11
    5760:	9a 89       	ldd	r25, Y+18	; 0x12
    5762:	01 97       	sbiw	r24, 0x01	; 1
    5764:	f1 f7       	brne	.-4      	; 0x5762 <SevenSegment_From0To9+0xba0>
    5766:	9a 8b       	std	Y+18, r25	; 0x12
    5768:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    576a:	8b 89       	ldd	r24, Y+19	; 0x13
    576c:	9c 89       	ldd	r25, Y+20	; 0x14
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	9c 8b       	std	Y+20, r25	; 0x14
    5772:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5774:	8b 89       	ldd	r24, Y+19	; 0x13
    5776:	9c 89       	ldd	r25, Y+20	; 0x14
    5778:	00 97       	sbiw	r24, 0x00	; 0
    577a:	69 f7       	brne	.-38     	; 0x5756 <SevenSegment_From0To9+0xb94>
    577c:	14 c0       	rjmp	.+40     	; 0x57a6 <SevenSegment_From0To9+0xbe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    577e:	6d 89       	ldd	r22, Y+21	; 0x15
    5780:	7e 89       	ldd	r23, Y+22	; 0x16
    5782:	8f 89       	ldd	r24, Y+23	; 0x17
    5784:	98 8d       	ldd	r25, Y+24	; 0x18
    5786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    578a:	dc 01       	movw	r26, r24
    578c:	cb 01       	movw	r24, r22
    578e:	9c 8b       	std	Y+20, r25	; 0x14
    5790:	8b 8b       	std	Y+19, r24	; 0x13
    5792:	8b 89       	ldd	r24, Y+19	; 0x13
    5794:	9c 89       	ldd	r25, Y+20	; 0x14
    5796:	98 8b       	std	Y+16, r25	; 0x10
    5798:	8f 87       	std	Y+15, r24	; 0x0f
    579a:	8f 85       	ldd	r24, Y+15	; 0x0f
    579c:	98 89       	ldd	r25, Y+16	; 0x10
    579e:	01 97       	sbiw	r24, 0x01	; 1
    57a0:	f1 f7       	brne	.-4      	; 0x579e <SevenSegment_From0To9+0xbdc>
    57a2:	98 8b       	std	Y+16, r25	; 0x10
    57a4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 1, 1); // 9
    57a6:	fe 01       	movw	r30, r28
    57a8:	e3 57       	subi	r30, 0x73	; 115
    57aa:	ff 4f       	sbci	r31, 0xFF	; 255
    57ac:	80 81       	ld	r24, Z
    57ae:	61 e0       	ldi	r22, 0x01	; 1
    57b0:	41 e0       	ldi	r20, 0x01	; 1
    57b2:	21 e0       	ldi	r18, 0x01	; 1
    57b4:	01 e0       	ldi	r16, 0x01	; 1
    57b6:	ee 24       	eor	r14, r14
    57b8:	cc 24       	eor	r12, r12
    57ba:	c3 94       	inc	r12
    57bc:	aa 24       	eor	r10, r10
    57be:	a3 94       	inc	r10
    57c0:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	a8 e4       	ldi	r26, 0x48	; 72
    57ca:	b2 e4       	ldi	r27, 0x42	; 66
    57cc:	8b 87       	std	Y+11, r24	; 0x0b
    57ce:	9c 87       	std	Y+12, r25	; 0x0c
    57d0:	ad 87       	std	Y+13, r26	; 0x0d
    57d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    57d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    57d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    57da:	9e 85       	ldd	r25, Y+14	; 0x0e
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	4a e7       	ldi	r20, 0x7A	; 122
    57e2:	55 e4       	ldi	r21, 0x45	; 69
    57e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	8f 83       	std	Y+7, r24	; 0x07
    57ee:	98 87       	std	Y+8, r25	; 0x08
    57f0:	a9 87       	std	Y+9, r26	; 0x09
    57f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57f4:	6f 81       	ldd	r22, Y+7	; 0x07
    57f6:	78 85       	ldd	r23, Y+8	; 0x08
    57f8:	89 85       	ldd	r24, Y+9	; 0x09
    57fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	40 e8       	ldi	r20, 0x80	; 128
    5802:	5f e3       	ldi	r21, 0x3F	; 63
    5804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5808:	88 23       	and	r24, r24
    580a:	2c f4       	brge	.+10     	; 0x5816 <SevenSegment_From0To9+0xc54>
		__ticks = 1;
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	9e 83       	std	Y+6, r25	; 0x06
    5812:	8d 83       	std	Y+5, r24	; 0x05
    5814:	3f c0       	rjmp	.+126    	; 0x5894 <SevenSegment_From0To9+0xcd2>
	else if (__tmp > 65535)
    5816:	6f 81       	ldd	r22, Y+7	; 0x07
    5818:	78 85       	ldd	r23, Y+8	; 0x08
    581a:	89 85       	ldd	r24, Y+9	; 0x09
    581c:	9a 85       	ldd	r25, Y+10	; 0x0a
    581e:	20 e0       	ldi	r18, 0x00	; 0
    5820:	3f ef       	ldi	r19, 0xFF	; 255
    5822:	4f e7       	ldi	r20, 0x7F	; 127
    5824:	57 e4       	ldi	r21, 0x47	; 71
    5826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    582a:	18 16       	cp	r1, r24
    582c:	4c f5       	brge	.+82     	; 0x5880 <SevenSegment_From0To9+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    582e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5830:	7c 85       	ldd	r23, Y+12	; 0x0c
    5832:	8d 85       	ldd	r24, Y+13	; 0x0d
    5834:	9e 85       	ldd	r25, Y+14	; 0x0e
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e2       	ldi	r20, 0x20	; 32
    583c:	51 e4       	ldi	r21, 0x41	; 65
    583e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	9e 83       	std	Y+6, r25	; 0x06
    5854:	8d 83       	std	Y+5, r24	; 0x05
    5856:	0f c0       	rjmp	.+30     	; 0x5876 <SevenSegment_From0To9+0xcb4>
    5858:	80 e9       	ldi	r24, 0x90	; 144
    585a:	91 e0       	ldi	r25, 0x01	; 1
    585c:	9c 83       	std	Y+4, r25	; 0x04
    585e:	8b 83       	std	Y+3, r24	; 0x03
    5860:	8b 81       	ldd	r24, Y+3	; 0x03
    5862:	9c 81       	ldd	r25, Y+4	; 0x04
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <SevenSegment_From0To9+0xca2>
    5868:	9c 83       	std	Y+4, r25	; 0x04
    586a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    586c:	8d 81       	ldd	r24, Y+5	; 0x05
    586e:	9e 81       	ldd	r25, Y+6	; 0x06
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	9e 83       	std	Y+6, r25	; 0x06
    5874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5876:	8d 81       	ldd	r24, Y+5	; 0x05
    5878:	9e 81       	ldd	r25, Y+6	; 0x06
    587a:	00 97       	sbiw	r24, 0x00	; 0
    587c:	69 f7       	brne	.-38     	; 0x5858 <SevenSegment_From0To9+0xc96>
    587e:	b5 c9       	rjmp	.-3222   	; 0x4bea <SevenSegment_From0To9+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5880:	6f 81       	ldd	r22, Y+7	; 0x07
    5882:	78 85       	ldd	r23, Y+8	; 0x08
    5884:	89 85       	ldd	r24, Y+9	; 0x09
    5886:	9a 85       	ldd	r25, Y+10	; 0x0a
    5888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	9e 83       	std	Y+6, r25	; 0x06
    5892:	8d 83       	std	Y+5, r24	; 0x05
    5894:	8d 81       	ldd	r24, Y+5	; 0x05
    5896:	9e 81       	ldd	r25, Y+6	; 0x06
    5898:	9a 83       	std	Y+2, r25	; 0x02
    589a:	89 83       	std	Y+1, r24	; 0x01
    589c:	89 81       	ldd	r24, Y+1	; 0x01
    589e:	9a 81       	ldd	r25, Y+2	; 0x02
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	f1 f7       	brne	.-4      	; 0x58a0 <SevenSegment_From0To9+0xcde>
    58a4:	9a 83       	std	Y+2, r25	; 0x02
    58a6:	89 83       	std	Y+1, r24	; 0x01
    58a8:	a0 c9       	rjmp	.-3264   	; 0x4bea <SevenSegment_From0To9+0x28>

000058aa <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(u8 Copy_u8PortId){
    58aa:	af 92       	push	r10
    58ac:	cf 92       	push	r12
    58ae:	ef 92       	push	r14
    58b0:	0f 93       	push	r16
    58b2:	1f 93       	push	r17
    58b4:	df 93       	push	r29
    58b6:	cf 93       	push	r28
    58b8:	cd b7       	in	r28, 0x3d	; 61
    58ba:	de b7       	in	r29, 0x3e	; 62
    58bc:	c1 57       	subi	r28, 0x71	; 113
    58be:	d0 40       	sbci	r29, 0x00	; 0
    58c0:	0f b6       	in	r0, 0x3f	; 63
    58c2:	f8 94       	cli
    58c4:	de bf       	out	0x3e, r29	; 62
    58c6:	0f be       	out	0x3f, r0	; 63
    58c8:	cd bf       	out	0x3d, r28	; 61
    58ca:	fe 01       	movw	r30, r28
    58cc:	ef 58       	subi	r30, 0x8F	; 143
    58ce:	ff 4f       	sbci	r31, 0xFF	; 255
    58d0:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 1, 1, 1); // A
    58d2:	fe 01       	movw	r30, r28
    58d4:	ef 58       	subi	r30, 0x8F	; 143
    58d6:	ff 4f       	sbci	r31, 0xFF	; 255
    58d8:	80 81       	ld	r24, Z
    58da:	61 e0       	ldi	r22, 0x01	; 1
    58dc:	41 e0       	ldi	r20, 0x01	; 1
    58de:	21 e0       	ldi	r18, 0x01	; 1
    58e0:	00 e0       	ldi	r16, 0x00	; 0
    58e2:	ee 24       	eor	r14, r14
    58e4:	e3 94       	inc	r14
    58e6:	cc 24       	eor	r12, r12
    58e8:	c3 94       	inc	r12
    58ea:	aa 24       	eor	r10, r10
    58ec:	a3 94       	inc	r10
    58ee:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    58f2:	fe 01       	movw	r30, r28
    58f4:	e3 59       	subi	r30, 0x93	; 147
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	a8 e4       	ldi	r26, 0x48	; 72
    58fe:	b2 e4       	ldi	r27, 0x42	; 66
    5900:	80 83       	st	Z, r24
    5902:	91 83       	std	Z+1, r25	; 0x01
    5904:	a2 83       	std	Z+2, r26	; 0x02
    5906:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5908:	8e 01       	movw	r16, r28
    590a:	07 59       	subi	r16, 0x97	; 151
    590c:	1f 4f       	sbci	r17, 0xFF	; 255
    590e:	fe 01       	movw	r30, r28
    5910:	e3 59       	subi	r30, 0x93	; 147
    5912:	ff 4f       	sbci	r31, 0xFF	; 255
    5914:	60 81       	ld	r22, Z
    5916:	71 81       	ldd	r23, Z+1	; 0x01
    5918:	82 81       	ldd	r24, Z+2	; 0x02
    591a:	93 81       	ldd	r25, Z+3	; 0x03
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	4a e7       	ldi	r20, 0x7A	; 122
    5922:	55 e4       	ldi	r21, 0x45	; 69
    5924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5928:	dc 01       	movw	r26, r24
    592a:	cb 01       	movw	r24, r22
    592c:	f8 01       	movw	r30, r16
    592e:	80 83       	st	Z, r24
    5930:	91 83       	std	Z+1, r25	; 0x01
    5932:	a2 83       	std	Z+2, r26	; 0x02
    5934:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5936:	fe 01       	movw	r30, r28
    5938:	e7 59       	subi	r30, 0x97	; 151
    593a:	ff 4f       	sbci	r31, 0xFF	; 255
    593c:	60 81       	ld	r22, Z
    593e:	71 81       	ldd	r23, Z+1	; 0x01
    5940:	82 81       	ldd	r24, Z+2	; 0x02
    5942:	93 81       	ldd	r25, Z+3	; 0x03
    5944:	20 e0       	ldi	r18, 0x00	; 0
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	40 e8       	ldi	r20, 0x80	; 128
    594a:	5f e3       	ldi	r21, 0x3F	; 63
    594c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5950:	88 23       	and	r24, r24
    5952:	44 f4       	brge	.+16     	; 0x5964 <SevenSegment_FromAToH+0xba>
		__ticks = 1;
    5954:	fe 01       	movw	r30, r28
    5956:	e9 59       	subi	r30, 0x99	; 153
    5958:	ff 4f       	sbci	r31, 0xFF	; 255
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	91 83       	std	Z+1, r25	; 0x01
    5960:	80 83       	st	Z, r24
    5962:	64 c0       	rjmp	.+200    	; 0x5a2c <SevenSegment_FromAToH+0x182>
	else if (__tmp > 65535)
    5964:	fe 01       	movw	r30, r28
    5966:	e7 59       	subi	r30, 0x97	; 151
    5968:	ff 4f       	sbci	r31, 0xFF	; 255
    596a:	60 81       	ld	r22, Z
    596c:	71 81       	ldd	r23, Z+1	; 0x01
    596e:	82 81       	ldd	r24, Z+2	; 0x02
    5970:	93 81       	ldd	r25, Z+3	; 0x03
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	3f ef       	ldi	r19, 0xFF	; 255
    5976:	4f e7       	ldi	r20, 0x7F	; 127
    5978:	57 e4       	ldi	r21, 0x47	; 71
    597a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    597e:	18 16       	cp	r1, r24
    5980:	0c f0       	brlt	.+2      	; 0x5984 <SevenSegment_FromAToH+0xda>
    5982:	43 c0       	rjmp	.+134    	; 0x5a0a <SevenSegment_FromAToH+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5984:	fe 01       	movw	r30, r28
    5986:	e3 59       	subi	r30, 0x93	; 147
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	60 81       	ld	r22, Z
    598c:	71 81       	ldd	r23, Z+1	; 0x01
    598e:	82 81       	ldd	r24, Z+2	; 0x02
    5990:	93 81       	ldd	r25, Z+3	; 0x03
    5992:	20 e0       	ldi	r18, 0x00	; 0
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	40 e2       	ldi	r20, 0x20	; 32
    5998:	51 e4       	ldi	r21, 0x41	; 65
    599a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    599e:	dc 01       	movw	r26, r24
    59a0:	cb 01       	movw	r24, r22
    59a2:	8e 01       	movw	r16, r28
    59a4:	09 59       	subi	r16, 0x99	; 153
    59a6:	1f 4f       	sbci	r17, 0xFF	; 255
    59a8:	bc 01       	movw	r22, r24
    59aa:	cd 01       	movw	r24, r26
    59ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	f8 01       	movw	r30, r16
    59b6:	91 83       	std	Z+1, r25	; 0x01
    59b8:	80 83       	st	Z, r24
    59ba:	1f c0       	rjmp	.+62     	; 0x59fa <SevenSegment_FromAToH+0x150>
    59bc:	fe 01       	movw	r30, r28
    59be:	eb 59       	subi	r30, 0x9B	; 155
    59c0:	ff 4f       	sbci	r31, 0xFF	; 255
    59c2:	80 e9       	ldi	r24, 0x90	; 144
    59c4:	91 e0       	ldi	r25, 0x01	; 1
    59c6:	91 83       	std	Z+1, r25	; 0x01
    59c8:	80 83       	st	Z, r24
    59ca:	fe 01       	movw	r30, r28
    59cc:	eb 59       	subi	r30, 0x9B	; 155
    59ce:	ff 4f       	sbci	r31, 0xFF	; 255
    59d0:	80 81       	ld	r24, Z
    59d2:	91 81       	ldd	r25, Z+1	; 0x01
    59d4:	01 97       	sbiw	r24, 0x01	; 1
    59d6:	f1 f7       	brne	.-4      	; 0x59d4 <SevenSegment_FromAToH+0x12a>
    59d8:	fe 01       	movw	r30, r28
    59da:	eb 59       	subi	r30, 0x9B	; 155
    59dc:	ff 4f       	sbci	r31, 0xFF	; 255
    59de:	91 83       	std	Z+1, r25	; 0x01
    59e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e2:	de 01       	movw	r26, r28
    59e4:	a9 59       	subi	r26, 0x99	; 153
    59e6:	bf 4f       	sbci	r27, 0xFF	; 255
    59e8:	fe 01       	movw	r30, r28
    59ea:	e9 59       	subi	r30, 0x99	; 153
    59ec:	ff 4f       	sbci	r31, 0xFF	; 255
    59ee:	80 81       	ld	r24, Z
    59f0:	91 81       	ldd	r25, Z+1	; 0x01
    59f2:	01 97       	sbiw	r24, 0x01	; 1
    59f4:	11 96       	adiw	r26, 0x01	; 1
    59f6:	9c 93       	st	X, r25
    59f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59fa:	fe 01       	movw	r30, r28
    59fc:	e9 59       	subi	r30, 0x99	; 153
    59fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5a00:	80 81       	ld	r24, Z
    5a02:	91 81       	ldd	r25, Z+1	; 0x01
    5a04:	00 97       	sbiw	r24, 0x00	; 0
    5a06:	d1 f6       	brne	.-76     	; 0x59bc <SevenSegment_FromAToH+0x112>
    5a08:	27 c0       	rjmp	.+78     	; 0x5a58 <SevenSegment_FromAToH+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a0a:	8e 01       	movw	r16, r28
    5a0c:	09 59       	subi	r16, 0x99	; 153
    5a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a10:	fe 01       	movw	r30, r28
    5a12:	e7 59       	subi	r30, 0x97	; 151
    5a14:	ff 4f       	sbci	r31, 0xFF	; 255
    5a16:	60 81       	ld	r22, Z
    5a18:	71 81       	ldd	r23, Z+1	; 0x01
    5a1a:	82 81       	ldd	r24, Z+2	; 0x02
    5a1c:	93 81       	ldd	r25, Z+3	; 0x03
    5a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a22:	dc 01       	movw	r26, r24
    5a24:	cb 01       	movw	r24, r22
    5a26:	f8 01       	movw	r30, r16
    5a28:	91 83       	std	Z+1, r25	; 0x01
    5a2a:	80 83       	st	Z, r24
    5a2c:	de 01       	movw	r26, r28
    5a2e:	ad 59       	subi	r26, 0x9D	; 157
    5a30:	bf 4f       	sbci	r27, 0xFF	; 255
    5a32:	fe 01       	movw	r30, r28
    5a34:	e9 59       	subi	r30, 0x99	; 153
    5a36:	ff 4f       	sbci	r31, 0xFF	; 255
    5a38:	80 81       	ld	r24, Z
    5a3a:	91 81       	ldd	r25, Z+1	; 0x01
    5a3c:	8d 93       	st	X+, r24
    5a3e:	9c 93       	st	X, r25
    5a40:	fe 01       	movw	r30, r28
    5a42:	ed 59       	subi	r30, 0x9D	; 157
    5a44:	ff 4f       	sbci	r31, 0xFF	; 255
    5a46:	80 81       	ld	r24, Z
    5a48:	91 81       	ldd	r25, Z+1	; 0x01
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	f1 f7       	brne	.-4      	; 0x5a4a <SevenSegment_FromAToH+0x1a0>
    5a4e:	fe 01       	movw	r30, r28
    5a50:	ed 59       	subi	r30, 0x9D	; 157
    5a52:	ff 4f       	sbci	r31, 0xFF	; 255
    5a54:	91 83       	std	Z+1, r25	; 0x01
    5a56:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 0, 1, 1, 1, 1, 1); // B
    5a58:	fe 01       	movw	r30, r28
    5a5a:	ef 58       	subi	r30, 0x8F	; 143
    5a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5e:	80 81       	ld	r24, Z
    5a60:	60 e0       	ldi	r22, 0x00	; 0
    5a62:	40 e0       	ldi	r20, 0x00	; 0
    5a64:	21 e0       	ldi	r18, 0x01	; 1
    5a66:	01 e0       	ldi	r16, 0x01	; 1
    5a68:	ee 24       	eor	r14, r14
    5a6a:	e3 94       	inc	r14
    5a6c:	cc 24       	eor	r12, r12
    5a6e:	c3 94       	inc	r12
    5a70:	aa 24       	eor	r10, r10
    5a72:	a3 94       	inc	r10
    5a74:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5a78:	fe 01       	movw	r30, r28
    5a7a:	e1 5a       	subi	r30, 0xA1	; 161
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	80 e0       	ldi	r24, 0x00	; 0
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	a8 e4       	ldi	r26, 0x48	; 72
    5a84:	b2 e4       	ldi	r27, 0x42	; 66
    5a86:	80 83       	st	Z, r24
    5a88:	91 83       	std	Z+1, r25	; 0x01
    5a8a:	a2 83       	std	Z+2, r26	; 0x02
    5a8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a8e:	8e 01       	movw	r16, r28
    5a90:	05 5a       	subi	r16, 0xA5	; 165
    5a92:	1f 4f       	sbci	r17, 0xFF	; 255
    5a94:	fe 01       	movw	r30, r28
    5a96:	e1 5a       	subi	r30, 0xA1	; 161
    5a98:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9a:	60 81       	ld	r22, Z
    5a9c:	71 81       	ldd	r23, Z+1	; 0x01
    5a9e:	82 81       	ldd	r24, Z+2	; 0x02
    5aa0:	93 81       	ldd	r25, Z+3	; 0x03
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	4a e7       	ldi	r20, 0x7A	; 122
    5aa8:	55 e4       	ldi	r21, 0x45	; 69
    5aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aae:	dc 01       	movw	r26, r24
    5ab0:	cb 01       	movw	r24, r22
    5ab2:	f8 01       	movw	r30, r16
    5ab4:	80 83       	st	Z, r24
    5ab6:	91 83       	std	Z+1, r25	; 0x01
    5ab8:	a2 83       	std	Z+2, r26	; 0x02
    5aba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5abc:	fe 01       	movw	r30, r28
    5abe:	e5 5a       	subi	r30, 0xA5	; 165
    5ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac2:	60 81       	ld	r22, Z
    5ac4:	71 81       	ldd	r23, Z+1	; 0x01
    5ac6:	82 81       	ldd	r24, Z+2	; 0x02
    5ac8:	93 81       	ldd	r25, Z+3	; 0x03
    5aca:	20 e0       	ldi	r18, 0x00	; 0
    5acc:	30 e0       	ldi	r19, 0x00	; 0
    5ace:	40 e8       	ldi	r20, 0x80	; 128
    5ad0:	5f e3       	ldi	r21, 0x3F	; 63
    5ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ad6:	88 23       	and	r24, r24
    5ad8:	44 f4       	brge	.+16     	; 0x5aea <SevenSegment_FromAToH+0x240>
		__ticks = 1;
    5ada:	fe 01       	movw	r30, r28
    5adc:	e7 5a       	subi	r30, 0xA7	; 167
    5ade:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	91 83       	std	Z+1, r25	; 0x01
    5ae6:	80 83       	st	Z, r24
    5ae8:	64 c0       	rjmp	.+200    	; 0x5bb2 <SevenSegment_FromAToH+0x308>
	else if (__tmp > 65535)
    5aea:	fe 01       	movw	r30, r28
    5aec:	e5 5a       	subi	r30, 0xA5	; 165
    5aee:	ff 4f       	sbci	r31, 0xFF	; 255
    5af0:	60 81       	ld	r22, Z
    5af2:	71 81       	ldd	r23, Z+1	; 0x01
    5af4:	82 81       	ldd	r24, Z+2	; 0x02
    5af6:	93 81       	ldd	r25, Z+3	; 0x03
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	3f ef       	ldi	r19, 0xFF	; 255
    5afc:	4f e7       	ldi	r20, 0x7F	; 127
    5afe:	57 e4       	ldi	r21, 0x47	; 71
    5b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b04:	18 16       	cp	r1, r24
    5b06:	0c f0       	brlt	.+2      	; 0x5b0a <SevenSegment_FromAToH+0x260>
    5b08:	43 c0       	rjmp	.+134    	; 0x5b90 <SevenSegment_FromAToH+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	e1 5a       	subi	r30, 0xA1	; 161
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	60 81       	ld	r22, Z
    5b12:	71 81       	ldd	r23, Z+1	; 0x01
    5b14:	82 81       	ldd	r24, Z+2	; 0x02
    5b16:	93 81       	ldd	r25, Z+3	; 0x03
    5b18:	20 e0       	ldi	r18, 0x00	; 0
    5b1a:	30 e0       	ldi	r19, 0x00	; 0
    5b1c:	40 e2       	ldi	r20, 0x20	; 32
    5b1e:	51 e4       	ldi	r21, 0x41	; 65
    5b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b24:	dc 01       	movw	r26, r24
    5b26:	cb 01       	movw	r24, r22
    5b28:	8e 01       	movw	r16, r28
    5b2a:	07 5a       	subi	r16, 0xA7	; 167
    5b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b2e:	bc 01       	movw	r22, r24
    5b30:	cd 01       	movw	r24, r26
    5b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b36:	dc 01       	movw	r26, r24
    5b38:	cb 01       	movw	r24, r22
    5b3a:	f8 01       	movw	r30, r16
    5b3c:	91 83       	std	Z+1, r25	; 0x01
    5b3e:	80 83       	st	Z, r24
    5b40:	1f c0       	rjmp	.+62     	; 0x5b80 <SevenSegment_FromAToH+0x2d6>
    5b42:	fe 01       	movw	r30, r28
    5b44:	e9 5a       	subi	r30, 0xA9	; 169
    5b46:	ff 4f       	sbci	r31, 0xFF	; 255
    5b48:	80 e9       	ldi	r24, 0x90	; 144
    5b4a:	91 e0       	ldi	r25, 0x01	; 1
    5b4c:	91 83       	std	Z+1, r25	; 0x01
    5b4e:	80 83       	st	Z, r24
    5b50:	fe 01       	movw	r30, r28
    5b52:	e9 5a       	subi	r30, 0xA9	; 169
    5b54:	ff 4f       	sbci	r31, 0xFF	; 255
    5b56:	80 81       	ld	r24, Z
    5b58:	91 81       	ldd	r25, Z+1	; 0x01
    5b5a:	01 97       	sbiw	r24, 0x01	; 1
    5b5c:	f1 f7       	brne	.-4      	; 0x5b5a <SevenSegment_FromAToH+0x2b0>
    5b5e:	fe 01       	movw	r30, r28
    5b60:	e9 5a       	subi	r30, 0xA9	; 169
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	91 83       	std	Z+1, r25	; 0x01
    5b66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b68:	de 01       	movw	r26, r28
    5b6a:	a7 5a       	subi	r26, 0xA7	; 167
    5b6c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b6e:	fe 01       	movw	r30, r28
    5b70:	e7 5a       	subi	r30, 0xA7	; 167
    5b72:	ff 4f       	sbci	r31, 0xFF	; 255
    5b74:	80 81       	ld	r24, Z
    5b76:	91 81       	ldd	r25, Z+1	; 0x01
    5b78:	01 97       	sbiw	r24, 0x01	; 1
    5b7a:	11 96       	adiw	r26, 0x01	; 1
    5b7c:	9c 93       	st	X, r25
    5b7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b80:	fe 01       	movw	r30, r28
    5b82:	e7 5a       	subi	r30, 0xA7	; 167
    5b84:	ff 4f       	sbci	r31, 0xFF	; 255
    5b86:	80 81       	ld	r24, Z
    5b88:	91 81       	ldd	r25, Z+1	; 0x01
    5b8a:	00 97       	sbiw	r24, 0x00	; 0
    5b8c:	d1 f6       	brne	.-76     	; 0x5b42 <SevenSegment_FromAToH+0x298>
    5b8e:	27 c0       	rjmp	.+78     	; 0x5bde <SevenSegment_FromAToH+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b90:	8e 01       	movw	r16, r28
    5b92:	07 5a       	subi	r16, 0xA7	; 167
    5b94:	1f 4f       	sbci	r17, 0xFF	; 255
    5b96:	fe 01       	movw	r30, r28
    5b98:	e5 5a       	subi	r30, 0xA5	; 165
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	60 81       	ld	r22, Z
    5b9e:	71 81       	ldd	r23, Z+1	; 0x01
    5ba0:	82 81       	ldd	r24, Z+2	; 0x02
    5ba2:	93 81       	ldd	r25, Z+3	; 0x03
    5ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba8:	dc 01       	movw	r26, r24
    5baa:	cb 01       	movw	r24, r22
    5bac:	f8 01       	movw	r30, r16
    5bae:	91 83       	std	Z+1, r25	; 0x01
    5bb0:	80 83       	st	Z, r24
    5bb2:	de 01       	movw	r26, r28
    5bb4:	ab 5a       	subi	r26, 0xAB	; 171
    5bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    5bb8:	fe 01       	movw	r30, r28
    5bba:	e7 5a       	subi	r30, 0xA7	; 167
    5bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbe:	80 81       	ld	r24, Z
    5bc0:	91 81       	ldd	r25, Z+1	; 0x01
    5bc2:	8d 93       	st	X+, r24
    5bc4:	9c 93       	st	X, r25
    5bc6:	fe 01       	movw	r30, r28
    5bc8:	eb 5a       	subi	r30, 0xAB	; 171
    5bca:	ff 4f       	sbci	r31, 0xFF	; 255
    5bcc:	80 81       	ld	r24, Z
    5bce:	91 81       	ldd	r25, Z+1	; 0x01
    5bd0:	01 97       	sbiw	r24, 0x01	; 1
    5bd2:	f1 f7       	brne	.-4      	; 0x5bd0 <SevenSegment_FromAToH+0x326>
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	eb 5a       	subi	r30, 0xAB	; 171
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	91 83       	std	Z+1, r25	; 0x01
    5bdc:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 0); // C
    5bde:	fe 01       	movw	r30, r28
    5be0:	ef 58       	subi	r30, 0x8F	; 143
    5be2:	ff 4f       	sbci	r31, 0xFF	; 255
    5be4:	80 81       	ld	r24, Z
    5be6:	61 e0       	ldi	r22, 0x01	; 1
    5be8:	40 e0       	ldi	r20, 0x00	; 0
    5bea:	20 e0       	ldi	r18, 0x00	; 0
    5bec:	01 e0       	ldi	r16, 0x01	; 1
    5bee:	ee 24       	eor	r14, r14
    5bf0:	e3 94       	inc	r14
    5bf2:	cc 24       	eor	r12, r12
    5bf4:	c3 94       	inc	r12
    5bf6:	aa 24       	eor	r10, r10
    5bf8:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5bfc:	fe 01       	movw	r30, r28
    5bfe:	ef 5a       	subi	r30, 0xAF	; 175
    5c00:	ff 4f       	sbci	r31, 0xFF	; 255
    5c02:	80 e0       	ldi	r24, 0x00	; 0
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	a8 e4       	ldi	r26, 0x48	; 72
    5c08:	b2 e4       	ldi	r27, 0x42	; 66
    5c0a:	80 83       	st	Z, r24
    5c0c:	91 83       	std	Z+1, r25	; 0x01
    5c0e:	a2 83       	std	Z+2, r26	; 0x02
    5c10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c12:	8e 01       	movw	r16, r28
    5c14:	03 5b       	subi	r16, 0xB3	; 179
    5c16:	1f 4f       	sbci	r17, 0xFF	; 255
    5c18:	fe 01       	movw	r30, r28
    5c1a:	ef 5a       	subi	r30, 0xAF	; 175
    5c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1e:	60 81       	ld	r22, Z
    5c20:	71 81       	ldd	r23, Z+1	; 0x01
    5c22:	82 81       	ldd	r24, Z+2	; 0x02
    5c24:	93 81       	ldd	r25, Z+3	; 0x03
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	30 e0       	ldi	r19, 0x00	; 0
    5c2a:	4a e7       	ldi	r20, 0x7A	; 122
    5c2c:	55 e4       	ldi	r21, 0x45	; 69
    5c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c32:	dc 01       	movw	r26, r24
    5c34:	cb 01       	movw	r24, r22
    5c36:	f8 01       	movw	r30, r16
    5c38:	80 83       	st	Z, r24
    5c3a:	91 83       	std	Z+1, r25	; 0x01
    5c3c:	a2 83       	std	Z+2, r26	; 0x02
    5c3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c40:	fe 01       	movw	r30, r28
    5c42:	e3 5b       	subi	r30, 0xB3	; 179
    5c44:	ff 4f       	sbci	r31, 0xFF	; 255
    5c46:	60 81       	ld	r22, Z
    5c48:	71 81       	ldd	r23, Z+1	; 0x01
    5c4a:	82 81       	ldd	r24, Z+2	; 0x02
    5c4c:	93 81       	ldd	r25, Z+3	; 0x03
    5c4e:	20 e0       	ldi	r18, 0x00	; 0
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	40 e8       	ldi	r20, 0x80	; 128
    5c54:	5f e3       	ldi	r21, 0x3F	; 63
    5c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c5a:	88 23       	and	r24, r24
    5c5c:	44 f4       	brge	.+16     	; 0x5c6e <SevenSegment_FromAToH+0x3c4>
		__ticks = 1;
    5c5e:	fe 01       	movw	r30, r28
    5c60:	e5 5b       	subi	r30, 0xB5	; 181
    5c62:	ff 4f       	sbci	r31, 0xFF	; 255
    5c64:	81 e0       	ldi	r24, 0x01	; 1
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	91 83       	std	Z+1, r25	; 0x01
    5c6a:	80 83       	st	Z, r24
    5c6c:	64 c0       	rjmp	.+200    	; 0x5d36 <SevenSegment_FromAToH+0x48c>
	else if (__tmp > 65535)
    5c6e:	fe 01       	movw	r30, r28
    5c70:	e3 5b       	subi	r30, 0xB3	; 179
    5c72:	ff 4f       	sbci	r31, 0xFF	; 255
    5c74:	60 81       	ld	r22, Z
    5c76:	71 81       	ldd	r23, Z+1	; 0x01
    5c78:	82 81       	ldd	r24, Z+2	; 0x02
    5c7a:	93 81       	ldd	r25, Z+3	; 0x03
    5c7c:	20 e0       	ldi	r18, 0x00	; 0
    5c7e:	3f ef       	ldi	r19, 0xFF	; 255
    5c80:	4f e7       	ldi	r20, 0x7F	; 127
    5c82:	57 e4       	ldi	r21, 0x47	; 71
    5c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c88:	18 16       	cp	r1, r24
    5c8a:	0c f0       	brlt	.+2      	; 0x5c8e <SevenSegment_FromAToH+0x3e4>
    5c8c:	43 c0       	rjmp	.+134    	; 0x5d14 <SevenSegment_FromAToH+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c8e:	fe 01       	movw	r30, r28
    5c90:	ef 5a       	subi	r30, 0xAF	; 175
    5c92:	ff 4f       	sbci	r31, 0xFF	; 255
    5c94:	60 81       	ld	r22, Z
    5c96:	71 81       	ldd	r23, Z+1	; 0x01
    5c98:	82 81       	ldd	r24, Z+2	; 0x02
    5c9a:	93 81       	ldd	r25, Z+3	; 0x03
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	40 e2       	ldi	r20, 0x20	; 32
    5ca2:	51 e4       	ldi	r21, 0x41	; 65
    5ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ca8:	dc 01       	movw	r26, r24
    5caa:	cb 01       	movw	r24, r22
    5cac:	8e 01       	movw	r16, r28
    5cae:	05 5b       	subi	r16, 0xB5	; 181
    5cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb2:	bc 01       	movw	r22, r24
    5cb4:	cd 01       	movw	r24, r26
    5cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cba:	dc 01       	movw	r26, r24
    5cbc:	cb 01       	movw	r24, r22
    5cbe:	f8 01       	movw	r30, r16
    5cc0:	91 83       	std	Z+1, r25	; 0x01
    5cc2:	80 83       	st	Z, r24
    5cc4:	1f c0       	rjmp	.+62     	; 0x5d04 <SevenSegment_FromAToH+0x45a>
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	e7 5b       	subi	r30, 0xB7	; 183
    5cca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ccc:	80 e9       	ldi	r24, 0x90	; 144
    5cce:	91 e0       	ldi	r25, 0x01	; 1
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	80 83       	st	Z, r24
    5cd4:	fe 01       	movw	r30, r28
    5cd6:	e7 5b       	subi	r30, 0xB7	; 183
    5cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cda:	80 81       	ld	r24, Z
    5cdc:	91 81       	ldd	r25, Z+1	; 0x01
    5cde:	01 97       	sbiw	r24, 0x01	; 1
    5ce0:	f1 f7       	brne	.-4      	; 0x5cde <SevenSegment_FromAToH+0x434>
    5ce2:	fe 01       	movw	r30, r28
    5ce4:	e7 5b       	subi	r30, 0xB7	; 183
    5ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce8:	91 83       	std	Z+1, r25	; 0x01
    5cea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cec:	de 01       	movw	r26, r28
    5cee:	a5 5b       	subi	r26, 0xB5	; 181
    5cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    5cf2:	fe 01       	movw	r30, r28
    5cf4:	e5 5b       	subi	r30, 0xB5	; 181
    5cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf8:	80 81       	ld	r24, Z
    5cfa:	91 81       	ldd	r25, Z+1	; 0x01
    5cfc:	01 97       	sbiw	r24, 0x01	; 1
    5cfe:	11 96       	adiw	r26, 0x01	; 1
    5d00:	9c 93       	st	X, r25
    5d02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d04:	fe 01       	movw	r30, r28
    5d06:	e5 5b       	subi	r30, 0xB5	; 181
    5d08:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0a:	80 81       	ld	r24, Z
    5d0c:	91 81       	ldd	r25, Z+1	; 0x01
    5d0e:	00 97       	sbiw	r24, 0x00	; 0
    5d10:	d1 f6       	brne	.-76     	; 0x5cc6 <SevenSegment_FromAToH+0x41c>
    5d12:	27 c0       	rjmp	.+78     	; 0x5d62 <SevenSegment_FromAToH+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d14:	8e 01       	movw	r16, r28
    5d16:	05 5b       	subi	r16, 0xB5	; 181
    5d18:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1a:	fe 01       	movw	r30, r28
    5d1c:	e3 5b       	subi	r30, 0xB3	; 179
    5d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d20:	60 81       	ld	r22, Z
    5d22:	71 81       	ldd	r23, Z+1	; 0x01
    5d24:	82 81       	ldd	r24, Z+2	; 0x02
    5d26:	93 81       	ldd	r25, Z+3	; 0x03
    5d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	cb 01       	movw	r24, r22
    5d30:	f8 01       	movw	r30, r16
    5d32:	91 83       	std	Z+1, r25	; 0x01
    5d34:	80 83       	st	Z, r24
    5d36:	de 01       	movw	r26, r28
    5d38:	a9 5b       	subi	r26, 0xB9	; 185
    5d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	e5 5b       	subi	r30, 0xB5	; 181
    5d40:	ff 4f       	sbci	r31, 0xFF	; 255
    5d42:	80 81       	ld	r24, Z
    5d44:	91 81       	ldd	r25, Z+1	; 0x01
    5d46:	8d 93       	st	X+, r24
    5d48:	9c 93       	st	X, r25
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	e9 5b       	subi	r30, 0xB9	; 185
    5d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d50:	80 81       	ld	r24, Z
    5d52:	91 81       	ldd	r25, Z+1	; 0x01
    5d54:	01 97       	sbiw	r24, 0x01	; 1
    5d56:	f1 f7       	brne	.-4      	; 0x5d54 <SevenSegment_FromAToH+0x4aa>
    5d58:	fe 01       	movw	r30, r28
    5d5a:	e9 5b       	subi	r30, 0xB9	; 185
    5d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5e:	91 83       	std	Z+1, r25	; 0x01
    5d60:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 1, 1, 0, 1); // D
    5d62:	fe 01       	movw	r30, r28
    5d64:	ef 58       	subi	r30, 0x8F	; 143
    5d66:	ff 4f       	sbci	r31, 0xFF	; 255
    5d68:	80 81       	ld	r24, Z
    5d6a:	60 e0       	ldi	r22, 0x00	; 0
    5d6c:	41 e0       	ldi	r20, 0x01	; 1
    5d6e:	21 e0       	ldi	r18, 0x01	; 1
    5d70:	01 e0       	ldi	r16, 0x01	; 1
    5d72:	ee 24       	eor	r14, r14
    5d74:	e3 94       	inc	r14
    5d76:	cc 24       	eor	r12, r12
    5d78:	aa 24       	eor	r10, r10
    5d7a:	a3 94       	inc	r10
    5d7c:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5d80:	fe 01       	movw	r30, r28
    5d82:	ed 5b       	subi	r30, 0xBD	; 189
    5d84:	ff 4f       	sbci	r31, 0xFF	; 255
    5d86:	80 e0       	ldi	r24, 0x00	; 0
    5d88:	90 e0       	ldi	r25, 0x00	; 0
    5d8a:	a8 e4       	ldi	r26, 0x48	; 72
    5d8c:	b2 e4       	ldi	r27, 0x42	; 66
    5d8e:	80 83       	st	Z, r24
    5d90:	91 83       	std	Z+1, r25	; 0x01
    5d92:	a2 83       	std	Z+2, r26	; 0x02
    5d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d96:	8e 01       	movw	r16, r28
    5d98:	01 5c       	subi	r16, 0xC1	; 193
    5d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d9c:	fe 01       	movw	r30, r28
    5d9e:	ed 5b       	subi	r30, 0xBD	; 189
    5da0:	ff 4f       	sbci	r31, 0xFF	; 255
    5da2:	60 81       	ld	r22, Z
    5da4:	71 81       	ldd	r23, Z+1	; 0x01
    5da6:	82 81       	ldd	r24, Z+2	; 0x02
    5da8:	93 81       	ldd	r25, Z+3	; 0x03
    5daa:	20 e0       	ldi	r18, 0x00	; 0
    5dac:	30 e0       	ldi	r19, 0x00	; 0
    5dae:	4a e7       	ldi	r20, 0x7A	; 122
    5db0:	55 e4       	ldi	r21, 0x45	; 69
    5db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5db6:	dc 01       	movw	r26, r24
    5db8:	cb 01       	movw	r24, r22
    5dba:	f8 01       	movw	r30, r16
    5dbc:	80 83       	st	Z, r24
    5dbe:	91 83       	std	Z+1, r25	; 0x01
    5dc0:	a2 83       	std	Z+2, r26	; 0x02
    5dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dc4:	fe 01       	movw	r30, r28
    5dc6:	ff 96       	adiw	r30, 0x3f	; 63
    5dc8:	60 81       	ld	r22, Z
    5dca:	71 81       	ldd	r23, Z+1	; 0x01
    5dcc:	82 81       	ldd	r24, Z+2	; 0x02
    5dce:	93 81       	ldd	r25, Z+3	; 0x03
    5dd0:	20 e0       	ldi	r18, 0x00	; 0
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	40 e8       	ldi	r20, 0x80	; 128
    5dd6:	5f e3       	ldi	r21, 0x3F	; 63
    5dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ddc:	88 23       	and	r24, r24
    5dde:	2c f4       	brge	.+10     	; 0x5dea <SevenSegment_FromAToH+0x540>
		__ticks = 1;
    5de0:	81 e0       	ldi	r24, 0x01	; 1
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	9e af       	std	Y+62, r25	; 0x3e
    5de6:	8d af       	std	Y+61, r24	; 0x3d
    5de8:	46 c0       	rjmp	.+140    	; 0x5e76 <SevenSegment_FromAToH+0x5cc>
	else if (__tmp > 65535)
    5dea:	fe 01       	movw	r30, r28
    5dec:	ff 96       	adiw	r30, 0x3f	; 63
    5dee:	60 81       	ld	r22, Z
    5df0:	71 81       	ldd	r23, Z+1	; 0x01
    5df2:	82 81       	ldd	r24, Z+2	; 0x02
    5df4:	93 81       	ldd	r25, Z+3	; 0x03
    5df6:	20 e0       	ldi	r18, 0x00	; 0
    5df8:	3f ef       	ldi	r19, 0xFF	; 255
    5dfa:	4f e7       	ldi	r20, 0x7F	; 127
    5dfc:	57 e4       	ldi	r21, 0x47	; 71
    5dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e02:	18 16       	cp	r1, r24
    5e04:	64 f5       	brge	.+88     	; 0x5e5e <SevenSegment_FromAToH+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e06:	fe 01       	movw	r30, r28
    5e08:	ed 5b       	subi	r30, 0xBD	; 189
    5e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0c:	60 81       	ld	r22, Z
    5e0e:	71 81       	ldd	r23, Z+1	; 0x01
    5e10:	82 81       	ldd	r24, Z+2	; 0x02
    5e12:	93 81       	ldd	r25, Z+3	; 0x03
    5e14:	20 e0       	ldi	r18, 0x00	; 0
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	40 e2       	ldi	r20, 0x20	; 32
    5e1a:	51 e4       	ldi	r21, 0x41	; 65
    5e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e20:	dc 01       	movw	r26, r24
    5e22:	cb 01       	movw	r24, r22
    5e24:	bc 01       	movw	r22, r24
    5e26:	cd 01       	movw	r24, r26
    5e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e2c:	dc 01       	movw	r26, r24
    5e2e:	cb 01       	movw	r24, r22
    5e30:	9e af       	std	Y+62, r25	; 0x3e
    5e32:	8d af       	std	Y+61, r24	; 0x3d
    5e34:	0f c0       	rjmp	.+30     	; 0x5e54 <SevenSegment_FromAToH+0x5aa>
    5e36:	80 e9       	ldi	r24, 0x90	; 144
    5e38:	91 e0       	ldi	r25, 0x01	; 1
    5e3a:	9c af       	std	Y+60, r25	; 0x3c
    5e3c:	8b af       	std	Y+59, r24	; 0x3b
    5e3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e40:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e42:	01 97       	sbiw	r24, 0x01	; 1
    5e44:	f1 f7       	brne	.-4      	; 0x5e42 <SevenSegment_FromAToH+0x598>
    5e46:	9c af       	std	Y+60, r25	; 0x3c
    5e48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e4e:	01 97       	sbiw	r24, 0x01	; 1
    5e50:	9e af       	std	Y+62, r25	; 0x3e
    5e52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e54:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e56:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e58:	00 97       	sbiw	r24, 0x00	; 0
    5e5a:	69 f7       	brne	.-38     	; 0x5e36 <SevenSegment_FromAToH+0x58c>
    5e5c:	16 c0       	rjmp	.+44     	; 0x5e8a <SevenSegment_FromAToH+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e5e:	fe 01       	movw	r30, r28
    5e60:	ff 96       	adiw	r30, 0x3f	; 63
    5e62:	60 81       	ld	r22, Z
    5e64:	71 81       	ldd	r23, Z+1	; 0x01
    5e66:	82 81       	ldd	r24, Z+2	; 0x02
    5e68:	93 81       	ldd	r25, Z+3	; 0x03
    5e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e6e:	dc 01       	movw	r26, r24
    5e70:	cb 01       	movw	r24, r22
    5e72:	9e af       	std	Y+62, r25	; 0x3e
    5e74:	8d af       	std	Y+61, r24	; 0x3d
    5e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e7a:	9a af       	std	Y+58, r25	; 0x3a
    5e7c:	89 af       	std	Y+57, r24	; 0x39
    5e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    5e80:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e82:	01 97       	sbiw	r24, 0x01	; 1
    5e84:	f1 f7       	brne	.-4      	; 0x5e82 <SevenSegment_FromAToH+0x5d8>
    5e86:	9a af       	std	Y+58, r25	; 0x3a
    5e88:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 1); // E
    5e8a:	fe 01       	movw	r30, r28
    5e8c:	ef 58       	subi	r30, 0x8F	; 143
    5e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e90:	80 81       	ld	r24, Z
    5e92:	61 e0       	ldi	r22, 0x01	; 1
    5e94:	40 e0       	ldi	r20, 0x00	; 0
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	01 e0       	ldi	r16, 0x01	; 1
    5e9a:	ee 24       	eor	r14, r14
    5e9c:	e3 94       	inc	r14
    5e9e:	cc 24       	eor	r12, r12
    5ea0:	c3 94       	inc	r12
    5ea2:	aa 24       	eor	r10, r10
    5ea4:	a3 94       	inc	r10
    5ea6:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5eaa:	80 e0       	ldi	r24, 0x00	; 0
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	a8 e4       	ldi	r26, 0x48	; 72
    5eb0:	b2 e4       	ldi	r27, 0x42	; 66
    5eb2:	8d ab       	std	Y+53, r24	; 0x35
    5eb4:	9e ab       	std	Y+54, r25	; 0x36
    5eb6:	af ab       	std	Y+55, r26	; 0x37
    5eb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eba:	6d a9       	ldd	r22, Y+53	; 0x35
    5ebc:	7e a9       	ldd	r23, Y+54	; 0x36
    5ebe:	8f a9       	ldd	r24, Y+55	; 0x37
    5ec0:	98 ad       	ldd	r25, Y+56	; 0x38
    5ec2:	20 e0       	ldi	r18, 0x00	; 0
    5ec4:	30 e0       	ldi	r19, 0x00	; 0
    5ec6:	4a e7       	ldi	r20, 0x7A	; 122
    5ec8:	55 e4       	ldi	r21, 0x45	; 69
    5eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ece:	dc 01       	movw	r26, r24
    5ed0:	cb 01       	movw	r24, r22
    5ed2:	89 ab       	std	Y+49, r24	; 0x31
    5ed4:	9a ab       	std	Y+50, r25	; 0x32
    5ed6:	ab ab       	std	Y+51, r26	; 0x33
    5ed8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5eda:	69 a9       	ldd	r22, Y+49	; 0x31
    5edc:	7a a9       	ldd	r23, Y+50	; 0x32
    5ede:	8b a9       	ldd	r24, Y+51	; 0x33
    5ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    5ee2:	20 e0       	ldi	r18, 0x00	; 0
    5ee4:	30 e0       	ldi	r19, 0x00	; 0
    5ee6:	40 e8       	ldi	r20, 0x80	; 128
    5ee8:	5f e3       	ldi	r21, 0x3F	; 63
    5eea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5eee:	88 23       	and	r24, r24
    5ef0:	2c f4       	brge	.+10     	; 0x5efc <SevenSegment_FromAToH+0x652>
		__ticks = 1;
    5ef2:	81 e0       	ldi	r24, 0x01	; 1
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	98 ab       	std	Y+48, r25	; 0x30
    5ef8:	8f a7       	std	Y+47, r24	; 0x2f
    5efa:	3f c0       	rjmp	.+126    	; 0x5f7a <SevenSegment_FromAToH+0x6d0>
	else if (__tmp > 65535)
    5efc:	69 a9       	ldd	r22, Y+49	; 0x31
    5efe:	7a a9       	ldd	r23, Y+50	; 0x32
    5f00:	8b a9       	ldd	r24, Y+51	; 0x33
    5f02:	9c a9       	ldd	r25, Y+52	; 0x34
    5f04:	20 e0       	ldi	r18, 0x00	; 0
    5f06:	3f ef       	ldi	r19, 0xFF	; 255
    5f08:	4f e7       	ldi	r20, 0x7F	; 127
    5f0a:	57 e4       	ldi	r21, 0x47	; 71
    5f0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f10:	18 16       	cp	r1, r24
    5f12:	4c f5       	brge	.+82     	; 0x5f66 <SevenSegment_FromAToH+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f14:	6d a9       	ldd	r22, Y+53	; 0x35
    5f16:	7e a9       	ldd	r23, Y+54	; 0x36
    5f18:	8f a9       	ldd	r24, Y+55	; 0x37
    5f1a:	98 ad       	ldd	r25, Y+56	; 0x38
    5f1c:	20 e0       	ldi	r18, 0x00	; 0
    5f1e:	30 e0       	ldi	r19, 0x00	; 0
    5f20:	40 e2       	ldi	r20, 0x20	; 32
    5f22:	51 e4       	ldi	r21, 0x41	; 65
    5f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f28:	dc 01       	movw	r26, r24
    5f2a:	cb 01       	movw	r24, r22
    5f2c:	bc 01       	movw	r22, r24
    5f2e:	cd 01       	movw	r24, r26
    5f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f34:	dc 01       	movw	r26, r24
    5f36:	cb 01       	movw	r24, r22
    5f38:	98 ab       	std	Y+48, r25	; 0x30
    5f3a:	8f a7       	std	Y+47, r24	; 0x2f
    5f3c:	0f c0       	rjmp	.+30     	; 0x5f5c <SevenSegment_FromAToH+0x6b2>
    5f3e:	80 e9       	ldi	r24, 0x90	; 144
    5f40:	91 e0       	ldi	r25, 0x01	; 1
    5f42:	9e a7       	std	Y+46, r25	; 0x2e
    5f44:	8d a7       	std	Y+45, r24	; 0x2d
    5f46:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f48:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f4a:	01 97       	sbiw	r24, 0x01	; 1
    5f4c:	f1 f7       	brne	.-4      	; 0x5f4a <SevenSegment_FromAToH+0x6a0>
    5f4e:	9e a7       	std	Y+46, r25	; 0x2e
    5f50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f52:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f54:	98 a9       	ldd	r25, Y+48	; 0x30
    5f56:	01 97       	sbiw	r24, 0x01	; 1
    5f58:	98 ab       	std	Y+48, r25	; 0x30
    5f5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f5e:	98 a9       	ldd	r25, Y+48	; 0x30
    5f60:	00 97       	sbiw	r24, 0x00	; 0
    5f62:	69 f7       	brne	.-38     	; 0x5f3e <SevenSegment_FromAToH+0x694>
    5f64:	14 c0       	rjmp	.+40     	; 0x5f8e <SevenSegment_FromAToH+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f66:	69 a9       	ldd	r22, Y+49	; 0x31
    5f68:	7a a9       	ldd	r23, Y+50	; 0x32
    5f6a:	8b a9       	ldd	r24, Y+51	; 0x33
    5f6c:	9c a9       	ldd	r25, Y+52	; 0x34
    5f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f72:	dc 01       	movw	r26, r24
    5f74:	cb 01       	movw	r24, r22
    5f76:	98 ab       	std	Y+48, r25	; 0x30
    5f78:	8f a7       	std	Y+47, r24	; 0x2f
    5f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f7c:	98 a9       	ldd	r25, Y+48	; 0x30
    5f7e:	9c a7       	std	Y+44, r25	; 0x2c
    5f80:	8b a7       	std	Y+43, r24	; 0x2b
    5f82:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f84:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f86:	01 97       	sbiw	r24, 0x01	; 1
    5f88:	f1 f7       	brne	.-4      	; 0x5f86 <SevenSegment_FromAToH+0x6dc>
    5f8a:	9c a7       	std	Y+44, r25	; 0x2c
    5f8c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 0, 1, 1, 1); // F
    5f8e:	fe 01       	movw	r30, r28
    5f90:	ef 58       	subi	r30, 0x8F	; 143
    5f92:	ff 4f       	sbci	r31, 0xFF	; 255
    5f94:	80 81       	ld	r24, Z
    5f96:	61 e0       	ldi	r22, 0x01	; 1
    5f98:	40 e0       	ldi	r20, 0x00	; 0
    5f9a:	20 e0       	ldi	r18, 0x00	; 0
    5f9c:	00 e0       	ldi	r16, 0x00	; 0
    5f9e:	ee 24       	eor	r14, r14
    5fa0:	e3 94       	inc	r14
    5fa2:	cc 24       	eor	r12, r12
    5fa4:	c3 94       	inc	r12
    5fa6:	aa 24       	eor	r10, r10
    5fa8:	a3 94       	inc	r10
    5faa:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	a8 e4       	ldi	r26, 0x48	; 72
    5fb4:	b2 e4       	ldi	r27, 0x42	; 66
    5fb6:	8f a3       	std	Y+39, r24	; 0x27
    5fb8:	98 a7       	std	Y+40, r25	; 0x28
    5fba:	a9 a7       	std	Y+41, r26	; 0x29
    5fbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fbe:	6f a1       	ldd	r22, Y+39	; 0x27
    5fc0:	78 a5       	ldd	r23, Y+40	; 0x28
    5fc2:	89 a5       	ldd	r24, Y+41	; 0x29
    5fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	4a e7       	ldi	r20, 0x7A	; 122
    5fcc:	55 e4       	ldi	r21, 0x45	; 69
    5fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fd2:	dc 01       	movw	r26, r24
    5fd4:	cb 01       	movw	r24, r22
    5fd6:	8b a3       	std	Y+35, r24	; 0x23
    5fd8:	9c a3       	std	Y+36, r25	; 0x24
    5fda:	ad a3       	std	Y+37, r26	; 0x25
    5fdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5fde:	6b a1       	ldd	r22, Y+35	; 0x23
    5fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    5fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    5fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	40 e8       	ldi	r20, 0x80	; 128
    5fec:	5f e3       	ldi	r21, 0x3F	; 63
    5fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ff2:	88 23       	and	r24, r24
    5ff4:	2c f4       	brge	.+10     	; 0x6000 <SevenSegment_FromAToH+0x756>
		__ticks = 1;
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	9a a3       	std	Y+34, r25	; 0x22
    5ffc:	89 a3       	std	Y+33, r24	; 0x21
    5ffe:	3f c0       	rjmp	.+126    	; 0x607e <SevenSegment_FromAToH+0x7d4>
	else if (__tmp > 65535)
    6000:	6b a1       	ldd	r22, Y+35	; 0x23
    6002:	7c a1       	ldd	r23, Y+36	; 0x24
    6004:	8d a1       	ldd	r24, Y+37	; 0x25
    6006:	9e a1       	ldd	r25, Y+38	; 0x26
    6008:	20 e0       	ldi	r18, 0x00	; 0
    600a:	3f ef       	ldi	r19, 0xFF	; 255
    600c:	4f e7       	ldi	r20, 0x7F	; 127
    600e:	57 e4       	ldi	r21, 0x47	; 71
    6010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6014:	18 16       	cp	r1, r24
    6016:	4c f5       	brge	.+82     	; 0x606a <SevenSegment_FromAToH+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6018:	6f a1       	ldd	r22, Y+39	; 0x27
    601a:	78 a5       	ldd	r23, Y+40	; 0x28
    601c:	89 a5       	ldd	r24, Y+41	; 0x29
    601e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6020:	20 e0       	ldi	r18, 0x00	; 0
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	40 e2       	ldi	r20, 0x20	; 32
    6026:	51 e4       	ldi	r21, 0x41	; 65
    6028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    602c:	dc 01       	movw	r26, r24
    602e:	cb 01       	movw	r24, r22
    6030:	bc 01       	movw	r22, r24
    6032:	cd 01       	movw	r24, r26
    6034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6038:	dc 01       	movw	r26, r24
    603a:	cb 01       	movw	r24, r22
    603c:	9a a3       	std	Y+34, r25	; 0x22
    603e:	89 a3       	std	Y+33, r24	; 0x21
    6040:	0f c0       	rjmp	.+30     	; 0x6060 <SevenSegment_FromAToH+0x7b6>
    6042:	80 e9       	ldi	r24, 0x90	; 144
    6044:	91 e0       	ldi	r25, 0x01	; 1
    6046:	98 a3       	std	Y+32, r25	; 0x20
    6048:	8f 8f       	std	Y+31, r24	; 0x1f
    604a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    604c:	98 a1       	ldd	r25, Y+32	; 0x20
    604e:	01 97       	sbiw	r24, 0x01	; 1
    6050:	f1 f7       	brne	.-4      	; 0x604e <SevenSegment_FromAToH+0x7a4>
    6052:	98 a3       	std	Y+32, r25	; 0x20
    6054:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6056:	89 a1       	ldd	r24, Y+33	; 0x21
    6058:	9a a1       	ldd	r25, Y+34	; 0x22
    605a:	01 97       	sbiw	r24, 0x01	; 1
    605c:	9a a3       	std	Y+34, r25	; 0x22
    605e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6060:	89 a1       	ldd	r24, Y+33	; 0x21
    6062:	9a a1       	ldd	r25, Y+34	; 0x22
    6064:	00 97       	sbiw	r24, 0x00	; 0
    6066:	69 f7       	brne	.-38     	; 0x6042 <SevenSegment_FromAToH+0x798>
    6068:	14 c0       	rjmp	.+40     	; 0x6092 <SevenSegment_FromAToH+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    606a:	6b a1       	ldd	r22, Y+35	; 0x23
    606c:	7c a1       	ldd	r23, Y+36	; 0x24
    606e:	8d a1       	ldd	r24, Y+37	; 0x25
    6070:	9e a1       	ldd	r25, Y+38	; 0x26
    6072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	9a a3       	std	Y+34, r25	; 0x22
    607c:	89 a3       	std	Y+33, r24	; 0x21
    607e:	89 a1       	ldd	r24, Y+33	; 0x21
    6080:	9a a1       	ldd	r25, Y+34	; 0x22
    6082:	9e 8f       	std	Y+30, r25	; 0x1e
    6084:	8d 8f       	std	Y+29, r24	; 0x1d
    6086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6088:	9e 8d       	ldd	r25, Y+30	; 0x1e
    608a:	01 97       	sbiw	r24, 0x01	; 1
    608c:	f1 f7       	brne	.-4      	; 0x608a <SevenSegment_FromAToH+0x7e0>
    608e:	9e 8f       	std	Y+30, r25	; 0x1e
    6090:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 0); // G
    6092:	fe 01       	movw	r30, r28
    6094:	ef 58       	subi	r30, 0x8F	; 143
    6096:	ff 4f       	sbci	r31, 0xFF	; 255
    6098:	80 81       	ld	r24, Z
    609a:	61 e0       	ldi	r22, 0x01	; 1
    609c:	40 e0       	ldi	r20, 0x00	; 0
    609e:	21 e0       	ldi	r18, 0x01	; 1
    60a0:	01 e0       	ldi	r16, 0x01	; 1
    60a2:	ee 24       	eor	r14, r14
    60a4:	e3 94       	inc	r14
    60a6:	cc 24       	eor	r12, r12
    60a8:	c3 94       	inc	r12
    60aa:	aa 24       	eor	r10, r10
    60ac:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    60b0:	80 e0       	ldi	r24, 0x00	; 0
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	a8 e4       	ldi	r26, 0x48	; 72
    60b6:	b2 e4       	ldi	r27, 0x42	; 66
    60b8:	89 8f       	std	Y+25, r24	; 0x19
    60ba:	9a 8f       	std	Y+26, r25	; 0x1a
    60bc:	ab 8f       	std	Y+27, r26	; 0x1b
    60be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60c0:	69 8d       	ldd	r22, Y+25	; 0x19
    60c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60c8:	20 e0       	ldi	r18, 0x00	; 0
    60ca:	30 e0       	ldi	r19, 0x00	; 0
    60cc:	4a e7       	ldi	r20, 0x7A	; 122
    60ce:	55 e4       	ldi	r21, 0x45	; 69
    60d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60d4:	dc 01       	movw	r26, r24
    60d6:	cb 01       	movw	r24, r22
    60d8:	8d 8b       	std	Y+21, r24	; 0x15
    60da:	9e 8b       	std	Y+22, r25	; 0x16
    60dc:	af 8b       	std	Y+23, r26	; 0x17
    60de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60e0:	6d 89       	ldd	r22, Y+21	; 0x15
    60e2:	7e 89       	ldd	r23, Y+22	; 0x16
    60e4:	8f 89       	ldd	r24, Y+23	; 0x17
    60e6:	98 8d       	ldd	r25, Y+24	; 0x18
    60e8:	20 e0       	ldi	r18, 0x00	; 0
    60ea:	30 e0       	ldi	r19, 0x00	; 0
    60ec:	40 e8       	ldi	r20, 0x80	; 128
    60ee:	5f e3       	ldi	r21, 0x3F	; 63
    60f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    60f4:	88 23       	and	r24, r24
    60f6:	2c f4       	brge	.+10     	; 0x6102 <SevenSegment_FromAToH+0x858>
		__ticks = 1;
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	9c 8b       	std	Y+20, r25	; 0x14
    60fe:	8b 8b       	std	Y+19, r24	; 0x13
    6100:	3f c0       	rjmp	.+126    	; 0x6180 <SevenSegment_FromAToH+0x8d6>
	else if (__tmp > 65535)
    6102:	6d 89       	ldd	r22, Y+21	; 0x15
    6104:	7e 89       	ldd	r23, Y+22	; 0x16
    6106:	8f 89       	ldd	r24, Y+23	; 0x17
    6108:	98 8d       	ldd	r25, Y+24	; 0x18
    610a:	20 e0       	ldi	r18, 0x00	; 0
    610c:	3f ef       	ldi	r19, 0xFF	; 255
    610e:	4f e7       	ldi	r20, 0x7F	; 127
    6110:	57 e4       	ldi	r21, 0x47	; 71
    6112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6116:	18 16       	cp	r1, r24
    6118:	4c f5       	brge	.+82     	; 0x616c <SevenSegment_FromAToH+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    611a:	69 8d       	ldd	r22, Y+25	; 0x19
    611c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    611e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6122:	20 e0       	ldi	r18, 0x00	; 0
    6124:	30 e0       	ldi	r19, 0x00	; 0
    6126:	40 e2       	ldi	r20, 0x20	; 32
    6128:	51 e4       	ldi	r21, 0x41	; 65
    612a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    612e:	dc 01       	movw	r26, r24
    6130:	cb 01       	movw	r24, r22
    6132:	bc 01       	movw	r22, r24
    6134:	cd 01       	movw	r24, r26
    6136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    613a:	dc 01       	movw	r26, r24
    613c:	cb 01       	movw	r24, r22
    613e:	9c 8b       	std	Y+20, r25	; 0x14
    6140:	8b 8b       	std	Y+19, r24	; 0x13
    6142:	0f c0       	rjmp	.+30     	; 0x6162 <SevenSegment_FromAToH+0x8b8>
    6144:	80 e9       	ldi	r24, 0x90	; 144
    6146:	91 e0       	ldi	r25, 0x01	; 1
    6148:	9a 8b       	std	Y+18, r25	; 0x12
    614a:	89 8b       	std	Y+17, r24	; 0x11
    614c:	89 89       	ldd	r24, Y+17	; 0x11
    614e:	9a 89       	ldd	r25, Y+18	; 0x12
    6150:	01 97       	sbiw	r24, 0x01	; 1
    6152:	f1 f7       	brne	.-4      	; 0x6150 <SevenSegment_FromAToH+0x8a6>
    6154:	9a 8b       	std	Y+18, r25	; 0x12
    6156:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6158:	8b 89       	ldd	r24, Y+19	; 0x13
    615a:	9c 89       	ldd	r25, Y+20	; 0x14
    615c:	01 97       	sbiw	r24, 0x01	; 1
    615e:	9c 8b       	std	Y+20, r25	; 0x14
    6160:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6162:	8b 89       	ldd	r24, Y+19	; 0x13
    6164:	9c 89       	ldd	r25, Y+20	; 0x14
    6166:	00 97       	sbiw	r24, 0x00	; 0
    6168:	69 f7       	brne	.-38     	; 0x6144 <SevenSegment_FromAToH+0x89a>
    616a:	14 c0       	rjmp	.+40     	; 0x6194 <SevenSegment_FromAToH+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    616c:	6d 89       	ldd	r22, Y+21	; 0x15
    616e:	7e 89       	ldd	r23, Y+22	; 0x16
    6170:	8f 89       	ldd	r24, Y+23	; 0x17
    6172:	98 8d       	ldd	r25, Y+24	; 0x18
    6174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6178:	dc 01       	movw	r26, r24
    617a:	cb 01       	movw	r24, r22
    617c:	9c 8b       	std	Y+20, r25	; 0x14
    617e:	8b 8b       	std	Y+19, r24	; 0x13
    6180:	8b 89       	ldd	r24, Y+19	; 0x13
    6182:	9c 89       	ldd	r25, Y+20	; 0x14
    6184:	98 8b       	std	Y+16, r25	; 0x10
    6186:	8f 87       	std	Y+15, r24	; 0x0f
    6188:	8f 85       	ldd	r24, Y+15	; 0x0f
    618a:	98 89       	ldd	r25, Y+16	; 0x10
    618c:	01 97       	sbiw	r24, 0x01	; 1
    618e:	f1 f7       	brne	.-4      	; 0x618c <SevenSegment_FromAToH+0x8e2>
    6190:	98 8b       	std	Y+16, r25	; 0x10
    6192:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 1, 1, 1); // H
    6194:	fe 01       	movw	r30, r28
    6196:	ef 58       	subi	r30, 0x8F	; 143
    6198:	ff 4f       	sbci	r31, 0xFF	; 255
    619a:	80 81       	ld	r24, Z
    619c:	60 e0       	ldi	r22, 0x00	; 0
    619e:	41 e0       	ldi	r20, 0x01	; 1
    61a0:	21 e0       	ldi	r18, 0x01	; 1
    61a2:	00 e0       	ldi	r16, 0x00	; 0
    61a4:	ee 24       	eor	r14, r14
    61a6:	e3 94       	inc	r14
    61a8:	cc 24       	eor	r12, r12
    61aa:	c3 94       	inc	r12
    61ac:	aa 24       	eor	r10, r10
    61ae:	a3 94       	inc	r10
    61b0:	0e 94 a1 23 	call	0x4742	; 0x4742 <SevenSegment_Display>
    61b4:	80 e0       	ldi	r24, 0x00	; 0
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	a8 e4       	ldi	r26, 0x48	; 72
    61ba:	b2 e4       	ldi	r27, 0x42	; 66
    61bc:	8b 87       	std	Y+11, r24	; 0x0b
    61be:	9c 87       	std	Y+12, r25	; 0x0c
    61c0:	ad 87       	std	Y+13, r26	; 0x0d
    61c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    61c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    61c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    61ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    61cc:	20 e0       	ldi	r18, 0x00	; 0
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	4a e7       	ldi	r20, 0x7A	; 122
    61d2:	55 e4       	ldi	r21, 0x45	; 69
    61d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61d8:	dc 01       	movw	r26, r24
    61da:	cb 01       	movw	r24, r22
    61dc:	8f 83       	std	Y+7, r24	; 0x07
    61de:	98 87       	std	Y+8, r25	; 0x08
    61e0:	a9 87       	std	Y+9, r26	; 0x09
    61e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    61e4:	6f 81       	ldd	r22, Y+7	; 0x07
    61e6:	78 85       	ldd	r23, Y+8	; 0x08
    61e8:	89 85       	ldd	r24, Y+9	; 0x09
    61ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ec:	20 e0       	ldi	r18, 0x00	; 0
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	40 e8       	ldi	r20, 0x80	; 128
    61f2:	5f e3       	ldi	r21, 0x3F	; 63
    61f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    61f8:	88 23       	and	r24, r24
    61fa:	2c f4       	brge	.+10     	; 0x6206 <SevenSegment_FromAToH+0x95c>
		__ticks = 1;
    61fc:	81 e0       	ldi	r24, 0x01	; 1
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	9e 83       	std	Y+6, r25	; 0x06
    6202:	8d 83       	std	Y+5, r24	; 0x05
    6204:	3f c0       	rjmp	.+126    	; 0x6284 <SevenSegment_FromAToH+0x9da>
	else if (__tmp > 65535)
    6206:	6f 81       	ldd	r22, Y+7	; 0x07
    6208:	78 85       	ldd	r23, Y+8	; 0x08
    620a:	89 85       	ldd	r24, Y+9	; 0x09
    620c:	9a 85       	ldd	r25, Y+10	; 0x0a
    620e:	20 e0       	ldi	r18, 0x00	; 0
    6210:	3f ef       	ldi	r19, 0xFF	; 255
    6212:	4f e7       	ldi	r20, 0x7F	; 127
    6214:	57 e4       	ldi	r21, 0x47	; 71
    6216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    621a:	18 16       	cp	r1, r24
    621c:	4c f5       	brge	.+82     	; 0x6270 <SevenSegment_FromAToH+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    621e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6220:	7c 85       	ldd	r23, Y+12	; 0x0c
    6222:	8d 85       	ldd	r24, Y+13	; 0x0d
    6224:	9e 85       	ldd	r25, Y+14	; 0x0e
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	40 e2       	ldi	r20, 0x20	; 32
    622c:	51 e4       	ldi	r21, 0x41	; 65
    622e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6232:	dc 01       	movw	r26, r24
    6234:	cb 01       	movw	r24, r22
    6236:	bc 01       	movw	r22, r24
    6238:	cd 01       	movw	r24, r26
    623a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    623e:	dc 01       	movw	r26, r24
    6240:	cb 01       	movw	r24, r22
    6242:	9e 83       	std	Y+6, r25	; 0x06
    6244:	8d 83       	std	Y+5, r24	; 0x05
    6246:	0f c0       	rjmp	.+30     	; 0x6266 <SevenSegment_FromAToH+0x9bc>
    6248:	80 e9       	ldi	r24, 0x90	; 144
    624a:	91 e0       	ldi	r25, 0x01	; 1
    624c:	9c 83       	std	Y+4, r25	; 0x04
    624e:	8b 83       	std	Y+3, r24	; 0x03
    6250:	8b 81       	ldd	r24, Y+3	; 0x03
    6252:	9c 81       	ldd	r25, Y+4	; 0x04
    6254:	01 97       	sbiw	r24, 0x01	; 1
    6256:	f1 f7       	brne	.-4      	; 0x6254 <SevenSegment_FromAToH+0x9aa>
    6258:	9c 83       	std	Y+4, r25	; 0x04
    625a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    625c:	8d 81       	ldd	r24, Y+5	; 0x05
    625e:	9e 81       	ldd	r25, Y+6	; 0x06
    6260:	01 97       	sbiw	r24, 0x01	; 1
    6262:	9e 83       	std	Y+6, r25	; 0x06
    6264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6266:	8d 81       	ldd	r24, Y+5	; 0x05
    6268:	9e 81       	ldd	r25, Y+6	; 0x06
    626a:	00 97       	sbiw	r24, 0x00	; 0
    626c:	69 f7       	brne	.-38     	; 0x6248 <SevenSegment_FromAToH+0x99e>
    626e:	31 cb       	rjmp	.-2462   	; 0x58d2 <SevenSegment_FromAToH+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6270:	6f 81       	ldd	r22, Y+7	; 0x07
    6272:	78 85       	ldd	r23, Y+8	; 0x08
    6274:	89 85       	ldd	r24, Y+9	; 0x09
    6276:	9a 85       	ldd	r25, Y+10	; 0x0a
    6278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    627c:	dc 01       	movw	r26, r24
    627e:	cb 01       	movw	r24, r22
    6280:	9e 83       	std	Y+6, r25	; 0x06
    6282:	8d 83       	std	Y+5, r24	; 0x05
    6284:	8d 81       	ldd	r24, Y+5	; 0x05
    6286:	9e 81       	ldd	r25, Y+6	; 0x06
    6288:	9a 83       	std	Y+2, r25	; 0x02
    628a:	89 83       	std	Y+1, r24	; 0x01
    628c:	89 81       	ldd	r24, Y+1	; 0x01
    628e:	9a 81       	ldd	r25, Y+2	; 0x02
    6290:	01 97       	sbiw	r24, 0x01	; 1
    6292:	f1 f7       	brne	.-4      	; 0x6290 <SevenSegment_FromAToH+0x9e6>
    6294:	9a 83       	std	Y+2, r25	; 0x02
    6296:	89 83       	std	Y+1, r24	; 0x01
    6298:	1c cb       	rjmp	.-2504   	; 0x58d2 <SevenSegment_FromAToH+0x28>

0000629a <main>:
#include "APP_Includes.h"


int main(void){
    629a:	df 93       	push	r29
    629c:	cf 93       	push	r28
    629e:	cd b7       	in	r28, 0x3d	; 61
    62a0:	de b7       	in	r29, 0x3e	; 62
    62a2:	60 97       	sbiw	r28, 0x10	; 16
    62a4:	0f b6       	in	r0, 0x3f	; 63
    62a6:	f8 94       	cli
    62a8:	de bf       	out	0x3e, r29	; 62
    62aa:	0f be       	out	0x3f, r0	; 63
    62ac:	cd bf       	out	0x3d, r28	; 61
	u8 data, flag = 0;
    62ae:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_voidInit();
    62b0:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_voidInit>
	SPI_voidInit();
    62b4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <SPI_voidInit>
	
	while(1){
		SPI_u8SendResieve(10, &data);
    62b8:	9e 01       	movw	r18, r28
    62ba:	20 5f       	subi	r18, 0xF0	; 240
    62bc:	3f 4f       	sbci	r19, 0xFF	; 255
    62be:	8a e0       	ldi	r24, 0x0A	; 10
    62c0:	b9 01       	movw	r22, r18
    62c2:	0e 94 18 0b 	call	0x1630	; 0x1630 <SPI_u8SendResieve>
		if(data == 5){
    62c6:	88 89       	ldd	r24, Y+16	; 0x10
    62c8:	85 30       	cpi	r24, 0x05	; 5
    62ca:	b1 f7       	brne	.-20     	; 0x62b8 <main+0x1e>
			if(!flag){
    62cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    62ce:	88 23       	and	r24, r24
    62d0:	41 f4       	brne	.+16     	; 0x62e2 <main+0x48>
				DIO_u8SetPinValue(2, 0, 1);
    62d2:	82 e0       	ldi	r24, 0x02	; 2
    62d4:	60 e0       	ldi	r22, 0x00	; 0
    62d6:	41 e0       	ldi	r20, 0x01	; 1
    62d8:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
				flag = 1; 
    62dc:	81 e0       	ldi	r24, 0x01	; 1
    62de:	8f 87       	std	Y+15, r24	; 0x0f
    62e0:	06 c0       	rjmp	.+12     	; 0x62ee <main+0x54>
			}
			else{
				DIO_u8SetPinValue(2, 0, 0);
    62e2:	82 e0       	ldi	r24, 0x02	; 2
    62e4:	60 e0       	ldi	r22, 0x00	; 0
    62e6:	40 e0       	ldi	r20, 0x00	; 0
    62e8:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_u8SetPinValue>
				flag = 0;
    62ec:	1f 86       	std	Y+15, r1	; 0x0f
    62ee:	80 e0       	ldi	r24, 0x00	; 0
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	a0 e2       	ldi	r26, 0x20	; 32
    62f4:	b2 e4       	ldi	r27, 0x42	; 66
    62f6:	8b 87       	std	Y+11, r24	; 0x0b
    62f8:	9c 87       	std	Y+12, r25	; 0x0c
    62fa:	ad 87       	std	Y+13, r26	; 0x0d
    62fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    6300:	7c 85       	ldd	r23, Y+12	; 0x0c
    6302:	8d 85       	ldd	r24, Y+13	; 0x0d
    6304:	9e 85       	ldd	r25, Y+14	; 0x0e
    6306:	20 e0       	ldi	r18, 0x00	; 0
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	4a e7       	ldi	r20, 0x7A	; 122
    630c:	55 e4       	ldi	r21, 0x45	; 69
    630e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6312:	dc 01       	movw	r26, r24
    6314:	cb 01       	movw	r24, r22
    6316:	8f 83       	std	Y+7, r24	; 0x07
    6318:	98 87       	std	Y+8, r25	; 0x08
    631a:	a9 87       	std	Y+9, r26	; 0x09
    631c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    631e:	6f 81       	ldd	r22, Y+7	; 0x07
    6320:	78 85       	ldd	r23, Y+8	; 0x08
    6322:	89 85       	ldd	r24, Y+9	; 0x09
    6324:	9a 85       	ldd	r25, Y+10	; 0x0a
    6326:	20 e0       	ldi	r18, 0x00	; 0
    6328:	30 e0       	ldi	r19, 0x00	; 0
    632a:	40 e8       	ldi	r20, 0x80	; 128
    632c:	5f e3       	ldi	r21, 0x3F	; 63
    632e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6332:	88 23       	and	r24, r24
    6334:	2c f4       	brge	.+10     	; 0x6340 <main+0xa6>
		__ticks = 1;
    6336:	81 e0       	ldi	r24, 0x01	; 1
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	9e 83       	std	Y+6, r25	; 0x06
    633c:	8d 83       	std	Y+5, r24	; 0x05
    633e:	3f c0       	rjmp	.+126    	; 0x63be <main+0x124>
	else if (__tmp > 65535)
    6340:	6f 81       	ldd	r22, Y+7	; 0x07
    6342:	78 85       	ldd	r23, Y+8	; 0x08
    6344:	89 85       	ldd	r24, Y+9	; 0x09
    6346:	9a 85       	ldd	r25, Y+10	; 0x0a
    6348:	20 e0       	ldi	r18, 0x00	; 0
    634a:	3f ef       	ldi	r19, 0xFF	; 255
    634c:	4f e7       	ldi	r20, 0x7F	; 127
    634e:	57 e4       	ldi	r21, 0x47	; 71
    6350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6354:	18 16       	cp	r1, r24
    6356:	4c f5       	brge	.+82     	; 0x63aa <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6358:	6b 85       	ldd	r22, Y+11	; 0x0b
    635a:	7c 85       	ldd	r23, Y+12	; 0x0c
    635c:	8d 85       	ldd	r24, Y+13	; 0x0d
    635e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6360:	20 e0       	ldi	r18, 0x00	; 0
    6362:	30 e0       	ldi	r19, 0x00	; 0
    6364:	40 e2       	ldi	r20, 0x20	; 32
    6366:	51 e4       	ldi	r21, 0x41	; 65
    6368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    636c:	dc 01       	movw	r26, r24
    636e:	cb 01       	movw	r24, r22
    6370:	bc 01       	movw	r22, r24
    6372:	cd 01       	movw	r24, r26
    6374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6378:	dc 01       	movw	r26, r24
    637a:	cb 01       	movw	r24, r22
    637c:	9e 83       	std	Y+6, r25	; 0x06
    637e:	8d 83       	std	Y+5, r24	; 0x05
    6380:	0f c0       	rjmp	.+30     	; 0x63a0 <main+0x106>
    6382:	80 e9       	ldi	r24, 0x90	; 144
    6384:	91 e0       	ldi	r25, 0x01	; 1
    6386:	9c 83       	std	Y+4, r25	; 0x04
    6388:	8b 83       	std	Y+3, r24	; 0x03
    638a:	8b 81       	ldd	r24, Y+3	; 0x03
    638c:	9c 81       	ldd	r25, Y+4	; 0x04
    638e:	01 97       	sbiw	r24, 0x01	; 1
    6390:	f1 f7       	brne	.-4      	; 0x638e <main+0xf4>
    6392:	9c 83       	std	Y+4, r25	; 0x04
    6394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6396:	8d 81       	ldd	r24, Y+5	; 0x05
    6398:	9e 81       	ldd	r25, Y+6	; 0x06
    639a:	01 97       	sbiw	r24, 0x01	; 1
    639c:	9e 83       	std	Y+6, r25	; 0x06
    639e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63a0:	8d 81       	ldd	r24, Y+5	; 0x05
    63a2:	9e 81       	ldd	r25, Y+6	; 0x06
    63a4:	00 97       	sbiw	r24, 0x00	; 0
    63a6:	69 f7       	brne	.-38     	; 0x6382 <main+0xe8>
    63a8:	87 cf       	rjmp	.-242    	; 0x62b8 <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63aa:	6f 81       	ldd	r22, Y+7	; 0x07
    63ac:	78 85       	ldd	r23, Y+8	; 0x08
    63ae:	89 85       	ldd	r24, Y+9	; 0x09
    63b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    63b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63b6:	dc 01       	movw	r26, r24
    63b8:	cb 01       	movw	r24, r22
    63ba:	9e 83       	std	Y+6, r25	; 0x06
    63bc:	8d 83       	std	Y+5, r24	; 0x05
    63be:	8d 81       	ldd	r24, Y+5	; 0x05
    63c0:	9e 81       	ldd	r25, Y+6	; 0x06
    63c2:	9a 83       	std	Y+2, r25	; 0x02
    63c4:	89 83       	std	Y+1, r24	; 0x01
    63c6:	89 81       	ldd	r24, Y+1	; 0x01
    63c8:	9a 81       	ldd	r25, Y+2	; 0x02
    63ca:	01 97       	sbiw	r24, 0x01	; 1
    63cc:	f1 f7       	brne	.-4      	; 0x63ca <main+0x130>
    63ce:	9a 83       	std	Y+2, r25	; 0x02
    63d0:	89 83       	std	Y+1, r24	; 0x01
    63d2:	72 cf       	rjmp	.-284    	; 0x62b8 <main+0x1e>

000063d4 <__divmodhi4>:
    63d4:	97 fb       	bst	r25, 7
    63d6:	09 2e       	mov	r0, r25
    63d8:	07 26       	eor	r0, r23
    63da:	0a d0       	rcall	.+20     	; 0x63f0 <__divmodhi4_neg1>
    63dc:	77 fd       	sbrc	r23, 7
    63de:	04 d0       	rcall	.+8      	; 0x63e8 <__divmodhi4_neg2>
    63e0:	2e d0       	rcall	.+92     	; 0x643e <__udivmodhi4>
    63e2:	06 d0       	rcall	.+12     	; 0x63f0 <__divmodhi4_neg1>
    63e4:	00 20       	and	r0, r0
    63e6:	1a f4       	brpl	.+6      	; 0x63ee <__divmodhi4_exit>

000063e8 <__divmodhi4_neg2>:
    63e8:	70 95       	com	r23
    63ea:	61 95       	neg	r22
    63ec:	7f 4f       	sbci	r23, 0xFF	; 255

000063ee <__divmodhi4_exit>:
    63ee:	08 95       	ret

000063f0 <__divmodhi4_neg1>:
    63f0:	f6 f7       	brtc	.-4      	; 0x63ee <__divmodhi4_exit>
    63f2:	90 95       	com	r25
    63f4:	81 95       	neg	r24
    63f6:	9f 4f       	sbci	r25, 0xFF	; 255
    63f8:	08 95       	ret

000063fa <__udivmodsi4>:
    63fa:	a1 e2       	ldi	r26, 0x21	; 33
    63fc:	1a 2e       	mov	r1, r26
    63fe:	aa 1b       	sub	r26, r26
    6400:	bb 1b       	sub	r27, r27
    6402:	fd 01       	movw	r30, r26
    6404:	0d c0       	rjmp	.+26     	; 0x6420 <__udivmodsi4_ep>

00006406 <__udivmodsi4_loop>:
    6406:	aa 1f       	adc	r26, r26
    6408:	bb 1f       	adc	r27, r27
    640a:	ee 1f       	adc	r30, r30
    640c:	ff 1f       	adc	r31, r31
    640e:	a2 17       	cp	r26, r18
    6410:	b3 07       	cpc	r27, r19
    6412:	e4 07       	cpc	r30, r20
    6414:	f5 07       	cpc	r31, r21
    6416:	20 f0       	brcs	.+8      	; 0x6420 <__udivmodsi4_ep>
    6418:	a2 1b       	sub	r26, r18
    641a:	b3 0b       	sbc	r27, r19
    641c:	e4 0b       	sbc	r30, r20
    641e:	f5 0b       	sbc	r31, r21

00006420 <__udivmodsi4_ep>:
    6420:	66 1f       	adc	r22, r22
    6422:	77 1f       	adc	r23, r23
    6424:	88 1f       	adc	r24, r24
    6426:	99 1f       	adc	r25, r25
    6428:	1a 94       	dec	r1
    642a:	69 f7       	brne	.-38     	; 0x6406 <__udivmodsi4_loop>
    642c:	60 95       	com	r22
    642e:	70 95       	com	r23
    6430:	80 95       	com	r24
    6432:	90 95       	com	r25
    6434:	9b 01       	movw	r18, r22
    6436:	ac 01       	movw	r20, r24
    6438:	bd 01       	movw	r22, r26
    643a:	cf 01       	movw	r24, r30
    643c:	08 95       	ret

0000643e <__udivmodhi4>:
    643e:	aa 1b       	sub	r26, r26
    6440:	bb 1b       	sub	r27, r27
    6442:	51 e1       	ldi	r21, 0x11	; 17
    6444:	07 c0       	rjmp	.+14     	; 0x6454 <__udivmodhi4_ep>

00006446 <__udivmodhi4_loop>:
    6446:	aa 1f       	adc	r26, r26
    6448:	bb 1f       	adc	r27, r27
    644a:	a6 17       	cp	r26, r22
    644c:	b7 07       	cpc	r27, r23
    644e:	10 f0       	brcs	.+4      	; 0x6454 <__udivmodhi4_ep>
    6450:	a6 1b       	sub	r26, r22
    6452:	b7 0b       	sbc	r27, r23

00006454 <__udivmodhi4_ep>:
    6454:	88 1f       	adc	r24, r24
    6456:	99 1f       	adc	r25, r25
    6458:	5a 95       	dec	r21
    645a:	a9 f7       	brne	.-22     	; 0x6446 <__udivmodhi4_loop>
    645c:	80 95       	com	r24
    645e:	90 95       	com	r25
    6460:	bc 01       	movw	r22, r24
    6462:	cd 01       	movw	r24, r26
    6464:	08 95       	ret

00006466 <__prologue_saves__>:
    6466:	2f 92       	push	r2
    6468:	3f 92       	push	r3
    646a:	4f 92       	push	r4
    646c:	5f 92       	push	r5
    646e:	6f 92       	push	r6
    6470:	7f 92       	push	r7
    6472:	8f 92       	push	r8
    6474:	9f 92       	push	r9
    6476:	af 92       	push	r10
    6478:	bf 92       	push	r11
    647a:	cf 92       	push	r12
    647c:	df 92       	push	r13
    647e:	ef 92       	push	r14
    6480:	ff 92       	push	r15
    6482:	0f 93       	push	r16
    6484:	1f 93       	push	r17
    6486:	cf 93       	push	r28
    6488:	df 93       	push	r29
    648a:	cd b7       	in	r28, 0x3d	; 61
    648c:	de b7       	in	r29, 0x3e	; 62
    648e:	ca 1b       	sub	r28, r26
    6490:	db 0b       	sbc	r29, r27
    6492:	0f b6       	in	r0, 0x3f	; 63
    6494:	f8 94       	cli
    6496:	de bf       	out	0x3e, r29	; 62
    6498:	0f be       	out	0x3f, r0	; 63
    649a:	cd bf       	out	0x3d, r28	; 61
    649c:	09 94       	ijmp

0000649e <__epilogue_restores__>:
    649e:	2a 88       	ldd	r2, Y+18	; 0x12
    64a0:	39 88       	ldd	r3, Y+17	; 0x11
    64a2:	48 88       	ldd	r4, Y+16	; 0x10
    64a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    64a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    64a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    64aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    64ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    64ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    64b0:	b9 84       	ldd	r11, Y+9	; 0x09
    64b2:	c8 84       	ldd	r12, Y+8	; 0x08
    64b4:	df 80       	ldd	r13, Y+7	; 0x07
    64b6:	ee 80       	ldd	r14, Y+6	; 0x06
    64b8:	fd 80       	ldd	r15, Y+5	; 0x05
    64ba:	0c 81       	ldd	r16, Y+4	; 0x04
    64bc:	1b 81       	ldd	r17, Y+3	; 0x03
    64be:	aa 81       	ldd	r26, Y+2	; 0x02
    64c0:	b9 81       	ldd	r27, Y+1	; 0x01
    64c2:	ce 0f       	add	r28, r30
    64c4:	d1 1d       	adc	r29, r1
    64c6:	0f b6       	in	r0, 0x3f	; 63
    64c8:	f8 94       	cli
    64ca:	de bf       	out	0x3e, r29	; 62
    64cc:	0f be       	out	0x3f, r0	; 63
    64ce:	cd bf       	out	0x3d, r28	; 61
    64d0:	ed 01       	movw	r28, r26
    64d2:	08 95       	ret

000064d4 <_exit>:
    64d4:	f8 94       	cli

000064d6 <__stop_program>:
    64d6:	ff cf       	rjmp	.-2      	; 0x64d6 <__stop_program>
