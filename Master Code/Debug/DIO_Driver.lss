
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  000064e8  0000657c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800184  00800184  000066a0  2**0
                  ALLOC
  3 .stab         00006d44  00000000  00000000  000066a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002999  00000000  00000000  0000d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000fd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000fefd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000100ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000120de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0001323f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00014244  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  000143e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  000146a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_1>
       8:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__vector_2>
       c:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_10>
      2c:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 31 	call	0x62c4	; 0x62c4 <main>
      8a:	0c 94 72 32 	jmp	0x64e4	; 0x64e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 32 	jmp	0x648e	; 0x648e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 32 	jmp	0x648e	; 0x648e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 32 	jmp	0x648e	; 0x648e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 32 	jmp	0x648e	; 0x648e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 32 	jmp	0x648e	; 0x648e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 44 32 	jmp	0x6488	; 0x6488 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 60 32 	jmp	0x64c0	; 0x64c0 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 4b 32 	jmp	0x6496	; 0x6496 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 67 32 	jmp	0x64ce	; 0x64ce <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     cb6:	a1 e4       	ldi	r26, 0x41	; 65
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e4       	ldi	r30, 0x41	; 65
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_voidDisable>:

void WDT_voidDisable(void){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     cee:	a1 e4       	ldi	r26, 0x41	; 65
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e4       	ldi	r30, 0x41	; 65
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     cfc:	a1 e4       	ldi	r26, 0x41	; 65
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e4       	ldi	r30, 0x41	; 65
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"


void UART_Init(void){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <UART_Init+0x6>
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	
	/* This Variable To Put 1 In Bit 7 & Select Asynch Mode  */
	u8 Local_u8UCSRCValue = 0x80;
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Variable To Select Boud Rate */
	u16 Local_u16BoudRate = 103;
     d26:	87 e6       	ldi	r24, 0x67	; 103
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Select Normal Speed Mode */
	#if Speed_Mode == Normal_Speed
	CLR_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
     d2e:	ab e2       	ldi	r26, 0x2B	; 43
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e2       	ldi	r30, 0x2B	; 43
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	8c 93       	st	X, r24
	#elif Speed_Mode == Double_Speed
	SET_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
	#endif
	
	/* Disable MPCM */
	CLR_BIT(UART_u8_UCSRA_REG, UART_MPCM_PIN);
     d3c:	ab e2       	ldi	r26, 0x2B	; 43
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	eb e2       	ldi	r30, 0x2B	; 43
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
	CLR_BIT(Local_u8UCSRCValue, UART_UCSZ0);
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	
	#elif BitData_Mode == Eight_Data
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8b 7f       	andi	r24, 0xFB	; 251
     d56:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ0);
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	84 60       	ori	r24, 0x04	; 4
     d62:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	#endif
	
	/* Operation Mode (Asynch / Synch) */
	#if Operation_Mode == ASynch
	CLR_BIT(Local_u8UCSRCValue, UART_UMSEL);
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	8f 7b       	andi	r24, 0xBF	; 191
     d68:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UMSEL);
	#endif
	
	/* Select Parity Mode (None / Even / Odd) */
	#if Parity_Mode == None
	CLR_BIT(Local_u8UCSRCValue, UART_UPM0);
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	8f 7e       	andi	r24, 0xEF	; 239
     d6e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue, UART_UPM1);
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UPM1);
	#endif
	
	/*  Stop Bits Mode ( 1 / 2) */
	#if StopBits_Mode == One_Bit
	CLR_BIT(Local_u8UCSRCValue, UART_USBS);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8b 83       	std	Y+3, r24	; 0x03
	#elif StopBits_Mode == Two_Bits
	SET_BIT(Local_u8UCSRCValue, UART_USBS);
	#endif
	
	/* Update UCSRC Reg Value  */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     d7c:	e0 e4       	ldi	r30, 0x40	; 64
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	80 83       	st	Z, r24
	
	/* Boud Rate => 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BoudRate;
     d84:	e9 e2       	ldi	r30, 0x29	; 41
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BoudRate >> 8);
     d8c:	e0 e4       	ldi	r30, 0x40	; 64
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	89 2f       	mov	r24, r25
     d96:	99 27       	eor	r25, r25
     d98:	80 83       	st	Z, r24
	
	/* Enable Tx & Rx */
	SET_BIT(UART_u8_UCSRB_REG, UART_TXEN_PIN);
     d9a:	aa e2       	ldi	r26, 0x2A	; 42
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e2       	ldi	r30, 0x2A	; 42
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG, UART_RXEN_PIN);
     da8:	aa e2       	ldi	r26, 0x2A	; 42
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e2       	ldi	r30, 0x2A	; 42
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	8c 93       	st	X, r24
	
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <UART_Send1ByteData>:

void UART_Send1ByteData(u8 Copy_u8Sended1ByteData){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Pin Should be 1 (empty) to be able to write date in it */
	while(!GET_BIT(UART_u8_UCSRA_REG, UART_UDRE_PIN));
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 95       	swap	r24
     dd6:	86 95       	lsr	r24
     dd8:	87 70       	andi	r24, 0x07	; 7
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	a1 f3       	breq	.-24     	; 0xdce <UART_Send1ByteData+0xc>
	
	/* Send 1 Byte Data */
	UART_u8_UDR_REG = Copy_u8Sended1ByteData;
     de6:	ec e2       	ldi	r30, 0x2C	; 44
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	80 83       	st	Z, r24
	
}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <UART_SendString>:

void UART_SendString(u8 *Copy_u8SendedString){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <UART_SendString+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <UART_SendString+0x30>
	while(Copy_u8SendedString[i] !=  '\0'){
		UART_Send1ByteData(Copy_u8SendedString[i]);
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
		i++;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	89 83       	std	Y+1, r24	; 0x01
	
}

void UART_SendString(u8 *Copy_u8SendedString){
	u8 i = 0;
	while(Copy_u8SendedString[i] !=  '\0'){
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	39 f7       	brne	.-50     	; 0xe0a <UART_SendString+0x14>
		UART_Send1ByteData(Copy_u8SendedString[i]);
		i++;
	}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <UART_DisplayNumber>:

void UART_DisplayNumber(u32 num){
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	68 97       	sbiw	r28, 0x18	; 24
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	6d 8b       	std	Y+21, r22	; 0x15
     e62:	7e 8b       	std	Y+22, r23	; 0x16
     e64:	8f 8b       	std	Y+23, r24	; 0x17
     e66:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
     e68:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
     e6a:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	08 2f       	mov	r16, r24
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	8d 89       	ldd	r24, Y+21	; 0x15
     e74:	9e 89       	ldd	r25, Y+22	; 0x16
     e76:	af 89       	ldd	r26, Y+23	; 0x17
     e78:	b8 8d       	ldd	r27, Y+24	; 0x18
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 05 32 	call	0x640a	; 0x640a <__udivmodsi4>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	28 2f       	mov	r18, r24
     e90:	20 5d       	subi	r18, 0xD0	; 208
     e92:	ce 01       	movw	r24, r28
     e94:	05 96       	adiw	r24, 0x05	; 5
     e96:	fc 01       	movw	r30, r24
     e98:	e0 0f       	add	r30, r16
     e9a:	f1 1f       	adc	r31, r17
     e9c:	20 83       	st	Z, r18
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
     ea4:	8d 89       	ldd	r24, Y+21	; 0x15
     ea6:	9e 89       	ldd	r25, Y+22	; 0x16
     ea8:	af 89       	ldd	r26, Y+23	; 0x17
     eaa:	b8 8d       	ldd	r27, Y+24	; 0x18
     eac:	2a e0       	ldi	r18, 0x0A	; 10
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 05 32 	call	0x640a	; 0x640a <__udivmodsi4>
     ebc:	da 01       	movw	r26, r20
     ebe:	c9 01       	movw	r24, r18
     ec0:	8d 8b       	std	Y+21, r24	; 0x15
     ec2:	9e 8b       	std	Y+22, r25	; 0x16
     ec4:	af 8b       	std	Y+23, r26	; 0x17
     ec6:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
     ec8:	8d 89       	ldd	r24, Y+21	; 0x15
     eca:	9e 89       	ldd	r25, Y+22	; 0x16
     ecc:	af 89       	ldd	r26, Y+23	; 0x17
     ece:	b8 8d       	ldd	r27, Y+24	; 0x18
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	51 f6       	brne	.-108    	; 0xe6c <UART_DisplayNumber+0x24>

    if (isNegative) {
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 23       	and	r24, r24
     edc:	69 f0       	breq	.+26     	; 0xef8 <UART_DisplayNumber+0xb0>
        buffer[i++] = '-';
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	05 96       	adiw	r24, 0x05	; 5
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	8d e2       	ldi	r24, 0x2D	; 45
     ef0:	80 83       	st	Z, r24
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     ef8:	1a 82       	std	Y+2, r1	; 0x02
     efa:	3d c0       	rjmp	.+122    	; 0xf76 <UART_DisplayNumber+0x12e>
        char temp = buffer[j];
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	ce 01       	movw	r24, r28
     f04:	05 96       	adiw	r24, 0x05	; 5
     f06:	fc 01       	movw	r30, r24
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b9 01       	movw	r22, r18
     f24:	68 1b       	sub	r22, r24
     f26:	79 0b       	sbc	r23, r25
     f28:	cb 01       	movw	r24, r22
     f2a:	9c 01       	movw	r18, r24
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	30 40       	sbci	r19, 0x00	; 0
     f30:	ce 01       	movw	r24, r28
     f32:	05 96       	adiw	r24, 0x05	; 5
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	20 81       	ld	r18, Z
     f3c:	ce 01       	movw	r24, r28
     f3e:	05 96       	adiw	r24, 0x05	; 5
     f40:	fc 01       	movw	r30, r24
     f42:	e4 0f       	add	r30, r20
     f44:	f5 1f       	adc	r31, r21
     f46:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a9 01       	movw	r20, r18
     f56:	48 1b       	sub	r20, r24
     f58:	59 0b       	sbc	r21, r25
     f5a:	ca 01       	movw	r24, r20
     f5c:	9c 01       	movw	r18, r24
     f5e:	21 50       	subi	r18, 0x01	; 1
     f60:	30 40       	sbci	r19, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	05 96       	adiw	r24, 0x05	; 5
     f66:	fc 01       	movw	r30, r24
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	98 2f       	mov	r25, r24
     f7a:	96 95       	lsr	r25
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	89 17       	cp	r24, r25
     f80:	08 f4       	brcc	.+2      	; 0xf84 <UART_DisplayNumber+0x13c>
     f82:	bc cf       	rjmp	.-136    	; 0xefc <UART_DisplayNumber+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	05 96       	adiw	r24, 0x05	; 5
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	10 82       	st	Z, r1

    // Write the string to LCD
    UART_SendString(buffer);
     f96:	ce 01       	movw	r24, r28
     f98:	05 96       	adiw	r24, 0x05	; 5
     f9a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <UART_SendString>
}
     f9e:	68 96       	adiw	r28, 0x18	; 24
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <UART_displayFloat>:

void UART_displayFloat(f32 number) {
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	28 97       	sbiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	6d 83       	std	Y+5, r22	; 0x05
     fca:	7e 83       	std	Y+6, r23	; 0x06
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
     fd0:	6d 81       	ldd	r22, Y+5	; 0x05
     fd2:	7e 81       	ldd	r23, Y+6	; 0x06
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	aa 27       	eor	r26, r26
     fea:	97 fd       	sbrc	r25, 7
     fec:	a0 95       	com	r26
     fee:	ba 2f       	mov	r27, r26
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	6d 81       	ldd	r22, Y+5	; 0x05
     ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a e7       	ldi	r20, 0x7A	; 122
    1016:	54 e4       	ldi	r21, 0x44	; 68
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	84 36       	cpi	r24, 0x64	; 100
    1036:	91 05       	cpc	r25, r1
    1038:	54 f0       	brlt	.+20     	; 0x104e <UART_displayFloat+0x9a>
    	integerPart /= 10;
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	b9 01       	movw	r22, r18
    1044:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__divmodhi4>
    1048:	cb 01       	movw	r24, r22
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    }
    UART_DisplayNumber(integerPart);
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	aa 27       	eor	r26, r26
    1054:	97 fd       	sbrc	r25, 7
    1056:	a0 95       	com	r26
    1058:	ba 2f       	mov	r27, r26
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_DisplayNumber>
    UART_Send1ByteData('.');
    1062:	8e e2       	ldi	r24, 0x2E	; 46
    1064:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
    UART_DisplayNumber(decimalPart);
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	aa 27       	eor	r26, r26
    106e:	97 fd       	sbrc	r25, 7
    1070:	a0 95       	com	r26
    1072:	ba 2f       	mov	r27, r26
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_DisplayNumber>
}
    107c:	28 96       	adiw	r28, 0x08	; 8
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <UART_u8Recieve1ByteData>:

u8 UART_u8Recieve1ByteData(u8 *Copy_Pu8RecievedByteData){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <UART_u8Recieve1ByteData+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8RecievedByteData != NULL){
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <UART_u8Recieve1ByteData+0x34>
		while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	dc f7       	brge	.-10     	; 0x10aa <UART_u8Recieve1ByteData+0x1c>
		*Copy_Pu8RecievedByteData = UART_u8_UDR_REG;
    10b4:	ec e2       	ldi	r30, 0x2C	; 44
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 83       	st	Z, r24
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <UART_u8Recieve1ByteData+0x36>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    10c2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <UART_u8RecieveString>:


u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <UART_u8RecieveString+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <UART_u8RecieveString+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    10ea:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8RecievedString != NULL){
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	19 f1       	breq	.+70     	; 0x113a <UART_u8RecieveString+0x68>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <UART_u8RecieveString+0x4c>
		while(i < Copy_u8StringSize){
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    10f6:	eb e2       	ldi	r30, 0x2B	; 43
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 23       	and	r24, r24
    10fe:	dc f7       	brge	.-10     	; 0x10f6 <UART_u8RecieveString+0x24>
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	dc 01       	movw	r26, r24
    110c:	a2 0f       	add	r26, r18
    110e:	b3 1f       	adc	r27, r19
    1110:	ec e2       	ldi	r30, 0x2C	; 44
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8c 93       	st	X, r24
			i++;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	89 83       	std	Y+1, r24	; 0x01
u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 i = 0;
	
	if(Copy_Pu8RecievedString != NULL){
		while(i < Copy_u8StringSize){
    111e:	99 81       	ldd	r25, Y+1	; 0x01
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	98 17       	cp	r25, r24
    1124:	40 f3       	brcs	.-48     	; 0x10f6 <UART_u8RecieveString+0x24>
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
			i++;
		}
		Copy_Pu8RecievedString[i] = '\0';
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	10 82       	st	Z, r1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <UART_u8RecieveString+0x6a>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    113a:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
    1172:	a3 e5       	ldi	r26, 0x53	; 83
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e3 e5       	ldi	r30, 0x53	; 83
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 62       	ori	r24, 0x20	; 32
    117e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 61       	ori	r24, 0x10	; 16
    118c:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8b 7f       	andi	r24, 0xFB	; 251
    11b6:	8c 93       	st	X, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
    11e2:	ae e4       	ldi	r26, 0x4E	; 78
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ee e4       	ldi	r30, 0x4E	; 78
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	88 60       	ori	r24, 0x08	; 8
    11ee:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
    11f0:	ae e4       	ldi	r26, 0x4E	; 78
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee e4       	ldi	r30, 0x4E	; 78
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 61       	ori	r24, 0x10	; 16
    11fc:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
    11fe:	af e4       	ldi	r26, 0x4F	; 79
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ef e4       	ldi	r30, 0x4F	; 79
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
    120c:	af e4       	ldi	r26, 0x4F	; 79
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e4       	ldi	r30, 0x4F	; 79
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 7b       	andi	r24, 0xBF	; 191
    1218:	8c 93       	st	X, r24

	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
    121a:	ae e4       	ldi	r26, 0x4E	; 78
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ee e4       	ldi	r30, 0x4E	; 78
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8e 7f       	andi	r24, 0xFE	; 254
    1226:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
    1228:	ae e4       	ldi	r26, 0x4E	; 78
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e4       	ldi	r30, 0x4E	; 78
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
    1236:	ae e4       	ldi	r26, 0x4E	; 78
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ee e4       	ldi	r30, 0x4E	; 78
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8b 7f       	andi	r24, 0xFB	; 251
    1242:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 39999;
    1244:	e6 e4       	ldi	r30, 0x46	; 70
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8f e3       	ldi	r24, 0x3F	; 63
    124a:	9c e9       	ldi	r25, 0x9C	; 156
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = 3499;
    1250:	ea e4       	ldi	r30, 0x4A	; 74
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8b ea       	ldi	r24, 0xAB	; 171
    1256:	9d e0       	ldi	r25, 0x0D	; 13
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <TIMERS_u8TIMER0SetCallBack+0x6>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9b 83       	std	Y+3, r25	; 0x03
    1270:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	9b 81       	ldd	r25, Y+3	; 0x03
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	90 93 85 01 	sts	0x0185, r25
    1286:	80 93 84 01 	sts	0x0184, r24
    128a:	01 c0       	rjmp	.+2      	; 0x128e <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    128c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	90 93 87 01 	sts	0x0187, r25
    12c0:	80 93 86 01 	sts	0x0186, r24
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    12e2:	ec e5       	ldi	r30, 0x5C	; 92
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	80 83       	st	Z, r24
	
}
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
    12fe:	e2 e5       	ldi	r30, 0x52	; 82
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
    131c:	ea e4       	ldi	r30, 0x4A	; 74
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMERS_voidTIMER1SetTimerValue+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
    1340:	ec e4       	ldi	r30, 0x4C	; 76
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
    135e:	ec e4       	ldi	r30, 0x4C	; 76
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1396:	80 91 88 01 	lds	r24, 0x0188
    139a:	90 91 89 01 	lds	r25, 0x0189
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	90 93 89 01 	sts	0x0189, r25
    13a4:	80 93 88 01 	sts	0x0188, r24
	if(Local_u16CounterOVF == 3907){
    13a8:	80 91 88 01 	lds	r24, 0x0188
    13ac:	90 91 89 01 	lds	r25, 0x0189
    13b0:	2f e0       	ldi	r18, 0x0F	; 15
    13b2:	83 34       	cpi	r24, 0x43	; 67
    13b4:	92 07       	cpc	r25, r18
    13b6:	99 f4       	brne	.+38     	; 0x13de <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    13b8:	e2 e5       	ldi	r30, 0x52	; 82
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 ec       	ldi	r24, 0xC0	; 192
    13be:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    13c0:	10 92 89 01 	sts	0x0189, r1
    13c4:	10 92 88 01 	sts	0x0188, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
    13c8:	80 91 84 01 	lds	r24, 0x0184
    13cc:	90 91 85 01 	lds	r25, 0x0185
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
    13d4:	e0 91 84 01 	lds	r30, 0x0184
    13d8:	f0 91 85 01 	lds	r31, 0x0185
    13dc:	09 95       	icall
		}
	}
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    142e:	80 91 8a 01 	lds	r24, 0x018A
    1432:	90 91 8b 01 	lds	r25, 0x018B
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	90 93 8b 01 	sts	0x018B, r25
    143c:	80 93 8a 01 	sts	0x018A, r24
	if(Local_u16CounterCTC == 10000){
    1440:	80 91 8a 01 	lds	r24, 0x018A
    1444:	90 91 8b 01 	lds	r25, 0x018B
    1448:	27 e2       	ldi	r18, 0x27	; 39
    144a:	80 31       	cpi	r24, 0x10	; 16
    144c:	92 07       	cpc	r25, r18
    144e:	79 f4       	brne	.+30     	; 0x146e <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    1450:	10 92 8b 01 	sts	0x018B, r1
    1454:	10 92 8a 01 	sts	0x018A, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    1458:	80 91 86 01 	lds	r24, 0x0186
    145c:	90 91 87 01 	lds	r25, 0x0187
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    1464:	e0 91 86 01 	lds	r30, 0x0186
    1468:	f0 91 87 01 	lds	r31, 0x0187
    146c:	09 95       	icall
		}
	}
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <Switch_Init+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <Switch_Init+0x8>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    14a8:	1a 82       	std	Y+2, r1	; 0x02
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	50 c0       	rjmp	.+160    	; 0x154e <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    14ae:	29 81       	ldd	r18, Y+1	; 0x01
    14b0:	3a 81       	ldd	r19, Y+2	; 0x02
    14b2:	c9 01       	movw	r24, r18
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	40 81       	ld	r20, Z
    14c8:	29 81       	ldd	r18, Y+1	; 0x01
    14ca:	3a 81       	ldd	r19, Y+2	; 0x02
    14cc:	c9 01       	movw	r24, r18
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	28 0f       	add	r18, r24
    14d4:	39 1f       	adc	r19, r25
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	fc 01       	movw	r30, r24
    14dc:	e2 0f       	add	r30, r18
    14de:	f3 1f       	adc	r31, r19
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	84 2f       	mov	r24, r20
    14e4:	69 2f       	mov	r22, r25
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    14ec:	29 81       	ldd	r18, Y+1	; 0x01
    14ee:	3a 81       	ldd	r19, Y+2	; 0x02
    14f0:	c9 01       	movw	r24, r18
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	28 0f       	add	r18, r24
    14f8:	39 1f       	adc	r19, r25
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	fc 01       	movw	r30, r24
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	50 81       	ld	r21, Z
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	c9 01       	movw	r24, r18
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	28 0f       	add	r18, r24
    1512:	39 1f       	adc	r19, r25
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	fc 01       	movw	r30, r24
    151a:	e2 0f       	add	r30, r18
    151c:	f3 1f       	adc	r31, r19
    151e:	41 81       	ldd	r20, Z+1	; 0x01
    1520:	29 81       	ldd	r18, Y+1	; 0x01
    1522:	3a 81       	ldd	r19, Y+2	; 0x02
    1524:	c9 01       	movw	r24, r18
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	28 0f       	add	r18, r24
    152c:	39 1f       	adc	r19, r25
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	fc 01       	movw	r30, r24
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	92 81       	ldd	r25, Z+2	; 0x02
    153a:	85 2f       	mov	r24, r21
    153c:	64 2f       	mov	r22, r20
    153e:	49 2f       	mov	r20, r25
    1540:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	0c f4       	brge	.+2      	; 0x1560 <Switch_Init+0xcc>
    155e:	a7 cf       	rjmp	.-178    	; 0x14ae <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Switch_GetValue+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <Switch_GetValue+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	7c 83       	std	Y+4, r23	; 0x04
    1582:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    1584:	e9 81       	ldd	r30, Y+1	; 0x01
    1586:	fa 81       	ldd	r31, Y+2	; 0x02
    1588:	80 81       	ld	r24, Z
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	69 2f       	mov	r22, r25
    1596:	a9 01       	movw	r20, r18
    1598:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <DIO_u8GetPinValue>
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <SPI_voidInit>:

#include "SPI_Config.h"
#include "SPI_Private.h"


void SPI_voidInit(void){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
	
	/* Select MC Mood */
	#if MC_Mode == Master
		/* PINS Direction */
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_INPUT);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	64 e0       	ldi	r22, 0x04	; 4
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN5, DIO_u8_OUTPUT);
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	65 e0       	ldi	r22, 0x05	; 5
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN6, DIO_u8_INPUT);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	66 e0       	ldi	r22, 0x06	; 6
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN7, DIO_u8_OUTPUT);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	67 e0       	ldi	r22, 0x07	; 7
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_INPUT_PULLUP);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	64 e0       	ldi	r22, 0x04	; 4
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
		/* Select Data Order => MSB */	
		#if Data_Order_Mode == MSB
			CLR_BIT(SPI_SPCR_REG, SPI_DORD_PIN);
    15e4:	ad e2       	ldi	r26, 0x2D	; 45
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ed e2       	ldi	r30, 0x2D	; 45
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	8c 93       	st	X, r24
		#elif Data_Order_Mode == LSB
			SET_BIT(SPI_SPCR_REG, SPI_DORD_PIN);
		#endif
			
		/* Select Master Mode */
		SET_BIT(SPI_SPCR_REG, SPI_MSTR_PIN);
    15f2:	ad e2       	ldi	r26, 0x2D	; 45
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ed e2       	ldi	r30, 0x2D	; 45
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	8c 93       	st	X, r24
		#elif Clk_Rate_Mode == Clk_16
			SET_BIT(SPI_SPCR_REG, SPI_SPR0_PIN);
			CLR_BIT(SPI_SPCR_REG, SPI_SPR1_PIN);
			CLR_BIT(SPI_SPSR_REG, SPI_SPI2X_PIN);
		#elif Clk_Rate_Mode == Clk_64
			CLR_BIT(SPI_SPCR_REG, SPI_SPR0_PIN);
    1600:	ad e2       	ldi	r26, 0x2D	; 45
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ed e2       	ldi	r30, 0x2D	; 45
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8e 7f       	andi	r24, 0xFE	; 254
    160c:	8c 93       	st	X, r24
			SET_BIT(SPI_SPCR_REG, SPI_SPR1_PIN);
    160e:	ad e2       	ldi	r26, 0x2D	; 45
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e2       	ldi	r30, 0x2D	; 45
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	82 60       	ori	r24, 0x02	; 2
    161a:	8c 93       	st	X, r24
			CLR_BIT(SPI_SPSR_REG, SPI_SPI2X_PIN);
    161c:	ae e2       	ldi	r26, 0x2E	; 46
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ee e2       	ldi	r30, 0x2E	; 46
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8e 7f       	andi	r24, 0xFE	; 254
    1628:	8c 93       	st	X, r24
			SET_BIT(SPI_SPSR_REG, SPI_SPI2X_PIN);
		#endif
			
		/* Select Clk Polarity => Falling,Rising */
		#if Clk_Polarity_Mode == Falling_Rising
			SET_BIT(SPI_SPCR_REG, SPI_CPOL_PIN);
    162a:	ad e2       	ldi	r26, 0x2D	; 45
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ed e2       	ldi	r30, 0x2D	; 45
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 60       	ori	r24, 0x08	; 8
    1636:	8c 93       	st	X, r24
			CLR_BIT(SPI_SPCR_REG, SPI_CPOL_PIN);
		#endif 
		
		/* Select Clk Phase => Setup,Sample */
		#if Clk_Phase_Mode == Setup_Sample
			SET_BIT(SPI_SPCR_REG, SPI_CPHA_PIN);
    1638:	ad e2       	ldi	r26, 0x2D	; 45
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ed e2       	ldi	r30, 0x2D	; 45
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	84 60       	ori	r24, 0x04	; 4
    1644:	8c 93       	st	X, r24
			CLR_BIT(SPI_SPCR_REG, SPI_CPHA_PIN);
		#endif
	#endif 

	/* Enable SPI */
	SET_BIT(SPI_SPCR_REG, SPI_SPE_PIN);
    1646:	ad e2       	ldi	r26, 0x2D	; 45
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ed e2       	ldi	r30, 0x2D	; 45
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 64       	ori	r24, 0x40	; 64
    1652:	8c 93       	st	X, r24
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <SPI_u8SendResieve>:

u8 SPI_u8SendResieve(u8 Copy_u8SendedByte, u8 *Copy_Pu8Recievedyte){
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <SPI_u8SendResieve+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <SPI_u8SendResieve+0x8>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	7c 83       	std	Y+4, r23	; 0x04
    166a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    166c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Recievedyte != NULL){
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	89 f0       	breq	.+34     	; 0x1698 <SPI_u8SendResieve+0x3e>
		/* Send Byte */
		SPI_SPDR_REG = Copy_u8SendedByte;
    1676:	ef e2       	ldi	r30, 0x2F	; 47
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	80 83       	st	Z, r24
		/* Check if Transmission is Completed */
		while((GET_BIT(SPI_SPSR_REG, SPI_SPIF_PIN)) == 0);
    167e:	ee e2       	ldi	r30, 0x2E	; 46
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 23       	and	r24, r24
    1686:	dc f7       	brge	.-10     	; 0x167e <SPI_u8SendResieve+0x24>
		/* Read Byte */
		*Copy_Pu8Recievedyte = SPI_SPDR_REG;
    1688:	ef e2       	ldi	r30, 0x2F	; 47
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	eb 81       	ldd	r30, Y+3	; 0x03
    1690:	fc 81       	ldd	r31, Y+4	; 0x04
    1692:	80 83       	st	Z, r24
		
		Local_u8ErrorState = STD_TYPES_OK;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <SPI_SlaveSendByte>:
void SPI_SlaveSendByte(u8 Copy_DataByte){
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	0f 92       	push	r0
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	89 83       	std	Y+1, r24	; 0x01
	/* Send Byte */
	SPI_SPDR_REG = Copy_DataByte;
    16b4:	ef e2       	ldi	r30, 0x2F	; 47
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	80 83       	st	Z, r24
}
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <SPI_RecieveByte>:
u8 SPI_RecieveByte(u8 *Copy_Pu8RecievedByte){
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <SPI_RecieveByte+0x6>
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	9b 83       	std	Y+3, r25	; 0x03
    16d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    16d4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8RecievedByte != NULL){
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f0       	breq	.+26     	; 0x16f8 <SPI_RecieveByte+0x34>
		/* Check if Transmission is Completed */
		while((GET_BIT(SPI_SPSR_REG, SPI_SPIF_PIN)) == 0);
    16de:	ee e2       	ldi	r30, 0x2E	; 46
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	88 23       	and	r24, r24
    16e6:	dc f7       	brge	.-10     	; 0x16de <SPI_RecieveByte+0x1a>
		/* Read Byte */
		*Copy_Pu8RecievedByte = SPI_SPDR_REG;
    16e8:	ef e2       	ldi	r30, 0x2F	; 47
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	ea 81       	ldd	r30, Y+2	; 0x02
    16f0:	fb 81       	ldd	r31, Y+3	; 0x03
    16f2:	80 83       	st	Z, r24
		
		Local_u8ErrorState = STD_TYPES_OK;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <LCD_setPinDirection+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <LCD_setPinDirection+0x8>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
    1718:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	88 30       	cpi	r24, 0x08	; 8
    171e:	08 f0       	brcs	.+2      	; 0x1722 <LCD_setPinDirection+0x1c>
    1720:	d5 c0       	rjmp	.+426    	; 0x18cc <LCD_setPinDirection+0x1c6>
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	08 f0       	brcs	.+2      	; 0x172a <LCD_setPinDirection+0x24>
    1728:	d1 c0       	rjmp	.+418    	; 0x18cc <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	3d 83       	std	Y+5, r19	; 0x05
    1732:	2c 83       	std	Y+4, r18	; 0x04
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <LCD_setPinDirection+0x3a>
    173e:	43 c0       	rjmp	.+134    	; 0x17c6 <LCD_setPinDirection+0xc0>
    1740:	2c 81       	ldd	r18, Y+4	; 0x04
    1742:	3d 81       	ldd	r19, Y+5	; 0x05
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_setPinDirection+0x4e>
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	9d 81       	ldd	r25, Y+5	; 0x05
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	71 f0       	breq	.+28     	; 0x176e <LCD_setPinDirection+0x68>
    1752:	bc c0       	rjmp	.+376    	; 0x18cc <LCD_setPinDirection+0x1c6>
    1754:	2c 81       	ldd	r18, Y+4	; 0x04
    1756:	3d 81       	ldd	r19, Y+5	; 0x05
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <LCD_setPinDirection+0x5a>
    175e:	5f c0       	rjmp	.+190    	; 0x181e <LCD_setPinDirection+0x118>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <LCD_setPinDirection+0x66>
    176a:	85 c0       	rjmp	.+266    	; 0x1876 <LCD_setPinDirection+0x170>
    176c:	af c0       	rjmp	.+350    	; 0x18cc <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	a1 f4       	brne	.+40     	; 0x179c <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1774:	aa e3       	ldi	r26, 0x3A	; 58
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ea e3       	ldi	r30, 0x3A	; 58
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <LCD_setPinDirection+0x8c>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <LCD_setPinDirection+0x88>
    1796:	84 2b       	or	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	98 c0       	rjmp	.+304    	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    179c:	aa e3       	ldi	r26, 0x3A	; 58
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ea e3       	ldi	r30, 0x3A	; 58
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <LCD_setPinDirection+0xb4>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <LCD_setPinDirection+0xb0>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	83 c0       	rjmp	.+262    	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	a1 f4       	brne	.+40     	; 0x17f4 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17cc:	a7 e3       	ldi	r26, 0x37	; 55
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e7 e3       	ldi	r30, 0x37	; 55
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <LCD_setPinDirection+0xe4>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <LCD_setPinDirection+0xe0>
    17ee:	84 2b       	or	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	6c c0       	rjmp	.+216    	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    17f4:	a7 e3       	ldi	r26, 0x37	; 55
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e7 e3       	ldi	r30, 0x37	; 55
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <LCD_setPinDirection+0x10c>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <LCD_setPinDirection+0x108>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	57 c0       	rjmp	.+174    	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	a1 f4       	brne	.+40     	; 0x184c <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1824:	a4 e3       	ldi	r26, 0x34	; 52
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e4 e3       	ldi	r30, 0x34	; 52
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <LCD_setPinDirection+0x13c>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <LCD_setPinDirection+0x138>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	40 c0       	rjmp	.+128    	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    184c:	a4 e3       	ldi	r26, 0x34	; 52
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e4 e3       	ldi	r30, 0x34	; 52
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <LCD_setPinDirection+0x164>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <LCD_setPinDirection+0x160>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	2b c0       	rjmp	.+86     	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	a1 f4       	brne	.+40     	; 0x18a4 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    187c:	a1 e3       	ldi	r26, 0x31	; 49
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e1 e3       	ldi	r30, 0x31	; 49
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <LCD_setPinDirection+0x194>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <LCD_setPinDirection+0x190>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    18a4:	a1 e3       	ldi	r26, 0x31	; 49
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e1 e3       	ldi	r30, 0x31	; 49
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <LCD_setPinDirection+0x1bc>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <LCD_setPinDirection+0x1b8>
    18c6:	80 95       	com	r24
    18c8:	84 23       	and	r24, r20
    18ca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <LCD_setPinValue+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <LCD_setPinValue+0x8>
    18e4:	0f 92       	push	r0
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	6a 83       	std	Y+2, r22	; 0x02
    18ee:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	88 30       	cpi	r24, 0x08	; 8
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <LCD_setPinValue+0x1c>
    18f6:	d5 c0       	rjmp	.+426    	; 0x1aa2 <LCD_setPinValue+0x1c6>
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	84 30       	cpi	r24, 0x04	; 4
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <LCD_setPinValue+0x24>
    18fe:	d1 c0       	rjmp	.+418    	; 0x1aa2 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	3d 83       	std	Y+5, r19	; 0x05
    1908:	2c 83       	std	Y+4, r18	; 0x04
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <LCD_setPinValue+0x3a>
    1914:	43 c0       	rjmp	.+134    	; 0x199c <LCD_setPinValue+0xc0>
    1916:	2c 81       	ldd	r18, Y+4	; 0x04
    1918:	3d 81       	ldd	r19, Y+5	; 0x05
    191a:	22 30       	cpi	r18, 0x02	; 2
    191c:	31 05       	cpc	r19, r1
    191e:	2c f4       	brge	.+10     	; 0x192a <LCD_setPinValue+0x4e>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	71 f0       	breq	.+28     	; 0x1944 <LCD_setPinValue+0x68>
    1928:	bc c0       	rjmp	.+376    	; 0x1aa2 <LCD_setPinValue+0x1c6>
    192a:	2c 81       	ldd	r18, Y+4	; 0x04
    192c:	3d 81       	ldd	r19, Y+5	; 0x05
    192e:	22 30       	cpi	r18, 0x02	; 2
    1930:	31 05       	cpc	r19, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <LCD_setPinValue+0x5a>
    1934:	5f c0       	rjmp	.+190    	; 0x19f4 <LCD_setPinValue+0x118>
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <LCD_setPinValue+0x66>
    1940:	85 c0       	rjmp	.+266    	; 0x1a4c <LCD_setPinValue+0x170>
    1942:	af c0       	rjmp	.+350    	; 0x1aa2 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	a1 f4       	brne	.+40     	; 0x1972 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    194a:	ab e3       	ldi	r26, 0x3B	; 59
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb e3       	ldi	r30, 0x3B	; 59
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <LCD_setPinValue+0x8c>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <LCD_setPinValue+0x88>
    196c:	84 2b       	or	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	98 c0       	rjmp	.+304    	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    1972:	ab e3       	ldi	r26, 0x3B	; 59
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <LCD_setPinValue+0xb4>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <LCD_setPinValue+0xb0>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	83 c0       	rjmp	.+262    	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	a1 f4       	brne	.+40     	; 0x19ca <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    19a2:	a8 e3       	ldi	r26, 0x38	; 56
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e8 e3       	ldi	r30, 0x38	; 56
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <LCD_setPinValue+0xe4>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <LCD_setPinValue+0xe0>
    19c4:	84 2b       	or	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	6c c0       	rjmp	.+216    	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    19ca:	a8 e3       	ldi	r26, 0x38	; 56
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e8 e3       	ldi	r30, 0x38	; 56
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <LCD_setPinValue+0x10c>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <LCD_setPinValue+0x108>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	57 c0       	rjmp	.+174    	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	a1 f4       	brne	.+40     	; 0x1a22 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    19fa:	a5 e3       	ldi	r26, 0x35	; 53
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e5 e3       	ldi	r30, 0x35	; 53
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <LCD_setPinValue+0x13c>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <LCD_setPinValue+0x138>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	40 c0       	rjmp	.+128    	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    1a22:	a5 e3       	ldi	r26, 0x35	; 53
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <LCD_setPinValue+0x164>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <LCD_setPinValue+0x160>
    1a44:	80 95       	com	r24
    1a46:	84 23       	and	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	2b c0       	rjmp	.+86     	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	a1 f4       	brne	.+40     	; 0x1a7a <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a52:	a2 e3       	ldi	r26, 0x32	; 50
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e2 e3       	ldi	r30, 0x32	; 50
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <LCD_setPinValue+0x194>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <LCD_setPinValue+0x190>
    1a74:	84 2b       	or	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    1a7a:	a2 e3       	ldi	r26, 0x32	; 50
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e2 e3       	ldi	r30, 0x32	; 50
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <LCD_setPinValue+0x1bc>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <LCD_setPinValue+0x1b8>
    1a9c:	80 95       	com	r24
    1a9e:	84 23       	and	r24, r20
    1aa0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <LCD_getPinValue+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <LCD_getPinValue+0x8>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
    1ac2:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1ac4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	88 30       	cpi	r24, 0x08	; 8
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <LCD_getPinValue+0x1c>
    1acc:	84 c0       	rjmp	.+264    	; 0x1bd6 <LCD_getPinValue+0x124>
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <LCD_getPinValue+0x24>
    1ad4:	80 c0       	rjmp	.+256    	; 0x1bd6 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	3d 83       	std	Y+5, r19	; 0x05
    1ade:	2c 83       	std	Y+4, r18	; 0x04
    1ae0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ae2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ae4:	41 30       	cpi	r20, 0x01	; 1
    1ae6:	51 05       	cpc	r21, r1
    1ae8:	79 f1       	breq	.+94     	; 0x1b48 <LCD_getPinValue+0x96>
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	9d 81       	ldd	r25, Y+5	; 0x05
    1aee:	82 30       	cpi	r24, 0x02	; 2
    1af0:	91 05       	cpc	r25, r1
    1af2:	34 f4       	brge	.+12     	; 0x1b00 <LCD_getPinValue+0x4e>
    1af4:	2c 81       	ldd	r18, Y+4	; 0x04
    1af6:	3d 81       	ldd	r19, Y+5	; 0x05
    1af8:	21 15       	cp	r18, r1
    1afa:	31 05       	cpc	r19, r1
    1afc:	69 f0       	breq	.+26     	; 0x1b18 <LCD_getPinValue+0x66>
    1afe:	6b c0       	rjmp	.+214    	; 0x1bd6 <LCD_getPinValue+0x124>
    1b00:	4c 81       	ldd	r20, Y+4	; 0x04
    1b02:	5d 81       	ldd	r21, Y+5	; 0x05
    1b04:	42 30       	cpi	r20, 0x02	; 2
    1b06:	51 05       	cpc	r21, r1
    1b08:	b9 f1       	breq	.+110    	; 0x1b78 <LCD_getPinValue+0xc6>
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <LCD_getPinValue+0x64>
    1b14:	49 c0       	rjmp	.+146    	; 0x1ba8 <LCD_getPinValue+0xf6>
    1b16:	5f c0       	rjmp	.+190    	; 0x1bd6 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b18:	e9 e3       	ldi	r30, 0x39	; 57
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <LCD_getPinValue+0x7e>
    1b2c:	55 95       	asr	r21
    1b2e:	47 95       	ror	r20
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <LCD_getPinValue+0x7a>
    1b34:	ca 01       	movw	r24, r20
    1b36:	81 70       	andi	r24, 0x01	; 1
    1b38:	90 70       	andi	r25, 0x00	; 0
    1b3a:	88 23       	and	r24, r24
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	49 c0       	rjmp	.+146    	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b44:	19 82       	std	Y+1, r1	; 0x01
    1b46:	47 c0       	rjmp	.+142    	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b48:	e6 e3       	ldi	r30, 0x36	; 54
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a9 01       	movw	r20, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <LCD_getPinValue+0xae>
    1b5c:	55 95       	asr	r21
    1b5e:	47 95       	ror	r20
    1b60:	8a 95       	dec	r24
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <LCD_getPinValue+0xaa>
    1b64:	ca 01       	movw	r24, r20
    1b66:	81 70       	andi	r24, 0x01	; 1
    1b68:	90 70       	andi	r25, 0x00	; 0
    1b6a:	88 23       	and	r24, r24
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	31 c0       	rjmp	.+98     	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b74:	19 82       	std	Y+1, r1	; 0x01
    1b76:	2f c0       	rjmp	.+94     	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b78:	e3 e3       	ldi	r30, 0x33	; 51
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a9 01       	movw	r20, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <LCD_getPinValue+0xde>
    1b8c:	55 95       	asr	r21
    1b8e:	47 95       	ror	r20
    1b90:	8a 95       	dec	r24
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <LCD_getPinValue+0xda>
    1b94:	ca 01       	movw	r24, r20
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	90 70       	andi	r25, 0x00	; 0
    1b9a:	88 23       	and	r24, r24
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	19 c0       	rjmp	.+50     	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	17 c0       	rjmp	.+46     	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ba8:	e0 e3       	ldi	r30, 0x30	; 48
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <LCD_getPinValue+0x10e>
    1bbc:	55 95       	asr	r21
    1bbe:	47 95       	ror	r20
    1bc0:	8a 95       	dec	r24
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <LCD_getPinValue+0x10a>
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	81 70       	andi	r24, 0x01	; 1
    1bc8:	90 70       	andi	r25, 0x00	; 0
    1bca:	88 23       	and	r24, r24
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <LCD_setPortDirection+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <LCD_setPortDirection+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	84 30       	cpi	r24, 0x04	; 4
    1bfc:	90 f5       	brcc	.+100    	; 0x1c62 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3c 83       	std	Y+4, r19	; 0x04
    1c06:	2b 83       	std	Y+3, r18	; 0x03
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	d1 f0       	breq	.+52     	; 0x1c46 <LCD_setPortDirection+0x5e>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_setPortDirection+0x3e>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <LCD_setPortDirection+0x54>
    1c24:	1e c0       	rjmp	.+60     	; 0x1c62 <LCD_setPortDirection+0x7a>
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <LCD_setPortDirection+0x68>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	81 f0       	breq	.+32     	; 0x1c5a <LCD_setPortDirection+0x72>
    1c3a:	13 c0       	rjmp	.+38     	; 0x1c62 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c3c:	ea e3       	ldi	r30, 0x3A	; 58
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
    1c44:	0e c0       	rjmp	.+28     	; 0x1c62 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c46:	e7 e3       	ldi	r30, 0x37	; 55
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 83       	st	Z, r24
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c50:	e4 e3       	ldi	r30, 0x34	; 52
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 83       	st	Z, r24
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c5a:	e1 e3       	ldi	r30, 0x31	; 49
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <LCD_setPortValue+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <LCD_setPortValue+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	90 f5       	brcc	.+100    	; 0x1cea <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3c 83       	std	Y+4, r19	; 0x04
    1c8e:	2b 83       	std	Y+3, r18	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	d1 f0       	breq	.+52     	; 0x1cce <LCD_setPortValue+0x5e>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <LCD_setPortValue+0x3e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <LCD_setPortValue+0x54>
    1cac:	1e c0       	rjmp	.+60     	; 0x1cea <LCD_setPortValue+0x7a>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	81 f0       	breq	.+32     	; 0x1cd8 <LCD_setPortValue+0x68>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	83 30       	cpi	r24, 0x03	; 3
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <LCD_setPortValue+0x72>
    1cc2:	13 c0       	rjmp	.+38     	; 0x1cea <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1cc4:	eb e3       	ldi	r30, 0x3B	; 59
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 83       	st	Z, r24
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cce:	e8 e3       	ldi	r30, 0x38	; 56
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 83       	st	Z, r24
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cd8:	e5 e3       	ldi	r30, 0x35	; 53
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	80 83       	st	Z, r24
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ce2:	e2 e3       	ldi	r30, 0x32	; 50
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <LCD_getPortValue+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <LCD_getPortValue+0x8>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1d06:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	84 30       	cpi	r24, 0x04	; 4
    1d0c:	90 f5       	brcc	.+100    	; 0x1d72 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	3c 83       	std	Y+4, r19	; 0x04
    1d16:	2b 83       	std	Y+3, r18	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	d1 f0       	breq	.+52     	; 0x1d56 <LCD_getPortValue+0x5e>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_getPortValue+0x3e>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <LCD_getPortValue+0x54>
    1d34:	1e c0       	rjmp	.+60     	; 0x1d72 <LCD_getPortValue+0x7a>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <LCD_getPortValue+0x68>
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	91 05       	cpc	r25, r1
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <LCD_getPortValue+0x72>
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d4c:	e9 e3       	ldi	r30, 0x39	; 57
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	0e c0       	rjmp	.+28     	; 0x1d72 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d56:	e6 e3       	ldi	r30, 0x36	; 54
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d60:	e3 e3       	ldi	r30, 0x33	; 51
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d6a:	e0 e3       	ldi	r30, 0x30	; 48
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1d8a:	af e5       	ldi	r26, 0x5F	; 95
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ef e5       	ldi	r30, 0x5F	; 95
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 68       	ori	r24, 0x80	; 128
    1d96:	8c 93       	st	X, r24
}
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1da6:	af e5       	ldi	r26, 0x5F	; 95
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ef e5       	ldi	r30, 0x5F	; 95
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8f 77       	andi	r24, 0x7F	; 127
    1db2:	8c 93       	st	X, r24
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <setCallBack+0x6>
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e4 57       	subi	r30, 0x74	; 116
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1df8:	a5 e5       	ldi	r26, 0x55	; 85
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e5       	ldi	r30, 0x55	; 85
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8e 7f       	andi	r24, 0xFE	; 254
    1e04:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e06:	a5 e5       	ldi	r26, 0x55	; 85
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e5       	ldi	r30, 0x55	; 85
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8d 7f       	andi	r24, 0xFD	; 253
    1e12:	8c 93       	st	X, r24
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e22:	a5 e5       	ldi	r26, 0x55	; 85
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e5       	ldi	r30, 0x55	; 85
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	82 60       	ori	r24, 0x02	; 2
    1e2e:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e30:	a5 e5       	ldi	r26, 0x55	; 85
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e5       	ldi	r30, 0x55	; 85
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8e 7f       	andi	r24, 0xFE	; 254
    1e3c:	8c 93       	st	X, r24
}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e4c:	a5 e5       	ldi	r26, 0x55	; 85
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e5       	ldi	r30, 0x55	; 85
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8d 7f       	andi	r24, 0xFD	; 253
    1e58:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e5a:	a5 e5       	ldi	r26, 0x55	; 85
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e5       	ldi	r30, 0x55	; 85
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	81 60       	ori	r24, 0x01	; 1
    1e66:	8c 93       	st	X, r24
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e76:	a5 e5       	ldi	r26, 0x55	; 85
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e5       	ldi	r30, 0x55	; 85
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	82 60       	ori	r24, 0x02	; 2
    1e82:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e84:	a5 e5       	ldi	r26, 0x55	; 85
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e5       	ldi	r30, 0x55	; 85
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	8c 93       	st	X, r24
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1ea0:	a5 e5       	ldi	r26, 0x55	; 85
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e5       	ldi	r30, 0x55	; 85
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1eae:	a5 e5       	ldi	r26, 0x55	; 85
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e5 e5       	ldi	r30, 0x55	; 85
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	87 7f       	andi	r24, 0xF7	; 247
    1eba:	8c 93       	st	X, r24
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1eca:	a5 e5       	ldi	r26, 0x55	; 85
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e5 e5       	ldi	r30, 0x55	; 85
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 60       	ori	r24, 0x08	; 8
    1ed6:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1ed8:	a5 e5       	ldi	r26, 0x55	; 85
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e5 e5       	ldi	r30, 0x55	; 85
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8b 7f       	andi	r24, 0xFB	; 251
    1ee4:	8c 93       	st	X, r24
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1ef4:	a5 e5       	ldi	r26, 0x55	; 85
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e5       	ldi	r30, 0x55	; 85
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	87 7f       	andi	r24, 0xF7	; 247
    1f00:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1f02:	a5 e5       	ldi	r26, 0x55	; 85
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e5       	ldi	r30, 0x55	; 85
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	84 60       	ori	r24, 0x04	; 4
    1f0e:	8c 93       	st	X, r24
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1f1e:	a5 e5       	ldi	r26, 0x55	; 85
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e5 e5       	ldi	r30, 0x55	; 85
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	88 60       	ori	r24, 0x08	; 8
    1f2a:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1f2c:	a5 e5       	ldi	r26, 0x55	; 85
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e5 e5       	ldi	r30, 0x55	; 85
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	84 60       	ori	r24, 0x04	; 4
    1f38:	8c 93       	st	X, r24
}
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1f48:	a4 e5       	ldi	r26, 0x54	; 84
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e4 e5       	ldi	r30, 0x54	; 84
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	8c 93       	st	X, r24
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1f64:	a4 e5       	ldi	r26, 0x54	; 84
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e4 e5       	ldi	r30, 0x54	; 84
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 7b       	andi	r24, 0xBF	; 191
    1f70:	8c 93       	st	X, r24
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    1f80:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1f84:	ab e5       	ldi	r26, 0x5B	; 91
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	eb e5       	ldi	r30, 0x5B	; 91
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 64       	ori	r24, 0x40	; 64
    1f90:	8c 93       	st	X, r24
}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1fa0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1fa4:	ab e5       	ldi	r26, 0x5B	; 91
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	eb e5       	ldi	r30, 0x5B	; 91
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	80 68       	ori	r24, 0x80	; 128
    1fb0:	8c 93       	st	X, r24
}
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	2a 97       	sbiw	r28, 0x0a	; 10
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3a 87       	std	Y+10, r19	; 0x0a
    1fd8:	29 87       	std	Y+9, r18	; 0x09
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	e9 f1       	breq	.+122    	; 0x205e <EXTI_INTEnable+0xa6>
    1fe4:	29 85       	ldd	r18, Y+9	; 0x09
    1fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <EXTI_INTEnable+0x38>
    1fee:	69 c0       	rjmp	.+210    	; 0x20c2 <EXTI_INTEnable+0x10a>
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <EXTI_INTEnable+0x42>
    1ff8:	7f c0       	rjmp	.+254    	; 0x20f8 <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1ffa:	ab e5       	ldi	r26, 0x5B	; 91
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	eb e5       	ldi	r30, 0x5B	; 91
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 64       	ori	r24, 0x40	; 64
    2006:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	38 87       	std	Y+8, r19	; 0x08
    2010:	2f 83       	std	Y+7, r18	; 0x07
    2012:	8f 81       	ldd	r24, Y+7	; 0x07
    2014:	98 85       	ldd	r25, Y+8	; 0x08
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	91 05       	cpc	r25, r1
    201a:	c1 f0       	breq	.+48     	; 0x204c <EXTI_INTEnable+0x94>
    201c:	2f 81       	ldd	r18, Y+7	; 0x07
    201e:	38 85       	ldd	r19, Y+8	; 0x08
    2020:	22 30       	cpi	r18, 0x02	; 2
    2022:	31 05       	cpc	r19, r1
    2024:	2c f4       	brge	.+10     	; 0x2030 <EXTI_INTEnable+0x78>
    2026:	8f 81       	ldd	r24, Y+7	; 0x07
    2028:	98 85       	ldd	r25, Y+8	; 0x08
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	61 f0       	breq	.+24     	; 0x2046 <EXTI_INTEnable+0x8e>
    202e:	64 c0       	rjmp	.+200    	; 0x20f8 <EXTI_INTEnable+0x140>
    2030:	2f 81       	ldd	r18, Y+7	; 0x07
    2032:	38 85       	ldd	r19, Y+8	; 0x08
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	31 05       	cpc	r19, r1
    2038:	61 f0       	breq	.+24     	; 0x2052 <EXTI_INTEnable+0x9a>
    203a:	8f 81       	ldd	r24, Y+7	; 0x07
    203c:	98 85       	ldd	r25, Y+8	; 0x08
    203e:	83 30       	cpi	r24, 0x03	; 3
    2040:	91 05       	cpc	r25, r1
    2042:	51 f0       	breq	.+20     	; 0x2058 <EXTI_INTEnable+0xa0>
    2044:	59 c0       	rjmp	.+178    	; 0x20f8 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    2046:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <EXTI0_LowLevel_MODE>
    204a:	56 c0       	rjmp	.+172    	; 0x20f8 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    204c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <EXTI0_FALLING_MODE>
    2050:	53 c0       	rjmp	.+166    	; 0x20f8 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    2052:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <EXTI0_AnyLogicalChange_MODE>
    2056:	50 c0       	rjmp	.+160    	; 0x20f8 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    2058:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <EXTI0_RISING_MODE>
    205c:	4d c0       	rjmp	.+154    	; 0x20f8 <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    205e:	ab e5       	ldi	r26, 0x5B	; 91
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	eb e5       	ldi	r30, 0x5B	; 91
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 68       	ori	r24, 0x80	; 128
    206a:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	3e 83       	std	Y+6, r19	; 0x06
    2074:	2d 83       	std	Y+5, r18	; 0x05
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	c1 f0       	breq	.+48     	; 0x20b0 <EXTI_INTEnable+0xf8>
    2080:	2d 81       	ldd	r18, Y+5	; 0x05
    2082:	3e 81       	ldd	r19, Y+6	; 0x06
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <EXTI_INTEnable+0xdc>
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	61 f0       	breq	.+24     	; 0x20aa <EXTI_INTEnable+0xf2>
    2092:	32 c0       	rjmp	.+100    	; 0x20f8 <EXTI_INTEnable+0x140>
    2094:	2d 81       	ldd	r18, Y+5	; 0x05
    2096:	3e 81       	ldd	r19, Y+6	; 0x06
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	61 f0       	breq	.+24     	; 0x20b6 <EXTI_INTEnable+0xfe>
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	51 f0       	breq	.+20     	; 0x20bc <EXTI_INTEnable+0x104>
    20a8:	27 c0       	rjmp	.+78     	; 0x20f8 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    20aa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <EXTI1_LowLevel_MODE>
    20ae:	24 c0       	rjmp	.+72     	; 0x20f8 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    20b0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <EXTI1_FALLING_MODE>
    20b4:	21 c0       	rjmp	.+66     	; 0x20f8 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    20b6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <EXTI1_AnyLogicalChange_MODE>
    20ba:	1e c0       	rjmp	.+60     	; 0x20f8 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    20bc:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <EXTI1_RISING_MODE>
    20c0:	1b c0       	rjmp	.+54     	; 0x20f8 <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    20c2:	ab e5       	ldi	r26, 0x5B	; 91
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	eb e5       	ldi	r30, 0x5B	; 91
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	3c 83       	std	Y+4, r19	; 0x04
    20d8:	2b 83       	std	Y+3, r18	; 0x03
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	91 05       	cpc	r25, r1
    20e2:	41 f0       	breq	.+16     	; 0x20f4 <EXTI_INTEnable+0x13c>
    20e4:	2b 81       	ldd	r18, Y+3	; 0x03
    20e6:	3c 81       	ldd	r19, Y+4	; 0x04
    20e8:	23 30       	cpi	r18, 0x03	; 3
    20ea:	31 05       	cpc	r19, r1
    20ec:	29 f4       	brne	.+10     	; 0x20f8 <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    20ee:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <EXTI2_RISING_MODE>
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    20f4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    20f8:	2a 96       	adiw	r28, 0x0a	; 10
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <EXTI_voidINTDisable+0x6>
    2110:	0f 92       	push	r0
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3b 83       	std	Y+3, r19	; 0x03
    2120:	2a 83       	std	Y+2, r18	; 0x02
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	9b 81       	ldd	r25, Y+3	; 0x03
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	89 f0       	breq	.+34     	; 0x214e <EXTI_voidINTDisable+0x44>
    212c:	2a 81       	ldd	r18, Y+2	; 0x02
    212e:	3b 81       	ldd	r19, Y+3	; 0x03
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	a1 f0       	breq	.+40     	; 0x215e <EXTI_voidINTDisable+0x54>
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	b9 f4       	brne	.+46     	; 0x216c <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    213e:	ab e5       	ldi	r26, 0x5B	; 91
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	eb e5       	ldi	r30, 0x5B	; 91
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7b       	andi	r24, 0xBF	; 191
    214a:	8c 93       	st	X, r24
    214c:	0f c0       	rjmp	.+30     	; 0x216c <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    214e:	ab e5       	ldi	r26, 0x5B	; 91
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	eb e5       	ldi	r30, 0x5B	; 91
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 77       	andi	r24, 0x7F	; 127
    215a:	8c 93       	st	X, r24
    215c:	07 c0       	rjmp	.+14     	; 0x216c <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    215e:	ab e5       	ldi	r26, 0x5B	; 91
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e5       	ldi	r30, 0x5B	; 91
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8f 7d       	andi	r24, 0xDF	; 223
    216a:	8c 93       	st	X, r24
			break;
	}
}
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    21a2:	80 91 8c 01 	lds	r24, 0x018C
    21a6:	90 91 8d 01 	lds	r25, 0x018D
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	29 f0       	breq	.+10     	; 0x21b8 <__vector_1+0x40>
		EXTI[0]();
    21ae:	e0 91 8c 01 	lds	r30, 0x018C
    21b2:	f0 91 8d 01 	lds	r31, 0x018D
    21b6:	09 95       	icall
	}

}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	ff 91       	pop	r31
    21be:	ef 91       	pop	r30
    21c0:	bf 91       	pop	r27
    21c2:	af 91       	pop	r26
    21c4:	9f 91       	pop	r25
    21c6:	8f 91       	pop	r24
    21c8:	7f 91       	pop	r23
    21ca:	6f 91       	pop	r22
    21cc:	5f 91       	pop	r21
    21ce:	4f 91       	pop	r20
    21d0:	3f 91       	pop	r19
    21d2:	2f 91       	pop	r18
    21d4:	0f 90       	pop	r0
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	0f 90       	pop	r0
    21da:	1f 90       	pop	r1
    21dc:	18 95       	reti

000021de <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    21de:	1f 92       	push	r1
    21e0:	0f 92       	push	r0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	0f 92       	push	r0
    21e6:	11 24       	eor	r1, r1
    21e8:	2f 93       	push	r18
    21ea:	3f 93       	push	r19
    21ec:	4f 93       	push	r20
    21ee:	5f 93       	push	r21
    21f0:	6f 93       	push	r22
    21f2:	7f 93       	push	r23
    21f4:	8f 93       	push	r24
    21f6:	9f 93       	push	r25
    21f8:	af 93       	push	r26
    21fa:	bf 93       	push	r27
    21fc:	ef 93       	push	r30
    21fe:	ff 93       	push	r31
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    2208:	80 91 8e 01 	lds	r24, 0x018E
    220c:	90 91 8f 01 	lds	r25, 0x018F
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	29 f0       	breq	.+10     	; 0x221e <__vector_2+0x40>
			EXTI[1]();
    2214:	e0 91 8e 01 	lds	r30, 0x018E
    2218:	f0 91 8f 01 	lds	r31, 0x018F
    221c:	09 95       	icall
	}

}
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	ff 91       	pop	r31
    2224:	ef 91       	pop	r30
    2226:	bf 91       	pop	r27
    2228:	af 91       	pop	r26
    222a:	9f 91       	pop	r25
    222c:	8f 91       	pop	r24
    222e:	7f 91       	pop	r23
    2230:	6f 91       	pop	r22
    2232:	5f 91       	pop	r21
    2234:	4f 91       	pop	r20
    2236:	3f 91       	pop	r19
    2238:	2f 91       	pop	r18
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	0f 90       	pop	r0
    2240:	1f 90       	pop	r1
    2242:	18 95       	reti

00002244 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    2244:	1f 92       	push	r1
    2246:	0f 92       	push	r0
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	0f 92       	push	r0
    224c:	11 24       	eor	r1, r1
    224e:	2f 93       	push	r18
    2250:	3f 93       	push	r19
    2252:	4f 93       	push	r20
    2254:	5f 93       	push	r21
    2256:	6f 93       	push	r22
    2258:	7f 93       	push	r23
    225a:	8f 93       	push	r24
    225c:	9f 93       	push	r25
    225e:	af 93       	push	r26
    2260:	bf 93       	push	r27
    2262:	ef 93       	push	r30
    2264:	ff 93       	push	r31
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    226e:	80 91 90 01 	lds	r24, 0x0190
    2272:	90 91 91 01 	lds	r25, 0x0191
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	29 f0       	breq	.+10     	; 0x2284 <__vector_3+0x40>
			EXTI[2]();
    227a:	e0 91 90 01 	lds	r30, 0x0190
    227e:	f0 91 91 01 	lds	r31, 0x0191
    2282:	09 95       	icall
	}

}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	ff 91       	pop	r31
    228a:	ef 91       	pop	r30
    228c:	bf 91       	pop	r27
    228e:	af 91       	pop	r26
    2290:	9f 91       	pop	r25
    2292:	8f 91       	pop	r24
    2294:	7f 91       	pop	r23
    2296:	6f 91       	pop	r22
    2298:	5f 91       	pop	r21
    229a:	4f 91       	pop	r20
    229c:	3f 91       	pop	r19
    229e:	2f 91       	pop	r18
    22a0:	0f 90       	pop	r0
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	0f 90       	pop	r0
    22a6:	1f 90       	pop	r1
    22a8:	18 95       	reti

000022aa <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    22b2:	ea e3       	ldi	r30, 0x3A	; 58
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	80 83       	st	Z, r24
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    22ba:	e7 e3       	ldi	r30, 0x37	; 55
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 ea       	ldi	r24, 0xA0	; 160
    22c0:	80 83       	st	Z, r24
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    22c2:	e4 e3       	ldi	r30, 0x34	; 52
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	10 82       	st	Z, r1
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    22c8:	e1 e3       	ldi	r30, 0x31	; 49
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    22ce:	eb e3       	ldi	r30, 0x3B	; 59
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    22d4:	e8 e3       	ldi	r30, 0x38	; 56
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	88 e0       	ldi	r24, 0x08	; 8
    22da:	80 83       	st	Z, r24
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    22dc:	e5 e3       	ldi	r30, 0x35	; 53
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    22e2:	e2 e3       	ldi	r30, 0x32	; 50
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	10 82       	st	Z, r1

}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	2e 97       	sbiw	r28, 0x0e	; 14
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	8a 83       	std	Y+2, r24	; 0x02
    2304:	6b 83       	std	Y+3, r22	; 0x03
    2306:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	84 30       	cpi	r24, 0x04	; 4
    2310:	08 f0       	brcs	.+2      	; 0x2314 <DIO_u8SetPinDirection+0x26>
    2312:	0c c1       	rjmp	.+536    	; 0x252c <DIO_u8SetPinDirection+0x23e>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	88 30       	cpi	r24, 0x08	; 8
    2318:	08 f0       	brcs	.+2      	; 0x231c <DIO_u8SetPinDirection+0x2e>
    231a:	08 c1       	rjmp	.+528    	; 0x252c <DIO_u8SetPinDirection+0x23e>
    231c:	8c 81       	ldd	r24, Y+4	; 0x04
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	21 f0       	breq	.+8      	; 0x232a <DIO_u8SetPinDirection+0x3c>
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	88 23       	and	r24, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <DIO_u8SetPinDirection+0x3c>
    2328:	01 c1       	rjmp	.+514    	; 0x252c <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	3e 87       	std	Y+14, r19	; 0x0e
    2332:	2d 87       	std	Y+13, r18	; 0x0d
    2334:	8d 85       	ldd	r24, Y+13	; 0x0d
    2336:	9e 85       	ldd	r25, Y+14	; 0x0e
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	91 05       	cpc	r25, r1
    233c:	09 f4       	brne	.+2      	; 0x2340 <DIO_u8SetPinDirection+0x52>
    233e:	4f c0       	rjmp	.+158    	; 0x23de <DIO_u8SetPinDirection+0xf0>
    2340:	2d 85       	ldd	r18, Y+13	; 0x0d
    2342:	3e 85       	ldd	r19, Y+14	; 0x0e
    2344:	22 30       	cpi	r18, 0x02	; 2
    2346:	31 05       	cpc	r19, r1
    2348:	2c f4       	brge	.+10     	; 0x2354 <DIO_u8SetPinDirection+0x66>
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	71 f0       	breq	.+28     	; 0x236e <DIO_u8SetPinDirection+0x80>
    2352:	ed c0       	rjmp	.+474    	; 0x252e <DIO_u8SetPinDirection+0x240>
    2354:	2d 85       	ldd	r18, Y+13	; 0x0d
    2356:	3e 85       	ldd	r19, Y+14	; 0x0e
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	31 05       	cpc	r19, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <DIO_u8SetPinDirection+0x72>
    235e:	77 c0       	rjmp	.+238    	; 0x244e <DIO_u8SetPinDirection+0x160>
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	91 05       	cpc	r25, r1
    2368:	09 f4       	brne	.+2      	; 0x236c <DIO_u8SetPinDirection+0x7e>
    236a:	a9 c0       	rjmp	.+338    	; 0x24be <DIO_u8SetPinDirection+0x1d0>
    236c:	e0 c0       	rjmp	.+448    	; 0x252e <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	3c 87       	std	Y+12, r19	; 0x0c
    2376:	2b 87       	std	Y+11, r18	; 0x0b
    2378:	8b 85       	ldd	r24, Y+11	; 0x0b
    237a:	9c 85       	ldd	r25, Y+12	; 0x0c
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	d1 f0       	breq	.+52     	; 0x23b4 <DIO_u8SetPinDirection+0xc6>
    2380:	2b 85       	ldd	r18, Y+11	; 0x0b
    2382:	3c 85       	ldd	r19, Y+12	; 0x0c
    2384:	21 30       	cpi	r18, 0x01	; 1
    2386:	31 05       	cpc	r19, r1
    2388:	09 f0       	breq	.+2      	; 0x238c <DIO_u8SetPinDirection+0x9e>
    238a:	d1 c0       	rjmp	.+418    	; 0x252e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    238c:	aa e3       	ldi	r26, 0x3A	; 58
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ea e3       	ldi	r30, 0x3A	; 58
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_u8SetPinDirection+0xbc>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_u8SetPinDirection+0xb8>
    23ae:	84 2b       	or	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	bd c0       	rjmp	.+378    	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    23b4:	aa e3       	ldi	r26, 0x3A	; 58
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	ea e3       	ldi	r30, 0x3A	; 58
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <DIO_u8SetPinDirection+0xe4>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <DIO_u8SetPinDirection+0xe0>
    23d6:	80 95       	com	r24
    23d8:	84 23       	and	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	a8 c0       	rjmp	.+336    	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    23de:	8c 81       	ldd	r24, Y+4	; 0x04
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	3a 87       	std	Y+10, r19	; 0x0a
    23e6:	29 87       	std	Y+9, r18	; 0x09
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	d1 f0       	breq	.+52     	; 0x2424 <DIO_u8SetPinDirection+0x136>
    23f0:	29 85       	ldd	r18, Y+9	; 0x09
    23f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    23f4:	21 30       	cpi	r18, 0x01	; 1
    23f6:	31 05       	cpc	r19, r1
    23f8:	09 f0       	breq	.+2      	; 0x23fc <DIO_u8SetPinDirection+0x10e>
    23fa:	99 c0       	rjmp	.+306    	; 0x252e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    23fc:	a7 e3       	ldi	r26, 0x37	; 55
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e7 e3       	ldi	r30, 0x37	; 55
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	48 2f       	mov	r20, r24
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 2e       	mov	r0, r18
    2414:	02 c0       	rjmp	.+4      	; 0x241a <DIO_u8SetPinDirection+0x12c>
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	0a 94       	dec	r0
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <DIO_u8SetPinDirection+0x128>
    241e:	84 2b       	or	r24, r20
    2420:	8c 93       	st	X, r24
    2422:	85 c0       	rjmp	.+266    	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    2424:	a7 e3       	ldi	r26, 0x37	; 55
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e7 e3       	ldi	r30, 0x37	; 55
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	48 2f       	mov	r20, r24
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	02 2e       	mov	r0, r18
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <DIO_u8SetPinDirection+0x154>
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	0a 94       	dec	r0
    2444:	e2 f7       	brpl	.-8      	; 0x243e <DIO_u8SetPinDirection+0x150>
    2446:	80 95       	com	r24
    2448:	84 23       	and	r24, r20
    244a:	8c 93       	st	X, r24
    244c:	70 c0       	rjmp	.+224    	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	38 87       	std	Y+8, r19	; 0x08
    2456:	2f 83       	std	Y+7, r18	; 0x07
    2458:	8f 81       	ldd	r24, Y+7	; 0x07
    245a:	98 85       	ldd	r25, Y+8	; 0x08
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	d1 f0       	breq	.+52     	; 0x2494 <DIO_u8SetPinDirection+0x1a6>
    2460:	2f 81       	ldd	r18, Y+7	; 0x07
    2462:	38 85       	ldd	r19, Y+8	; 0x08
    2464:	21 30       	cpi	r18, 0x01	; 1
    2466:	31 05       	cpc	r19, r1
    2468:	09 f0       	breq	.+2      	; 0x246c <DIO_u8SetPinDirection+0x17e>
    246a:	61 c0       	rjmp	.+194    	; 0x252e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    246c:	a4 e3       	ldi	r26, 0x34	; 52
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e4 e3       	ldi	r30, 0x34	; 52
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_u8SetPinDirection+0x19c>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_u8SetPinDirection+0x198>
    248e:	84 2b       	or	r24, r20
    2490:	8c 93       	st	X, r24
    2492:	4d c0       	rjmp	.+154    	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2494:	a4 e3       	ldi	r26, 0x34	; 52
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e4 e3       	ldi	r30, 0x34	; 52
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 2e       	mov	r0, r18
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <DIO_u8SetPinDirection+0x1c4>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	0a 94       	dec	r0
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <DIO_u8SetPinDirection+0x1c0>
    24b6:	80 95       	com	r24
    24b8:	84 23       	and	r24, r20
    24ba:	8c 93       	st	X, r24
    24bc:	38 c0       	rjmp	.+112    	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	2d 83       	std	Y+5, r18	; 0x05
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	c9 f0       	breq	.+50     	; 0x2502 <DIO_u8SetPinDirection+0x214>
    24d0:	2d 81       	ldd	r18, Y+5	; 0x05
    24d2:	3e 81       	ldd	r19, Y+6	; 0x06
    24d4:	21 30       	cpi	r18, 0x01	; 1
    24d6:	31 05       	cpc	r19, r1
    24d8:	51 f5       	brne	.+84     	; 0x252e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    24da:	a1 e3       	ldi	r26, 0x31	; 49
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e1 e3       	ldi	r30, 0x31	; 49
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_u8SetPinDirection+0x20a>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <DIO_u8SetPinDirection+0x206>
    24fc:	84 2b       	or	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	16 c0       	rjmp	.+44     	; 0x252e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    2502:	a1 e3       	ldi	r26, 0x31	; 49
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e1 e3       	ldi	r30, 0x31	; 49
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <DIO_u8SetPinDirection+0x232>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <DIO_u8SetPinDirection+0x22e>
    2524:	80 95       	com	r24
    2526:	84 23       	and	r24, r20
    2528:	8c 93       	st	X, r24
    252a:	01 c0       	rjmp	.+2      	; 0x252e <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    252c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    252e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2530:	2e 96       	adiw	r28, 0x0e	; 14
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	2f 97       	sbiw	r28, 0x0f	; 15
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	6c 83       	std	Y+4, r22	; 0x04
    255a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	08 f0       	brcs	.+2      	; 0x2568 <DIO_u8SetPinValue+0x26>
    2566:	13 c1       	rjmp	.+550    	; 0x278e <DIO_u8SetPinValue+0x24c>
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	88 30       	cpi	r24, 0x08	; 8
    256c:	08 f0       	brcs	.+2      	; 0x2570 <DIO_u8SetPinValue+0x2e>
    256e:	0f c1       	rjmp	.+542    	; 0x278e <DIO_u8SetPinValue+0x24c>
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	88 23       	and	r24, r24
    2574:	21 f0       	breq	.+8      	; 0x257e <DIO_u8SetPinValue+0x3c>
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	09 f0       	breq	.+2      	; 0x257e <DIO_u8SetPinValue+0x3c>
    257c:	08 c1       	rjmp	.+528    	; 0x278e <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3f 87       	std	Y+15, r19	; 0x0f
    2586:	2e 87       	std	Y+14, r18	; 0x0e
    2588:	8e 85       	ldd	r24, Y+14	; 0x0e
    258a:	9f 85       	ldd	r25, Y+15	; 0x0f
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <DIO_u8SetPinValue+0x52>
    2592:	50 c0       	rjmp	.+160    	; 0x2634 <DIO_u8SetPinValue+0xf2>
    2594:	2e 85       	ldd	r18, Y+14	; 0x0e
    2596:	3f 85       	ldd	r19, Y+15	; 0x0f
    2598:	22 30       	cpi	r18, 0x02	; 2
    259a:	31 05       	cpc	r19, r1
    259c:	2c f4       	brge	.+10     	; 0x25a8 <DIO_u8SetPinValue+0x66>
    259e:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	71 f0       	breq	.+28     	; 0x25c2 <DIO_u8SetPinValue+0x80>
    25a6:	f4 c0       	rjmp	.+488    	; 0x2790 <DIO_u8SetPinValue+0x24e>
    25a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    25aa:	3f 85       	ldd	r19, Y+15	; 0x0f
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <DIO_u8SetPinValue+0x72>
    25b2:	79 c0       	rjmp	.+242    	; 0x26a6 <DIO_u8SetPinValue+0x164>
    25b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <DIO_u8SetPinValue+0x7e>
    25be:	ad c0       	rjmp	.+346    	; 0x271a <DIO_u8SetPinValue+0x1d8>
    25c0:	e7 c0       	rjmp	.+462    	; 0x2790 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	3d 87       	std	Y+13, r19	; 0x0d
    25ca:	2c 87       	std	Y+12, r18	; 0x0c
    25cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    25ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	c9 f0       	breq	.+50     	; 0x2606 <DIO_u8SetPinValue+0xc4>
    25d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    25d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    25d8:	21 30       	cpi	r18, 0x01	; 1
    25da:	31 05       	cpc	r19, r1
    25dc:	49 f5       	brne	.+82     	; 0x2630 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    25de:	ab e3       	ldi	r26, 0x3B	; 59
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	eb e3       	ldi	r30, 0x3B	; 59
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <DIO_u8SetPinValue+0xba>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <DIO_u8SetPinValue+0xb6>
    2600:	84 2b       	or	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	c5 c0       	rjmp	.+394    	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2606:	ab e3       	ldi	r26, 0x3B	; 59
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	eb e3       	ldi	r30, 0x3B	; 59
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 2e       	mov	r0, r18
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <DIO_u8SetPinValue+0xe2>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	0a 94       	dec	r0
    2626:	e2 f7       	brpl	.-8      	; 0x2620 <DIO_u8SetPinValue+0xde>
    2628:	80 95       	com	r24
    262a:	84 23       	and	r24, r20
    262c:	8c 93       	st	X, r24
    262e:	b0 c0       	rjmp	.+352    	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2630:	1a 82       	std	Y+2, r1	; 0x02
    2632:	ae c0       	rjmp	.+348    	; 0x2790 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	3b 87       	std	Y+11, r19	; 0x0b
    263c:	2a 87       	std	Y+10, r18	; 0x0a
    263e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2640:	9b 85       	ldd	r25, Y+11	; 0x0b
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	c9 f0       	breq	.+50     	; 0x2678 <DIO_u8SetPinValue+0x136>
    2646:	2a 85       	ldd	r18, Y+10	; 0x0a
    2648:	3b 85       	ldd	r19, Y+11	; 0x0b
    264a:	21 30       	cpi	r18, 0x01	; 1
    264c:	31 05       	cpc	r19, r1
    264e:	49 f5       	brne	.+82     	; 0x26a2 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    2650:	a8 e3       	ldi	r26, 0x38	; 56
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e8 e3       	ldi	r30, 0x38	; 56
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	48 2f       	mov	r20, r24
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 2e       	mov	r0, r18
    2668:	02 c0       	rjmp	.+4      	; 0x266e <DIO_u8SetPinValue+0x12c>
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	0a 94       	dec	r0
    2670:	e2 f7       	brpl	.-8      	; 0x266a <DIO_u8SetPinValue+0x128>
    2672:	84 2b       	or	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	8c c0       	rjmp	.+280    	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    2678:	a8 e3       	ldi	r26, 0x38	; 56
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e8 e3       	ldi	r30, 0x38	; 56
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	48 2f       	mov	r20, r24
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	02 2e       	mov	r0, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <DIO_u8SetPinValue+0x154>
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	0a 94       	dec	r0
    2698:	e2 f7       	brpl	.-8      	; 0x2692 <DIO_u8SetPinValue+0x150>
    269a:	80 95       	com	r24
    269c:	84 23       	and	r24, r20
    269e:	8c 93       	st	X, r24
    26a0:	77 c0       	rjmp	.+238    	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    26a2:	1a 82       	std	Y+2, r1	; 0x02
    26a4:	75 c0       	rjmp	.+234    	; 0x2790 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	39 87       	std	Y+9, r19	; 0x09
    26ae:	28 87       	std	Y+8, r18	; 0x08
    26b0:	88 85       	ldd	r24, Y+8	; 0x08
    26b2:	99 85       	ldd	r25, Y+9	; 0x09
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	31 f0       	breq	.+12     	; 0x26c4 <DIO_u8SetPinValue+0x182>
    26b8:	28 85       	ldd	r18, Y+8	; 0x08
    26ba:	39 85       	ldd	r19, Y+9	; 0x09
    26bc:	21 30       	cpi	r18, 0x01	; 1
    26be:	31 05       	cpc	r19, r1
    26c0:	b1 f0       	breq	.+44     	; 0x26ee <DIO_u8SetPinValue+0x1ac>
    26c2:	29 c0       	rjmp	.+82     	; 0x2716 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    26c4:	a5 e3       	ldi	r26, 0x35	; 53
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e5 e3       	ldi	r30, 0x35	; 53
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <DIO_u8SetPinValue+0x1a0>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <DIO_u8SetPinValue+0x19c>
    26e6:	80 95       	com	r24
    26e8:	84 23       	and	r24, r20
    26ea:	8c 93       	st	X, r24
    26ec:	51 c0       	rjmp	.+162    	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    26ee:	a5 e3       	ldi	r26, 0x35	; 53
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e5 e3       	ldi	r30, 0x35	; 53
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	48 2f       	mov	r20, r24
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	02 2e       	mov	r0, r18
    2706:	02 c0       	rjmp	.+4      	; 0x270c <DIO_u8SetPinValue+0x1ca>
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	0a 94       	dec	r0
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <DIO_u8SetPinValue+0x1c6>
    2710:	84 2b       	or	r24, r20
    2712:	8c 93       	st	X, r24
    2714:	3d c0       	rjmp	.+122    	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2716:	1a 82       	std	Y+2, r1	; 0x02
    2718:	3b c0       	rjmp	.+118    	; 0x2790 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	3f 83       	std	Y+7, r19	; 0x07
    2722:	2e 83       	std	Y+6, r18	; 0x06
    2724:	8e 81       	ldd	r24, Y+6	; 0x06
    2726:	9f 81       	ldd	r25, Y+7	; 0x07
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	31 f0       	breq	.+12     	; 0x2738 <DIO_u8SetPinValue+0x1f6>
    272c:	2e 81       	ldd	r18, Y+6	; 0x06
    272e:	3f 81       	ldd	r19, Y+7	; 0x07
    2730:	21 30       	cpi	r18, 0x01	; 1
    2732:	31 05       	cpc	r19, r1
    2734:	b1 f0       	breq	.+44     	; 0x2762 <DIO_u8SetPinValue+0x220>
    2736:	29 c0       	rjmp	.+82     	; 0x278a <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2738:	a5 e3       	ldi	r26, 0x35	; 53
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e5 e3       	ldi	r30, 0x35	; 53
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	48 2f       	mov	r20, r24
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 2e       	mov	r0, r18
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <DIO_u8SetPinValue+0x214>
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	0a 94       	dec	r0
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <DIO_u8SetPinValue+0x210>
    275a:	80 95       	com	r24
    275c:	84 23       	and	r24, r20
    275e:	8c 93       	st	X, r24
    2760:	17 c0       	rjmp	.+46     	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    2762:	a2 e3       	ldi	r26, 0x32	; 50
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e2 e3       	ldi	r30, 0x32	; 50
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	48 2f       	mov	r20, r24
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	02 2e       	mov	r0, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <DIO_u8SetPinValue+0x23e>
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	0a 94       	dec	r0
    2782:	e2 f7       	brpl	.-8      	; 0x277c <DIO_u8SetPinValue+0x23a>
    2784:	84 2b       	or	r24, r20
    2786:	8c 93       	st	X, r24
    2788:	03 c0       	rjmp	.+6      	; 0x2790 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    278a:	1a 82       	std	Y+2, r1	; 0x02
    278c:	01 c0       	rjmp	.+2      	; 0x2790 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    278e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2792:	2f 96       	adiw	r28, 0x0f	; 15
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	28 97       	sbiw	r28, 0x08	; 8
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	8b 83       	std	Y+3, r24	; 0x03
    27ba:	6c 83       	std	Y+4, r22	; 0x04
    27bc:	5e 83       	std	Y+6, r21	; 0x06
    27be:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	84 30       	cpi	r24, 0x04	; 4
    27c8:	08 f0       	brcs	.+2      	; 0x27cc <DIO_u8GetPinValue+0x28>
    27ca:	9f c0       	rjmp	.+318    	; 0x290a <DIO_u8GetPinValue+0x166>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	88 30       	cpi	r24, 0x08	; 8
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <DIO_u8GetPinValue+0x30>
    27d2:	9b c0       	rjmp	.+310    	; 0x290a <DIO_u8GetPinValue+0x166>
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	09 f4       	brne	.+2      	; 0x27de <DIO_u8GetPinValue+0x3a>
    27dc:	96 c0       	rjmp	.+300    	; 0x290a <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	38 87       	std	Y+8, r19	; 0x08
    27e6:	2f 83       	std	Y+7, r18	; 0x07
    27e8:	4f 81       	ldd	r20, Y+7	; 0x07
    27ea:	58 85       	ldd	r21, Y+8	; 0x08
    27ec:	41 30       	cpi	r20, 0x01	; 1
    27ee:	51 05       	cpc	r21, r1
    27f0:	a9 f1       	breq	.+106    	; 0x285c <DIO_u8GetPinValue+0xb8>
    27f2:	8f 81       	ldd	r24, Y+7	; 0x07
    27f4:	98 85       	ldd	r25, Y+8	; 0x08
    27f6:	82 30       	cpi	r24, 0x02	; 2
    27f8:	91 05       	cpc	r25, r1
    27fa:	34 f4       	brge	.+12     	; 0x2808 <DIO_u8GetPinValue+0x64>
    27fc:	2f 81       	ldd	r18, Y+7	; 0x07
    27fe:	38 85       	ldd	r19, Y+8	; 0x08
    2800:	21 15       	cp	r18, r1
    2802:	31 05       	cpc	r19, r1
    2804:	71 f0       	breq	.+28     	; 0x2822 <DIO_u8GetPinValue+0x7e>
    2806:	82 c0       	rjmp	.+260    	; 0x290c <DIO_u8GetPinValue+0x168>
    2808:	4f 81       	ldd	r20, Y+7	; 0x07
    280a:	58 85       	ldd	r21, Y+8	; 0x08
    280c:	42 30       	cpi	r20, 0x02	; 2
    280e:	51 05       	cpc	r21, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <DIO_u8GetPinValue+0x70>
    2812:	41 c0       	rjmp	.+130    	; 0x2896 <DIO_u8GetPinValue+0xf2>
    2814:	8f 81       	ldd	r24, Y+7	; 0x07
    2816:	98 85       	ldd	r25, Y+8	; 0x08
    2818:	83 30       	cpi	r24, 0x03	; 3
    281a:	91 05       	cpc	r25, r1
    281c:	09 f4       	brne	.+2      	; 0x2820 <DIO_u8GetPinValue+0x7c>
    281e:	58 c0       	rjmp	.+176    	; 0x28d0 <DIO_u8GetPinValue+0x12c>
    2820:	75 c0       	rjmp	.+234    	; 0x290c <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    2822:	e9 e3       	ldi	r30, 0x39	; 57
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	88 2f       	mov	r24, r24
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	a9 01       	movw	r20, r18
    2834:	02 c0       	rjmp	.+4      	; 0x283a <DIO_u8GetPinValue+0x96>
    2836:	55 95       	asr	r21
    2838:	47 95       	ror	r20
    283a:	8a 95       	dec	r24
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <DIO_u8GetPinValue+0x92>
    283e:	ca 01       	movw	r24, r20
    2840:	81 70       	andi	r24, 0x01	; 1
    2842:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	88 23       	and	r24, r24
    2848:	21 f4       	brne	.+8      	; 0x2852 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    284a:	ed 81       	ldd	r30, Y+5	; 0x05
    284c:	fe 81       	ldd	r31, Y+6	; 0x06
    284e:	10 82       	st	Z, r1
    2850:	5d c0       	rjmp	.+186    	; 0x290c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2852:	ed 81       	ldd	r30, Y+5	; 0x05
    2854:	fe 81       	ldd	r31, Y+6	; 0x06
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	80 83       	st	Z, r24
    285a:	58 c0       	rjmp	.+176    	; 0x290c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    285c:	e6 e3       	ldi	r30, 0x36	; 54
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a9 01       	movw	r20, r18
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <DIO_u8GetPinValue+0xd0>
    2870:	55 95       	asr	r21
    2872:	47 95       	ror	r20
    2874:	8a 95       	dec	r24
    2876:	e2 f7       	brpl	.-8      	; 0x2870 <DIO_u8GetPinValue+0xcc>
    2878:	ca 01       	movw	r24, r20
    287a:	81 70       	andi	r24, 0x01	; 1
    287c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	88 23       	and	r24, r24
    2882:	21 f4       	brne	.+8      	; 0x288c <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2884:	ed 81       	ldd	r30, Y+5	; 0x05
    2886:	fe 81       	ldd	r31, Y+6	; 0x06
    2888:	10 82       	st	Z, r1
    288a:	40 c0       	rjmp	.+128    	; 0x290c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    288c:	ed 81       	ldd	r30, Y+5	; 0x05
    288e:	fe 81       	ldd	r31, Y+6	; 0x06
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 83       	st	Z, r24
    2894:	3b c0       	rjmp	.+118    	; 0x290c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    2896:	e3 e3       	ldi	r30, 0x33	; 51
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a9 01       	movw	r20, r18
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <DIO_u8GetPinValue+0x10a>
    28aa:	55 95       	asr	r21
    28ac:	47 95       	ror	r20
    28ae:	8a 95       	dec	r24
    28b0:	e2 f7       	brpl	.-8      	; 0x28aa <DIO_u8GetPinValue+0x106>
    28b2:	ca 01       	movw	r24, r20
    28b4:	81 70       	andi	r24, 0x01	; 1
    28b6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	88 23       	and	r24, r24
    28bc:	21 f4       	brne	.+8      	; 0x28c6 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    28be:	ed 81       	ldd	r30, Y+5	; 0x05
    28c0:	fe 81       	ldd	r31, Y+6	; 0x06
    28c2:	10 82       	st	Z, r1
    28c4:	23 c0       	rjmp	.+70     	; 0x290c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    28c6:	ed 81       	ldd	r30, Y+5	; 0x05
    28c8:	fe 81       	ldd	r31, Y+6	; 0x06
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 83       	st	Z, r24
    28ce:	1e c0       	rjmp	.+60     	; 0x290c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    28d0:	e0 e3       	ldi	r30, 0x30	; 48
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	8c 81       	ldd	r24, Y+4	; 0x04
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a9 01       	movw	r20, r18
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <DIO_u8GetPinValue+0x144>
    28e4:	55 95       	asr	r21
    28e6:	47 95       	ror	r20
    28e8:	8a 95       	dec	r24
    28ea:	e2 f7       	brpl	.-8      	; 0x28e4 <DIO_u8GetPinValue+0x140>
    28ec:	ca 01       	movw	r24, r20
    28ee:	81 70       	andi	r24, 0x01	; 1
    28f0:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	88 23       	and	r24, r24
    28f6:	21 f4       	brne	.+8      	; 0x2900 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    28f8:	ed 81       	ldd	r30, Y+5	; 0x05
    28fa:	fe 81       	ldd	r31, Y+6	; 0x06
    28fc:	10 82       	st	Z, r1
    28fe:	06 c0       	rjmp	.+12     	; 0x290c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2900:	ed 81       	ldd	r30, Y+5	; 0x05
    2902:	fe 81       	ldd	r31, Y+6	; 0x06
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	80 83       	st	Z, r24
    2908:	01 c0       	rjmp	.+2      	; 0x290c <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    290a:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    290e:	28 96       	adiw	r28, 0x08	; 8
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <DIO_getPinValueWithoutPointer+0x6>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <DIO_getPinValueWithoutPointer+0x8>
    2928:	0f 92       	push	r0
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	8a 83       	std	Y+2, r24	; 0x02
    2930:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    2932:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	88 30       	cpi	r24, 0x08	; 8
    2938:	08 f0       	brcs	.+2      	; 0x293c <DIO_getPinValueWithoutPointer+0x1c>
    293a:	6b c0       	rjmp	.+214    	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	08 f0       	brcs	.+2      	; 0x2944 <DIO_getPinValueWithoutPointer+0x24>
    2942:	67 c0       	rjmp	.+206    	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	3d 83       	std	Y+5, r19	; 0x05
    294c:	2c 83       	std	Y+4, r18	; 0x04
    294e:	4c 81       	ldd	r20, Y+4	; 0x04
    2950:	5d 81       	ldd	r21, Y+5	; 0x05
    2952:	41 30       	cpi	r20, 0x01	; 1
    2954:	51 05       	cpc	r21, r1
    2956:	41 f1       	breq	.+80     	; 0x29a8 <DIO_getPinValueWithoutPointer+0x88>
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	9d 81       	ldd	r25, Y+5	; 0x05
    295c:	82 30       	cpi	r24, 0x02	; 2
    295e:	91 05       	cpc	r25, r1
    2960:	34 f4       	brge	.+12     	; 0x296e <DIO_getPinValueWithoutPointer+0x4e>
    2962:	2c 81       	ldd	r18, Y+4	; 0x04
    2964:	3d 81       	ldd	r19, Y+5	; 0x05
    2966:	21 15       	cp	r18, r1
    2968:	31 05       	cpc	r19, r1
    296a:	61 f0       	breq	.+24     	; 0x2984 <DIO_getPinValueWithoutPointer+0x64>
    296c:	52 c0       	rjmp	.+164    	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
    296e:	4c 81       	ldd	r20, Y+4	; 0x04
    2970:	5d 81       	ldd	r21, Y+5	; 0x05
    2972:	42 30       	cpi	r20, 0x02	; 2
    2974:	51 05       	cpc	r21, r1
    2976:	51 f1       	breq	.+84     	; 0x29cc <DIO_getPinValueWithoutPointer+0xac>
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	9d 81       	ldd	r25, Y+5	; 0x05
    297c:	83 30       	cpi	r24, 0x03	; 3
    297e:	91 05       	cpc	r25, r1
    2980:	b9 f1       	breq	.+110    	; 0x29f0 <DIO_getPinValueWithoutPointer+0xd0>
    2982:	47 c0       	rjmp	.+142    	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    2984:	e9 e3       	ldi	r30, 0x39	; 57
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a9 01       	movw	r20, r18
    2996:	02 c0       	rjmp	.+4      	; 0x299c <DIO_getPinValueWithoutPointer+0x7c>
    2998:	55 95       	asr	r21
    299a:	47 95       	ror	r20
    299c:	8a 95       	dec	r24
    299e:	e2 f7       	brpl	.-8      	; 0x2998 <DIO_getPinValueWithoutPointer+0x78>
    29a0:	ca 01       	movw	r24, r20
    29a2:	81 70       	andi	r24, 0x01	; 1
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	35 c0       	rjmp	.+106    	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    29a8:	e6 e3       	ldi	r30, 0x36	; 54
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	88 2f       	mov	r24, r24
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	a9 01       	movw	r20, r18
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <DIO_getPinValueWithoutPointer+0xa0>
    29bc:	55 95       	asr	r21
    29be:	47 95       	ror	r20
    29c0:	8a 95       	dec	r24
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <DIO_getPinValueWithoutPointer+0x9c>
    29c4:	ca 01       	movw	r24, r20
    29c6:	81 70       	andi	r24, 0x01	; 1
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	23 c0       	rjmp	.+70     	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    29cc:	e3 e3       	ldi	r30, 0x33	; 51
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a9 01       	movw	r20, r18
    29de:	02 c0       	rjmp	.+4      	; 0x29e4 <DIO_getPinValueWithoutPointer+0xc4>
    29e0:	55 95       	asr	r21
    29e2:	47 95       	ror	r20
    29e4:	8a 95       	dec	r24
    29e6:	e2 f7       	brpl	.-8      	; 0x29e0 <DIO_getPinValueWithoutPointer+0xc0>
    29e8:	ca 01       	movw	r24, r20
    29ea:	81 70       	andi	r24, 0x01	; 1
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	11 c0       	rjmp	.+34     	; 0x2a12 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    29f0:	e0 e3       	ldi	r30, 0x30	; 48
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a9 01       	movw	r20, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <DIO_getPinValueWithoutPointer+0xe8>
    2a04:	55 95       	asr	r21
    2a06:	47 95       	ror	r20
    2a08:	8a 95       	dec	r24
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <DIO_getPinValueWithoutPointer+0xe4>
    2a0c:	ca 01       	movw	r24, r20
    2a0e:	81 70       	andi	r24, 0x01	; 1
    2a10:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	2d 97       	sbiw	r28, 0x0d	; 13
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	3c 87       	std	Y+12, r19	; 0x0c
    2a44:	2b 87       	std	Y+11, r18	; 0x0b
    2a46:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a48:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	71 f1       	breq	.+92     	; 0x2aac <DIO_u8SetPortDirection+0x88>
    2a50:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a52:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	2c f4       	brge	.+10     	; 0x2a64 <DIO_u8SetPortDirection+0x40>
    2a5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	69 f0       	breq	.+26     	; 0x2a7c <DIO_u8SetPortDirection+0x58>
    2a62:	6b c0       	rjmp	.+214    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
    2a64:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a66:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a68:	22 30       	cpi	r18, 0x02	; 2
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	b9 f1       	breq	.+110    	; 0x2adc <DIO_u8SetPortDirection+0xb8>
    2a6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a72:	83 30       	cpi	r24, 0x03	; 3
    2a74:	91 05       	cpc	r25, r1
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <DIO_u8SetPortDirection+0x56>
    2a78:	49 c0       	rjmp	.+146    	; 0x2b0c <DIO_u8SetPortDirection+0xe8>
    2a7a:	5f c0       	rjmp	.+190    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	3a 87       	std	Y+10, r19	; 0x0a
    2a84:	29 87       	std	Y+9, r18	; 0x09
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	31 f0       	breq	.+12     	; 0x2a9a <DIO_u8SetPortDirection+0x76>
    2a8e:	29 85       	ldd	r18, Y+9	; 0x09
    2a90:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a92:	21 30       	cpi	r18, 0x01	; 1
    2a94:	31 05       	cpc	r19, r1
    2a96:	29 f0       	breq	.+10     	; 0x2aa2 <DIO_u8SetPortDirection+0x7e>
    2a98:	50 c0       	rjmp	.+160    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    2a9a:	ea e3       	ldi	r30, 0x3A	; 58
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	10 82       	st	Z, r1
    2aa0:	4c c0       	rjmp	.+152    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    2aa2:	ea e3       	ldi	r30, 0x3A	; 58
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
    2aa8:	80 83       	st	Z, r24
    2aaa:	47 c0       	rjmp	.+142    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	38 87       	std	Y+8, r19	; 0x08
    2ab4:	2f 83       	std	Y+7, r18	; 0x07
    2ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab8:	98 85       	ldd	r25, Y+8	; 0x08
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	31 f0       	breq	.+12     	; 0x2aca <DIO_u8SetPortDirection+0xa6>
    2abe:	2f 81       	ldd	r18, Y+7	; 0x07
    2ac0:	38 85       	ldd	r19, Y+8	; 0x08
    2ac2:	21 30       	cpi	r18, 0x01	; 1
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	29 f0       	breq	.+10     	; 0x2ad2 <DIO_u8SetPortDirection+0xae>
    2ac8:	38 c0       	rjmp	.+112    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2aca:	e7 e3       	ldi	r30, 0x37	; 55
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	10 82       	st	Z, r1
    2ad0:	34 c0       	rjmp	.+104    	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    2ad2:	e7 e3       	ldi	r30, 0x37	; 55
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	80 83       	st	Z, r24
    2ada:	2f c0       	rjmp	.+94     	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	3e 83       	std	Y+6, r19	; 0x06
    2ae4:	2d 83       	std	Y+5, r18	; 0x05
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	31 f0       	breq	.+12     	; 0x2afa <DIO_u8SetPortDirection+0xd6>
    2aee:	2d 81       	ldd	r18, Y+5	; 0x05
    2af0:	3e 81       	ldd	r19, Y+6	; 0x06
    2af2:	21 30       	cpi	r18, 0x01	; 1
    2af4:	31 05       	cpc	r19, r1
    2af6:	29 f0       	breq	.+10     	; 0x2b02 <DIO_u8SetPortDirection+0xde>
    2af8:	20 c0       	rjmp	.+64     	; 0x2b3a <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2afa:	e4 e3       	ldi	r30, 0x34	; 52
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	10 82       	st	Z, r1
    2b00:	1c c0       	rjmp	.+56     	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    2b02:	e4 e3       	ldi	r30, 0x34	; 52
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	8f ef       	ldi	r24, 0xFF	; 255
    2b08:	80 83       	st	Z, r24
    2b0a:	17 c0       	rjmp	.+46     	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	3c 83       	std	Y+4, r19	; 0x04
    2b14:	2b 83       	std	Y+3, r18	; 0x03
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	31 f0       	breq	.+12     	; 0x2b2a <DIO_u8SetPortDirection+0x106>
    2b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b20:	3c 81       	ldd	r19, Y+4	; 0x04
    2b22:	21 30       	cpi	r18, 0x01	; 1
    2b24:	31 05       	cpc	r19, r1
    2b26:	29 f0       	breq	.+10     	; 0x2b32 <DIO_u8SetPortDirection+0x10e>
    2b28:	08 c0       	rjmp	.+16     	; 0x2b3a <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2b2a:	e1 e3       	ldi	r30, 0x31	; 49
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	10 82       	st	Z, r1
    2b30:	04 c0       	rjmp	.+8      	; 0x2b3a <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    2b32:	e1 e3       	ldi	r30, 0x31	; 49
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	8f ef       	ldi	r24, 0xFF	; 255
    2b38:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2b3a:	2d 96       	adiw	r28, 0x0d	; 13
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	2d 97       	sbiw	r28, 0x0d	; 13
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	8a 83       	std	Y+2, r24	; 0x02
    2b62:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	84 30       	cpi	r24, 0x04	; 4
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <DIO_u8SetPortValue+0x24>
    2b6e:	80 c0       	rjmp	.+256    	; 0x2c70 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	3d 87       	std	Y+13, r19	; 0x0d
    2b78:	2c 87       	std	Y+12, r18	; 0x0c
    2b7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	91 05       	cpc	r25, r1
    2b82:	71 f1       	breq	.+92     	; 0x2be0 <DIO_u8SetPortValue+0x94>
    2b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b86:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b88:	22 30       	cpi	r18, 0x02	; 2
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <DIO_u8SetPortValue+0x4c>
    2b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b90:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f0       	breq	.+26     	; 0x2bb0 <DIO_u8SetPortValue+0x64>
    2b96:	6d c0       	rjmp	.+218    	; 0x2c72 <DIO_u8SetPortValue+0x126>
    2b98:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b9a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b9c:	22 30       	cpi	r18, 0x02	; 2
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	b9 f1       	breq	.+110    	; 0x2c10 <DIO_u8SetPortValue+0xc4>
    2ba2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ba6:	83 30       	cpi	r24, 0x03	; 3
    2ba8:	91 05       	cpc	r25, r1
    2baa:	09 f4       	brne	.+2      	; 0x2bae <DIO_u8SetPortValue+0x62>
    2bac:	49 c0       	rjmp	.+146    	; 0x2c40 <DIO_u8SetPortValue+0xf4>
    2bae:	61 c0       	rjmp	.+194    	; 0x2c72 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	3b 87       	std	Y+11, r19	; 0x0b
    2bb8:	2a 87       	std	Y+10, r18	; 0x0a
    2bba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	31 f0       	breq	.+12     	; 0x2bce <DIO_u8SetPortValue+0x82>
    2bc2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2bc4:	3b 85       	ldd	r19, Y+11	; 0x0b
    2bc6:	21 30       	cpi	r18, 0x01	; 1
    2bc8:	31 05       	cpc	r19, r1
    2bca:	29 f0       	breq	.+10     	; 0x2bd6 <DIO_u8SetPortValue+0x8a>
    2bcc:	52 c0       	rjmp	.+164    	; 0x2c72 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    2bce:	eb e3       	ldi	r30, 0x3B	; 59
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	10 82       	st	Z, r1
    2bd4:	4e c0       	rjmp	.+156    	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2bd6:	eb e3       	ldi	r30, 0x3B	; 59
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	8f ef       	ldi	r24, 0xFF	; 255
    2bdc:	80 83       	st	Z, r24
    2bde:	49 c0       	rjmp	.+146    	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	39 87       	std	Y+9, r19	; 0x09
    2be8:	28 87       	std	Y+8, r18	; 0x08
    2bea:	88 85       	ldd	r24, Y+8	; 0x08
    2bec:	99 85       	ldd	r25, Y+9	; 0x09
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	31 f0       	breq	.+12     	; 0x2bfe <DIO_u8SetPortValue+0xb2>
    2bf2:	28 85       	ldd	r18, Y+8	; 0x08
    2bf4:	39 85       	ldd	r19, Y+9	; 0x09
    2bf6:	21 30       	cpi	r18, 0x01	; 1
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	29 f0       	breq	.+10     	; 0x2c06 <DIO_u8SetPortValue+0xba>
    2bfc:	3a c0       	rjmp	.+116    	; 0x2c72 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    2bfe:	e8 e3       	ldi	r30, 0x38	; 56
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	10 82       	st	Z, r1
    2c04:	36 c0       	rjmp	.+108    	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2c06:	e8 e3       	ldi	r30, 0x38	; 56
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	80 83       	st	Z, r24
    2c0e:	31 c0       	rjmp	.+98     	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	3f 83       	std	Y+7, r19	; 0x07
    2c18:	2e 83       	std	Y+6, r18	; 0x06
    2c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	31 f0       	breq	.+12     	; 0x2c2e <DIO_u8SetPortValue+0xe2>
    2c22:	2e 81       	ldd	r18, Y+6	; 0x06
    2c24:	3f 81       	ldd	r19, Y+7	; 0x07
    2c26:	21 30       	cpi	r18, 0x01	; 1
    2c28:	31 05       	cpc	r19, r1
    2c2a:	29 f0       	breq	.+10     	; 0x2c36 <DIO_u8SetPortValue+0xea>
    2c2c:	22 c0       	rjmp	.+68     	; 0x2c72 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    2c2e:	e5 e3       	ldi	r30, 0x35	; 53
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	10 82       	st	Z, r1
    2c34:	1e c0       	rjmp	.+60     	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2c36:	e5 e3       	ldi	r30, 0x35	; 53
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	80 83       	st	Z, r24
    2c3e:	19 c0       	rjmp	.+50     	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	3d 83       	std	Y+5, r19	; 0x05
    2c48:	2c 83       	std	Y+4, r18	; 0x04
    2c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	31 f0       	breq	.+12     	; 0x2c5e <DIO_u8SetPortValue+0x112>
    2c52:	2c 81       	ldd	r18, Y+4	; 0x04
    2c54:	3d 81       	ldd	r19, Y+5	; 0x05
    2c56:	21 30       	cpi	r18, 0x01	; 1
    2c58:	31 05       	cpc	r19, r1
    2c5a:	29 f0       	breq	.+10     	; 0x2c66 <DIO_u8SetPortValue+0x11a>
    2c5c:	0a c0       	rjmp	.+20     	; 0x2c72 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    2c5e:	e2 e3       	ldi	r30, 0x32	; 50
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	10 82       	st	Z, r1
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    2c66:	e2 e3       	ldi	r30, 0x32	; 50
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	8f ef       	ldi	r24, 0xFF	; 255
    2c6c:	80 83       	st	Z, r24
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2c70:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c74:	2d 96       	adiw	r28, 0x0d	; 13
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <DIO_u8GetPortValue+0x6>
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <DIO_u8GetPortValue+0x8>
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <DIO_u8GetPortValue+0xa>
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	8a 83       	std	Y+2, r24	; 0x02
    2c96:	7c 83       	std	Y+4, r23	; 0x04
    2c98:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	84 30       	cpi	r24, 0x04	; 4
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <DIO_u8GetPortValue+0x20>
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <DIO_u8GetPortValue+0x9e>
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	d9 f1       	breq	.+118    	; 0x2d24 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	3e 83       	std	Y+6, r19	; 0x06
    2cb6:	2d 83       	std	Y+5, r18	; 0x05
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	81 30       	cpi	r24, 0x01	; 1
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	e1 f0       	breq	.+56     	; 0x2cfa <DIO_u8GetPortValue+0x74>
    2cc2:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc4:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc6:	22 30       	cpi	r18, 0x02	; 2
    2cc8:	31 05       	cpc	r19, r1
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <DIO_u8GetPortValue+0x50>
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	61 f0       	breq	.+24     	; 0x2cec <DIO_u8GetPortValue+0x66>
    2cd4:	28 c0       	rjmp	.+80     	; 0x2d26 <DIO_u8GetPortValue+0xa0>
    2cd6:	2d 81       	ldd	r18, Y+5	; 0x05
    2cd8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cda:	22 30       	cpi	r18, 0x02	; 2
    2cdc:	31 05       	cpc	r19, r1
    2cde:	a1 f0       	breq	.+40     	; 0x2d08 <DIO_u8GetPortValue+0x82>
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	83 30       	cpi	r24, 0x03	; 3
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	b1 f0       	breq	.+44     	; 0x2d16 <DIO_u8GetPortValue+0x90>
    2cea:	1d c0       	rjmp	.+58     	; 0x2d26 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2cec:	e9 e3       	ldi	r30, 0x39	; 57
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	80 83       	st	Z, r24
    2cf8:	16 c0       	rjmp	.+44     	; 0x2d26 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2cfa:	e6 e3       	ldi	r30, 0x36	; 54
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	80 83       	st	Z, r24
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2d08:	e3 e3       	ldi	r30, 0x33	; 51
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d10:	fc 81       	ldd	r31, Y+4	; 0x04
    2d12:	80 83       	st	Z, r24
    2d14:	08 c0       	rjmp	.+16     	; 0x2d26 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2d16:	e0 e3       	ldi	r30, 0x30	; 48
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d20:	80 83       	st	Z, r24
    2d22:	01 c0       	rjmp	.+2      	; 0x2d26 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2d24:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d28:	26 96       	adiw	r28, 0x06	; 6
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2d42:	a7 e2       	ldi	r26, 0x27	; 39
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e7 e2       	ldi	r30, 0x27	; 39
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8f 77       	andi	r24, 0x7F	; 127
    2d4e:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2d50:	a7 e2       	ldi	r26, 0x27	; 39
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e7 e2       	ldi	r30, 0x27	; 39
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 64       	ori	r24, 0x40	; 64
    2d5c:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2d5e:	a7 e2       	ldi	r26, 0x27	; 39
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e7 e2       	ldi	r30, 0x27	; 39
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	8f 7d       	andi	r24, 0xDF	; 223
    2d6a:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2d6c:	a6 e2       	ldi	r26, 0x26	; 38
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e6 e2       	ldi	r30, 0x26	; 38
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7d       	andi	r24, 0xDF	; 223
    2d78:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2d7a:	a6 e2       	ldi	r26, 0x26	; 38
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e6 e2       	ldi	r30, 0x26	; 38
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	84 60       	ori	r24, 0x04	; 4
    2d86:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2d88:	a6 e2       	ldi	r26, 0x26	; 38
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e6 e2       	ldi	r30, 0x26	; 38
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	82 60       	ori	r24, 0x02	; 2
    2d94:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2d96:	a6 e2       	ldi	r26, 0x26	; 38
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e6 e2       	ldi	r30, 0x26	; 38
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	8e 7f       	andi	r24, 0xFE	; 254
    2da2:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2da4:	a6 e2       	ldi	r26, 0x26	; 38
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e6 e2       	ldi	r30, 0x26	; 38
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	80 68       	ori	r24, 0x80	; 128
    2db0:	8c 93       	st	X, r24

}
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	28 97       	sbiw	r28, 0x08	; 8
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	8e 83       	std	Y+6, r24	; 0x06
    2dce:	78 87       	std	Y+8, r23	; 0x08
    2dd0:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2dd6:	19 82       	std	Y+1, r1	; 0x01
    2dd8:	1a 82       	std	Y+2, r1	; 0x02
    2dda:	1b 82       	std	Y+3, r1	; 0x03
    2ddc:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2dde:	8e 81       	ldd	r24, Y+6	; 0x06
    2de0:	80 32       	cpi	r24, 0x20	; 32
    2de2:	08 f0       	brcs	.+2      	; 0x2de6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2de4:	5b c0       	rjmp	.+182    	; 0x2e9c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2de6:	8f 81       	ldd	r24, Y+7	; 0x07
    2de8:	98 85       	ldd	r25, Y+8	; 0x08
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2dee:	56 c0       	rjmp	.+172    	; 0x2e9c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2df0:	a7 e2       	ldi	r26, 0x27	; 39
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e7 e2       	ldi	r30, 0x27	; 39
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 7e       	andi	r24, 0xE0	; 224
    2dfc:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2dfe:	a7 e2       	ldi	r26, 0x27	; 39
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e7 e2       	ldi	r30, 0x27	; 39
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	90 81       	ld	r25, Z
    2e08:	8e 81       	ldd	r24, Y+6	; 0x06
    2e0a:	89 2b       	or	r24, r25
    2e0c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2e0e:	a6 e2       	ldi	r26, 0x26	; 38
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	e6 e2       	ldi	r30, 0x26	; 38
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	80 64       	ori	r24, 0x40	; 64
    2e1a:	8c 93       	st	X, r24
    2e1c:	0b c0       	rjmp	.+22     	; 0x2e34 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	ab 81       	ldd	r26, Y+3	; 0x03
    2e24:	bc 81       	ldd	r27, Y+4	; 0x04
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	b1 1d       	adc	r27, r1
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	9a 83       	std	Y+2, r25	; 0x02
    2e30:	ab 83       	std	Y+3, r26	; 0x03
    2e32:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2e34:	e6 e2       	ldi	r30, 0x26	; 38
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	82 95       	swap	r24
    2e3c:	8f 70       	andi	r24, 0x0F	; 15
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	81 70       	andi	r24, 0x01	; 1
    2e44:	90 70       	andi	r25, 0x00	; 0
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	61 f4       	brne	.+24     	; 0x2e62 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e50:	bc 81       	ldd	r27, Y+4	; 0x04
    2e52:	80 35       	cpi	r24, 0x50	; 80
    2e54:	23 ec       	ldi	r18, 0xC3	; 195
    2e56:	92 07       	cpc	r25, r18
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	a2 07       	cpc	r26, r18
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	b2 07       	cpc	r27, r18
    2e60:	f0 f2       	brcs	.-68     	; 0x2e1e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2e62:	e6 e2       	ldi	r30, 0x26	; 38
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	82 95       	swap	r24
    2e6a:	8f 70       	andi	r24, 0x0F	; 15
    2e6c:	88 2f       	mov	r24, r24
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	81 70       	andi	r24, 0x01	; 1
    2e72:	90 70       	andi	r25, 0x00	; 0
    2e74:	88 23       	and	r24, r24
    2e76:	81 f0       	breq	.+32     	; 0x2e98 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2e78:	a6 e2       	ldi	r26, 0x26	; 38
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e6 e2       	ldi	r30, 0x26	; 38
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	80 61       	ori	r24, 0x10	; 16
    2e84:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2e86:	e4 e2       	ldi	r30, 0x24	; 36
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	ef 81       	ldd	r30, Y+7	; 0x07
    2e90:	f8 85       	ldd	r31, Y+8	; 0x08
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2e98:	1d 82       	std	Y+5, r1	; 0x05
    2e9a:	01 c0       	rjmp	.+2      	; 0x2e9e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e9c:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2e9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ea0:	28 96       	adiw	r28, 0x08	; 8
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
    2ec0:	7c 83       	std	Y+4, r23	; 0x04
    2ec2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	80 32       	cpi	r24, 0x20	; 32
    2ecc:	78 f5       	brcc	.+94     	; 0x2f2c <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	59 f1       	breq	.+86     	; 0x2f2c <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2ed6:	80 91 94 01 	lds	r24, 0x0194
    2eda:	88 23       	and	r24, r24
    2edc:	39 f5       	brne	.+78     	; 0x2f2c <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	80 93 94 01 	sts	0x0194, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	90 93 93 01 	sts	0x0193, r25
    2eec:	80 93 92 01 	sts	0x0192, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2ef0:	a6 e2       	ldi	r26, 0x26	; 38
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e6 e2       	ldi	r30, 0x26	; 38
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	88 60       	ori	r24, 0x08	; 8
    2efc:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2efe:	a7 e2       	ldi	r26, 0x27	; 39
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e7 e2       	ldi	r30, 0x27	; 39
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 7e       	andi	r24, 0xE0	; 224
    2f0a:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2f0c:	a7 e2       	ldi	r26, 0x27	; 39
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e7 e2       	ldi	r30, 0x27	; 39
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	90 81       	ld	r25, Z
    2f16:	8a 81       	ldd	r24, Y+2	; 0x02
    2f18:	89 2b       	or	r24, r25
    2f1a:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2f1c:	a6 e2       	ldi	r26, 0x26	; 38
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e6 e2       	ldi	r30, 0x26	; 38
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	80 64       	ori	r24, 0x40	; 64
    2f28:	8c 93       	st	X, r24
    2f2a:	01 c0       	rjmp	.+2      	; 0x2f2e <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f2c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <ADC_u8GetADCRegValue+0x6>
    2f44:	0f 92       	push	r0
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	9b 83       	std	Y+3, r25	; 0x03
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	9b 81       	ldd	r25, Y+3	; 0x03
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	39 f0       	breq	.+14     	; 0x2f68 <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2f5a:	e4 e2       	ldi	r30, 0x24	; 36
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	8a 83       	std	Y+2, r24	; 0x02
    2f66:	01 c0       	rjmp	.+2      	; 0x2f6a <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f68:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	2f 93       	push	r18
    2f84:	3f 93       	push	r19
    2f86:	4f 93       	push	r20
    2f88:	5f 93       	push	r21
    2f8a:	6f 93       	push	r22
    2f8c:	7f 93       	push	r23
    2f8e:	8f 93       	push	r24
    2f90:	9f 93       	push	r25
    2f92:	af 93       	push	r26
    2f94:	bf 93       	push	r27
    2f96:	ef 93       	push	r30
    2f98:	ff 93       	push	r31
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2fa2:	80 91 92 01 	lds	r24, 0x0192
    2fa6:	90 91 93 01 	lds	r25, 0x0193
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	99 f0       	breq	.+38     	; 0x2fd4 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2fae:	10 92 94 01 	sts	0x0194, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2fb2:	a6 e2       	ldi	r26, 0x26	; 38
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e6 e2       	ldi	r30, 0x26	; 38
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	87 7f       	andi	r24, 0xF7	; 247
    2fbe:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2fc0:	20 91 92 01 	lds	r18, 0x0192
    2fc4:	30 91 93 01 	lds	r19, 0x0193
    2fc8:	e4 e2       	ldi	r30, 0x24	; 36
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	f9 01       	movw	r30, r18
    2fd2:	09 95       	icall
	}
}
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	ff 91       	pop	r31
    2fda:	ef 91       	pop	r30
    2fdc:	bf 91       	pop	r27
    2fde:	af 91       	pop	r26
    2fe0:	9f 91       	pop	r25
    2fe2:	8f 91       	pop	r24
    2fe4:	7f 91       	pop	r23
    2fe6:	6f 91       	pop	r22
    2fe8:	5f 91       	pop	r21
    2fea:	4f 91       	pop	r20
    2fec:	3f 91       	pop	r19
    2fee:	2f 91       	pop	r18
    2ff0:	0f 90       	pop	r0
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	0f 90       	pop	r0
    2ff6:	1f 90       	pop	r1
    2ff8:	18 95       	reti

00002ffa <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	62 e0       	ldi	r22, 0x02	; 2
    301a:	41 e0       	ldi	r20, 0x01	; 1
    301c:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    3020:	82 e0       	ldi	r24, 0x02	; 2
    3022:	63 e0       	ldi	r22, 0x03	; 3
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
}
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	00 d0       	rcall	.+0      	; 0x3036 <ActivatePins1+0x6>
    3036:	00 d0       	rcall	.+0      	; 0x3038 <ActivatePins1+0x8>
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	6a 83       	std	Y+2, r22	; 0x02
    3040:	4b 83       	std	Y+3, r20	; 0x03
    3042:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	49 81       	ldd	r20, Y+1	; 0x01
    304a:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    304e:	82 e0       	ldi	r24, 0x02	; 2
    3050:	61 e0       	ldi	r22, 0x01	; 1
    3052:	4a 81       	ldd	r20, Y+2	; 0x02
    3054:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	62 e0       	ldi	r22, 0x02	; 2
    305c:	4b 81       	ldd	r20, Y+3	; 0x03
    305e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	63 e0       	ldi	r22, 0x03	; 3
    3066:	4c 81       	ldd	r20, Y+4	; 0x04
    3068:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	08 95       	ret

0000307a <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	00 d0       	rcall	.+0      	; 0x3080 <ActivatePins2+0x6>
    3080:	00 d0       	rcall	.+0      	; 0x3082 <ActivatePins2+0x8>
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	6a 83       	std	Y+2, r22	; 0x02
    308a:	4b 83       	std	Y+3, r20	; 0x03
    308c:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	4c 81       	ldd	r20, Y+4	; 0x04
    3094:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	62 e0       	ldi	r22, 0x02	; 2
    309c:	4b 81       	ldd	r20, Y+3	; 0x03
    309e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    30a2:	82 e0       	ldi	r24, 0x02	; 2
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	4a 81       	ldd	r20, Y+2	; 0x02
    30a8:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	49 81       	ldd	r20, Y+1	; 0x01
    30b2:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
}
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	08 95       	ret

000030c4 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	29 97       	sbiw	r28, 0x09	; 9
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    30de:	29 81       	ldd	r18, Y+1	; 0x01
    30e0:	3a 81       	ldd	r19, Y+2	; 0x02
    30e2:	39 87       	std	Y+9, r19	; 0x09
    30e4:	28 87       	std	Y+8, r18	; 0x08
    30e6:	88 85       	ldd	r24, Y+8	; 0x08
    30e8:	99 85       	ldd	r25, Y+9	; 0x09
    30ea:	8a 35       	cpi	r24, 0x5A	; 90
    30ec:	91 05       	cpc	r25, r1
    30ee:	31 f0       	breq	.+12     	; 0x30fc <SelectStepAngle+0x38>
    30f0:	28 85       	ldd	r18, Y+8	; 0x08
    30f2:	39 85       	ldd	r19, Y+9	; 0x09
    30f4:	24 3b       	cpi	r18, 0xB4	; 180
    30f6:	31 05       	cpc	r19, r1
    30f8:	f1 f0       	breq	.+60     	; 0x3136 <SelectStepAngle+0x72>
    30fa:	39 c0       	rjmp	.+114    	; 0x316e <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	28 2f       	mov	r18, r24
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	3f 83       	std	Y+7, r19	; 0x07
    3104:	2e 83       	std	Y+6, r18	; 0x06
    3106:	8e 81       	ldd	r24, Y+6	; 0x06
    3108:	9f 81       	ldd	r25, Y+7	; 0x07
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	31 f0       	breq	.+12     	; 0x311a <SelectStepAngle+0x56>
    310e:	2e 81       	ldd	r18, Y+6	; 0x06
    3110:	3f 81       	ldd	r19, Y+7	; 0x07
    3112:	21 30       	cpi	r18, 0x01	; 1
    3114:	31 05       	cpc	r19, r1
    3116:	41 f0       	breq	.+16     	; 0x3128 <SelectStepAngle+0x64>
    3118:	2a c0       	rjmp	.+84     	; 0x316e <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	21 e0       	ldi	r18, 0x01	; 1
    3122:	0e 94 18 18 	call	0x3030	; 0x3030 <ActivatePins1>
    3126:	23 c0       	rjmp	.+70     	; 0x316e <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	61 e0       	ldi	r22, 0x01	; 1
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	0e 94 3d 18 	call	0x307a	; 0x307a <ActivatePins2>
    3134:	1c c0       	rjmp	.+56     	; 0x316e <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	3d 83       	std	Y+5, r19	; 0x05
    313e:	2c 83       	std	Y+4, r18	; 0x04
    3140:	8c 81       	ldd	r24, Y+4	; 0x04
    3142:	9d 81       	ldd	r25, Y+5	; 0x05
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	31 f0       	breq	.+12     	; 0x3154 <SelectStepAngle+0x90>
    3148:	2c 81       	ldd	r18, Y+4	; 0x04
    314a:	3d 81       	ldd	r19, Y+5	; 0x05
    314c:	21 30       	cpi	r18, 0x01	; 1
    314e:	31 05       	cpc	r19, r1
    3150:	41 f0       	breq	.+16     	; 0x3162 <SelectStepAngle+0x9e>
    3152:	0d c0       	rjmp	.+26     	; 0x316e <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	61 e0       	ldi	r22, 0x01	; 1
    3158:	41 e0       	ldi	r20, 0x01	; 1
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	0e 94 3d 18 	call	0x307a	; 0x307a <ActivatePins2>
    3160:	06 c0       	rjmp	.+12     	; 0x316e <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	61 e0       	ldi	r22, 0x01	; 1
    3166:	41 e0       	ldi	r20, 0x01	; 1
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	0e 94 18 18 	call	0x3030	; 0x3030 <ActivatePins1>
						break;
				}
				break;
	}
}
    316e:	29 96       	adiw	r28, 0x09	; 9
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"

#define TIMERS_u16_OCR1A_REG			*((volatile u16 *)0x4A)

void Servo_Init(){
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    3188:	0e 94 df 08 	call	0x11be	; 0x11be <TIMERS_voidTimer1Init>
}
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	00 d0       	rcall	.+0      	; 0x3198 <Servo_SetAngle+0x6>
    3198:	00 d0       	rcall	.+0      	; 0x319a <Servo_SetAngle+0x8>
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	9c 83       	std	Y+4, r25	; 0x04
    31a0:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCR1AValue = (Servo_Angle * 11) + 3005;
    31a2:	4b 81       	ldd	r20, Y+3	; 0x03
    31a4:	5c 81       	ldd	r21, Y+4	; 0x04
    31a6:	ca 01       	movw	r24, r20
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	9c 01       	movw	r18, r24
    31ae:	22 0f       	add	r18, r18
    31b0:	33 1f       	adc	r19, r19
    31b2:	22 0f       	add	r18, r18
    31b4:	33 1f       	adc	r19, r19
    31b6:	82 0f       	add	r24, r18
    31b8:	93 1f       	adc	r25, r19
    31ba:	84 0f       	add	r24, r20
    31bc:	95 1f       	adc	r25, r21
    31be:	83 54       	subi	r24, 0x43	; 67
    31c0:	94 4f       	sbci	r25, 0xF4	; 244
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Local_u16OCR1AValue);
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	0e 94 87 09 	call	0x130e	; 0x130e <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	e9 97       	sbiw	r28, 0x39	; 57
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	64 e0       	ldi	r22, 0x04	; 4
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	40 e0       	ldi	r20, 0x00	; 0
    31fc:	50 e0       	ldi	r21, 0x00	; 0
    31fe:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_setPinValue>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e8       	ldi	r26, 0x80	; 128
    3208:	bf e3       	ldi	r27, 0x3F	; 63
    320a:	8d ab       	std	Y+53, r24	; 0x35
    320c:	9e ab       	std	Y+54, r25	; 0x36
    320e:	af ab       	std	Y+55, r26	; 0x37
    3210:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6d a9       	ldd	r22, Y+53	; 0x35
    3214:	7e a9       	ldd	r23, Y+54	; 0x36
    3216:	8f a9       	ldd	r24, Y+55	; 0x37
    3218:	98 ad       	ldd	r25, Y+56	; 0x38
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a e7       	ldi	r20, 0x7A	; 122
    3220:	55 e4       	ldi	r21, 0x45	; 69
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	89 ab       	std	Y+49, r24	; 0x31
    322c:	9a ab       	std	Y+50, r25	; 0x32
    322e:	ab ab       	std	Y+51, r26	; 0x33
    3230:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3232:	69 a9       	ldd	r22, Y+49	; 0x31
    3234:	7a a9       	ldd	r23, Y+50	; 0x32
    3236:	8b a9       	ldd	r24, Y+51	; 0x33
    3238:	9c a9       	ldd	r25, Y+52	; 0x34
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <LCD_sendCommand+0x78>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	98 ab       	std	Y+48, r25	; 0x30
    3250:	8f a7       	std	Y+47, r24	; 0x2f
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    3254:	69 a9       	ldd	r22, Y+49	; 0x31
    3256:	7a a9       	ldd	r23, Y+50	; 0x32
    3258:	8b a9       	ldd	r24, Y+51	; 0x33
    325a:	9c a9       	ldd	r25, Y+52	; 0x34
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6d a9       	ldd	r22, Y+53	; 0x35
    326e:	7e a9       	ldd	r23, Y+54	; 0x36
    3270:	8f a9       	ldd	r24, Y+55	; 0x37
    3272:	98 ad       	ldd	r25, Y+56	; 0x38
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <LCD_sendCommand+0xd8>
    3296:	80 e9       	ldi	r24, 0x90	; 144
    3298:	91 e0       	ldi	r25, 0x01	; 1
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    329e:	8d a5       	ldd	r24, Y+45	; 0x2d
    32a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_sendCommand+0xc6>
    32a6:	9e a7       	std	Y+46, r25	; 0x2e
    32a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ac:	98 a9       	ldd	r25, Y+48	; 0x30
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	98 ab       	std	Y+48, r25	; 0x30
    32b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b6:	98 a9       	ldd	r25, Y+48	; 0x30
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <LCD_sendCommand+0xba>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	69 a9       	ldd	r22, Y+49	; 0x31
    32c0:	7a a9       	ldd	r23, Y+50	; 0x32
    32c2:	8b a9       	ldd	r24, Y+51	; 0x33
    32c4:	9c a9       	ldd	r25, Y+52	; 0x34
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	98 ab       	std	Y+48, r25	; 0x30
    32d0:	8f a7       	std	Y+47, r24	; 0x2f
    32d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d4:	98 a9       	ldd	r25, Y+48	; 0x30
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
    32da:	8b a5       	ldd	r24, Y+43	; 0x2b
    32dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_sendCommand+0x102>
    32e2:	9c a7       	std	Y+44, r25	; 0x2c
    32e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    32e6:	83 e0       	ldi	r24, 0x03	; 3
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	65 e0       	ldi	r22, 0x05	; 5
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	41 e0       	ldi	r20, 0x01	; 1
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_setPinValue>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 e8       	ldi	r26, 0x80	; 128
    32fc:	bf e3       	ldi	r27, 0x3F	; 63
    32fe:	8f a3       	std	Y+39, r24	; 0x27
    3300:	98 a7       	std	Y+40, r25	; 0x28
    3302:	a9 a7       	std	Y+41, r26	; 0x29
    3304:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3306:	6f a1       	ldd	r22, Y+39	; 0x27
    3308:	78 a5       	ldd	r23, Y+40	; 0x28
    330a:	89 a5       	ldd	r24, Y+41	; 0x29
    330c:	9a a5       	ldd	r25, Y+42	; 0x2a
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a e7       	ldi	r20, 0x7A	; 122
    3314:	55 e4       	ldi	r21, 0x45	; 69
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	8b a3       	std	Y+35, r24	; 0x23
    3320:	9c a3       	std	Y+36, r25	; 0x24
    3322:	ad a3       	std	Y+37, r26	; 0x25
    3324:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3326:	6b a1       	ldd	r22, Y+35	; 0x23
    3328:	7c a1       	ldd	r23, Y+36	; 0x24
    332a:	8d a1       	ldd	r24, Y+37	; 0x25
    332c:	9e a1       	ldd	r25, Y+38	; 0x26
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e8       	ldi	r20, 0x80	; 128
    3334:	5f e3       	ldi	r21, 0x3F	; 63
    3336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    333a:	88 23       	and	r24, r24
    333c:	2c f4       	brge	.+10     	; 0x3348 <LCD_sendCommand+0x16c>
		__ticks = 1;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	9a a3       	std	Y+34, r25	; 0x22
    3344:	89 a3       	std	Y+33, r24	; 0x21
    3346:	3f c0       	rjmp	.+126    	; 0x33c6 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    3348:	6b a1       	ldd	r22, Y+35	; 0x23
    334a:	7c a1       	ldd	r23, Y+36	; 0x24
    334c:	8d a1       	ldd	r24, Y+37	; 0x25
    334e:	9e a1       	ldd	r25, Y+38	; 0x26
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	57 e4       	ldi	r21, 0x47	; 71
    3358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    335c:	18 16       	cp	r1, r24
    335e:	4c f5       	brge	.+82     	; 0x33b2 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6f a1       	ldd	r22, Y+39	; 0x27
    3362:	78 a5       	ldd	r23, Y+40	; 0x28
    3364:	89 a5       	ldd	r24, Y+41	; 0x29
    3366:	9a a5       	ldd	r25, Y+42	; 0x2a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9a a3       	std	Y+34, r25	; 0x22
    3386:	89 a3       	std	Y+33, r24	; 0x21
    3388:	0f c0       	rjmp	.+30     	; 0x33a8 <LCD_sendCommand+0x1cc>
    338a:	80 e9       	ldi	r24, 0x90	; 144
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	98 a3       	std	Y+32, r25	; 0x20
    3390:	8f 8f       	std	Y+31, r24	; 0x1f
    3392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3394:	98 a1       	ldd	r25, Y+32	; 0x20
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <LCD_sendCommand+0x1ba>
    339a:	98 a3       	std	Y+32, r25	; 0x20
    339c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339e:	89 a1       	ldd	r24, Y+33	; 0x21
    33a0:	9a a1       	ldd	r25, Y+34	; 0x22
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	9a a3       	std	Y+34, r25	; 0x22
    33a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a8:	89 a1       	ldd	r24, Y+33	; 0x21
    33aa:	9a a1       	ldd	r25, Y+34	; 0x22
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	69 f7       	brne	.-38     	; 0x338a <LCD_sendCommand+0x1ae>
    33b0:	14 c0       	rjmp	.+40     	; 0x33da <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	6b a1       	ldd	r22, Y+35	; 0x23
    33b4:	7c a1       	ldd	r23, Y+36	; 0x24
    33b6:	8d a1       	ldd	r24, Y+37	; 0x25
    33b8:	9e a1       	ldd	r25, Y+38	; 0x26
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9a a3       	std	Y+34, r25	; 0x22
    33c4:	89 a3       	std	Y+33, r24	; 0x21
    33c6:	89 a1       	ldd	r24, Y+33	; 0x21
    33c8:	9a a1       	ldd	r25, Y+34	; 0x22
    33ca:	9e 8f       	std	Y+30, r25	; 0x1e
    33cc:	8d 8f       	std	Y+29, r24	; 0x1d
    33ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_sendCommand+0x1f6>
    33d6:	9e 8f       	std	Y+30, r25	; 0x1e
    33d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    33da:	89 ad       	ldd	r24, Y+57	; 0x39
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	82 e0       	ldi	r24, 0x02	; 2
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	b9 01       	movw	r22, r18
    33e6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <LCD_setPortValue>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	a0 e8       	ldi	r26, 0x80	; 128
    33f0:	bf e3       	ldi	r27, 0x3F	; 63
    33f2:	89 8f       	std	Y+25, r24	; 0x19
    33f4:	9a 8f       	std	Y+26, r25	; 0x1a
    33f6:	ab 8f       	std	Y+27, r26	; 0x1b
    33f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fa:	69 8d       	ldd	r22, Y+25	; 0x19
    33fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	4a e7       	ldi	r20, 0x7A	; 122
    3408:	55 e4       	ldi	r21, 0x45	; 69
    340a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	8d 8b       	std	Y+21, r24	; 0x15
    3414:	9e 8b       	std	Y+22, r25	; 0x16
    3416:	af 8b       	std	Y+23, r26	; 0x17
    3418:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    341a:	6d 89       	ldd	r22, Y+21	; 0x15
    341c:	7e 89       	ldd	r23, Y+22	; 0x16
    341e:	8f 89       	ldd	r24, Y+23	; 0x17
    3420:	98 8d       	ldd	r25, Y+24	; 0x18
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e8       	ldi	r20, 0x80	; 128
    3428:	5f e3       	ldi	r21, 0x3F	; 63
    342a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    342e:	88 23       	and	r24, r24
    3430:	2c f4       	brge	.+10     	; 0x343c <LCD_sendCommand+0x260>
		__ticks = 1;
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	9c 8b       	std	Y+20, r25	; 0x14
    3438:	8b 8b       	std	Y+19, r24	; 0x13
    343a:	3f c0       	rjmp	.+126    	; 0x34ba <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    343c:	6d 89       	ldd	r22, Y+21	; 0x15
    343e:	7e 89       	ldd	r23, Y+22	; 0x16
    3440:	8f 89       	ldd	r24, Y+23	; 0x17
    3442:	98 8d       	ldd	r25, Y+24	; 0x18
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	3f ef       	ldi	r19, 0xFF	; 255
    3448:	4f e7       	ldi	r20, 0x7F	; 127
    344a:	57 e4       	ldi	r21, 0x47	; 71
    344c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3450:	18 16       	cp	r1, r24
    3452:	4c f5       	brge	.+82     	; 0x34a6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3454:	69 8d       	ldd	r22, Y+25	; 0x19
    3456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e2       	ldi	r20, 0x20	; 32
    3462:	51 e4       	ldi	r21, 0x41	; 65
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9c 8b       	std	Y+20, r25	; 0x14
    347a:	8b 8b       	std	Y+19, r24	; 0x13
    347c:	0f c0       	rjmp	.+30     	; 0x349c <LCD_sendCommand+0x2c0>
    347e:	80 e9       	ldi	r24, 0x90	; 144
    3480:	91 e0       	ldi	r25, 0x01	; 1
    3482:	9a 8b       	std	Y+18, r25	; 0x12
    3484:	89 8b       	std	Y+17, r24	; 0x11
    3486:	89 89       	ldd	r24, Y+17	; 0x11
    3488:	9a 89       	ldd	r25, Y+18	; 0x12
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <LCD_sendCommand+0x2ae>
    348e:	9a 8b       	std	Y+18, r25	; 0x12
    3490:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3492:	8b 89       	ldd	r24, Y+19	; 0x13
    3494:	9c 89       	ldd	r25, Y+20	; 0x14
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	9c 8b       	std	Y+20, r25	; 0x14
    349a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349c:	8b 89       	ldd	r24, Y+19	; 0x13
    349e:	9c 89       	ldd	r25, Y+20	; 0x14
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	69 f7       	brne	.-38     	; 0x347e <LCD_sendCommand+0x2a2>
    34a4:	14 c0       	rjmp	.+40     	; 0x34ce <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a6:	6d 89       	ldd	r22, Y+21	; 0x15
    34a8:	7e 89       	ldd	r23, Y+22	; 0x16
    34aa:	8f 89       	ldd	r24, Y+23	; 0x17
    34ac:	98 8d       	ldd	r25, Y+24	; 0x18
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	9c 8b       	std	Y+20, r25	; 0x14
    34b8:	8b 8b       	std	Y+19, r24	; 0x13
    34ba:	8b 89       	ldd	r24, Y+19	; 0x13
    34bc:	9c 89       	ldd	r25, Y+20	; 0x14
    34be:	98 8b       	std	Y+16, r25	; 0x10
    34c0:	8f 87       	std	Y+15, r24	; 0x0f
    34c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c4:	98 89       	ldd	r25, Y+16	; 0x10
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <LCD_sendCommand+0x2ea>
    34ca:	98 8b       	std	Y+16, r25	; 0x10
    34cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	65 e0       	ldi	r22, 0x05	; 5
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    34da:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_setPinValue>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	a0 e8       	ldi	r26, 0x80	; 128
    34e4:	bf e3       	ldi	r27, 0x3F	; 63
    34e6:	8b 87       	std	Y+11, r24	; 0x0b
    34e8:	9c 87       	std	Y+12, r25	; 0x0c
    34ea:	ad 87       	std	Y+13, r26	; 0x0d
    34ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4a e7       	ldi	r20, 0x7A	; 122
    34fc:	55 e4       	ldi	r21, 0x45	; 69
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	8f 83       	std	Y+7, r24	; 0x07
    3508:	98 87       	std	Y+8, r25	; 0x08
    350a:	a9 87       	std	Y+9, r26	; 0x09
    350c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    350e:	6f 81       	ldd	r22, Y+7	; 0x07
    3510:	78 85       	ldd	r23, Y+8	; 0x08
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	9a 85       	ldd	r25, Y+10	; 0x0a
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e8       	ldi	r20, 0x80	; 128
    351c:	5f e3       	ldi	r21, 0x3F	; 63
    351e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3522:	88 23       	and	r24, r24
    3524:	2c f4       	brge	.+10     	; 0x3530 <LCD_sendCommand+0x354>
		__ticks = 1;
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
    352e:	3f c0       	rjmp	.+126    	; 0x35ae <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    3530:	6f 81       	ldd	r22, Y+7	; 0x07
    3532:	78 85       	ldd	r23, Y+8	; 0x08
    3534:	89 85       	ldd	r24, Y+9	; 0x09
    3536:	9a 85       	ldd	r25, Y+10	; 0x0a
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	3f ef       	ldi	r19, 0xFF	; 255
    353c:	4f e7       	ldi	r20, 0x7F	; 127
    353e:	57 e4       	ldi	r21, 0x47	; 71
    3540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3544:	18 16       	cp	r1, r24
    3546:	4c f5       	brge	.+82     	; 0x359a <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3548:	6b 85       	ldd	r22, Y+11	; 0x0b
    354a:	7c 85       	ldd	r23, Y+12	; 0x0c
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e2       	ldi	r20, 0x20	; 32
    3556:	51 e4       	ldi	r21, 0x41	; 65
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	bc 01       	movw	r22, r24
    3562:	cd 01       	movw	r24, r26
    3564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	9e 83       	std	Y+6, r25	; 0x06
    356e:	8d 83       	std	Y+5, r24	; 0x05
    3570:	0f c0       	rjmp	.+30     	; 0x3590 <LCD_sendCommand+0x3b4>
    3572:	80 e9       	ldi	r24, 0x90	; 144
    3574:	91 e0       	ldi	r25, 0x01	; 1
    3576:	9c 83       	std	Y+4, r25	; 0x04
    3578:	8b 83       	std	Y+3, r24	; 0x03
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	9c 81       	ldd	r25, Y+4	; 0x04
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <LCD_sendCommand+0x3a2>
    3582:	9c 83       	std	Y+4, r25	; 0x04
    3584:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3586:	8d 81       	ldd	r24, Y+5	; 0x05
    3588:	9e 81       	ldd	r25, Y+6	; 0x06
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3590:	8d 81       	ldd	r24, Y+5	; 0x05
    3592:	9e 81       	ldd	r25, Y+6	; 0x06
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	69 f7       	brne	.-38     	; 0x3572 <LCD_sendCommand+0x396>
    3598:	14 c0       	rjmp	.+40     	; 0x35c2 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359a:	6f 81       	ldd	r22, Y+7	; 0x07
    359c:	78 85       	ldd	r23, Y+8	; 0x08
    359e:	89 85       	ldd	r24, Y+9	; 0x09
    35a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	9e 81       	ldd	r25, Y+6	; 0x06
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	89 83       	std	Y+1, r24	; 0x01
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <LCD_sendCommand+0x3de>
    35be:	9a 83       	std	Y+2, r25	; 0x02
    35c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    35c2:	e9 96       	adiw	r28, 0x39	; 57
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data)
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	e9 97       	sbiw	r28, 0x39	; 57
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    35ea:	83 e0       	ldi	r24, 0x03	; 3
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	64 e0       	ldi	r22, 0x04	; 4
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	41 e0       	ldi	r20, 0x01	; 1
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_setPinValue>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a0 e8       	ldi	r26, 0x80	; 128
    3600:	bf e3       	ldi	r27, 0x3F	; 63
    3602:	8d ab       	std	Y+53, r24	; 0x35
    3604:	9e ab       	std	Y+54, r25	; 0x36
    3606:	af ab       	std	Y+55, r26	; 0x37
    3608:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360a:	6d a9       	ldd	r22, Y+53	; 0x35
    360c:	7e a9       	ldd	r23, Y+54	; 0x36
    360e:	8f a9       	ldd	r24, Y+55	; 0x37
    3610:	98 ad       	ldd	r25, Y+56	; 0x38
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4a e7       	ldi	r20, 0x7A	; 122
    3618:	55 e4       	ldi	r21, 0x45	; 69
    361a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	89 ab       	std	Y+49, r24	; 0x31
    3624:	9a ab       	std	Y+50, r25	; 0x32
    3626:	ab ab       	std	Y+51, r26	; 0x33
    3628:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    362a:	69 a9       	ldd	r22, Y+49	; 0x31
    362c:	7a a9       	ldd	r23, Y+50	; 0x32
    362e:	8b a9       	ldd	r24, Y+51	; 0x33
    3630:	9c a9       	ldd	r25, Y+52	; 0x34
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e8       	ldi	r20, 0x80	; 128
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    363e:	88 23       	and	r24, r24
    3640:	2c f4       	brge	.+10     	; 0x364c <LCD_displayCharacter+0x78>
		__ticks = 1;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	98 ab       	std	Y+48, r25	; 0x30
    3648:	8f a7       	std	Y+47, r24	; 0x2f
    364a:	3f c0       	rjmp	.+126    	; 0x36ca <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    364c:	69 a9       	ldd	r22, Y+49	; 0x31
    364e:	7a a9       	ldd	r23, Y+50	; 0x32
    3650:	8b a9       	ldd	r24, Y+51	; 0x33
    3652:	9c a9       	ldd	r25, Y+52	; 0x34
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	3f ef       	ldi	r19, 0xFF	; 255
    3658:	4f e7       	ldi	r20, 0x7F	; 127
    365a:	57 e4       	ldi	r21, 0x47	; 71
    365c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3660:	18 16       	cp	r1, r24
    3662:	4c f5       	brge	.+82     	; 0x36b6 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3664:	6d a9       	ldd	r22, Y+53	; 0x35
    3666:	7e a9       	ldd	r23, Y+54	; 0x36
    3668:	8f a9       	ldd	r24, Y+55	; 0x37
    366a:	98 ad       	ldd	r25, Y+56	; 0x38
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	98 ab       	std	Y+48, r25	; 0x30
    368a:	8f a7       	std	Y+47, r24	; 0x2f
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <LCD_displayCharacter+0xd8>
    368e:	80 e9       	ldi	r24, 0x90	; 144
    3690:	91 e0       	ldi	r25, 0x01	; 1
    3692:	9e a7       	std	Y+46, r25	; 0x2e
    3694:	8d a7       	std	Y+45, r24	; 0x2d
    3696:	8d a5       	ldd	r24, Y+45	; 0x2d
    3698:	9e a5       	ldd	r25, Y+46	; 0x2e
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <LCD_displayCharacter+0xc6>
    369e:	9e a7       	std	Y+46, r25	; 0x2e
    36a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a4:	98 a9       	ldd	r25, Y+48	; 0x30
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	98 ab       	std	Y+48, r25	; 0x30
    36aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ae:	98 a9       	ldd	r25, Y+48	; 0x30
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	69 f7       	brne	.-38     	; 0x368e <LCD_displayCharacter+0xba>
    36b4:	14 c0       	rjmp	.+40     	; 0x36de <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b6:	69 a9       	ldd	r22, Y+49	; 0x31
    36b8:	7a a9       	ldd	r23, Y+50	; 0x32
    36ba:	8b a9       	ldd	r24, Y+51	; 0x33
    36bc:	9c a9       	ldd	r25, Y+52	; 0x34
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	98 ab       	std	Y+48, r25	; 0x30
    36c8:	8f a7       	std	Y+47, r24	; 0x2f
    36ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    36cc:	98 a9       	ldd	r25, Y+48	; 0x30
    36ce:	9c a7       	std	Y+44, r25	; 0x2c
    36d0:	8b a7       	std	Y+43, r24	; 0x2b
    36d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    36d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <LCD_displayCharacter+0x102>
    36da:	9c a7       	std	Y+44, r25	; 0x2c
    36dc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	65 e0       	ldi	r22, 0x05	; 5
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	41 e0       	ldi	r20, 0x01	; 1
    36e8:	50 e0       	ldi	r21, 0x00	; 0
    36ea:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_setPinValue>
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a0 e8       	ldi	r26, 0x80	; 128
    36f4:	bf e3       	ldi	r27, 0x3F	; 63
    36f6:	8f a3       	std	Y+39, r24	; 0x27
    36f8:	98 a7       	std	Y+40, r25	; 0x28
    36fa:	a9 a7       	std	Y+41, r26	; 0x29
    36fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3700:	78 a5       	ldd	r23, Y+40	; 0x28
    3702:	89 a5       	ldd	r24, Y+41	; 0x29
    3704:	9a a5       	ldd	r25, Y+42	; 0x2a
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	4a e7       	ldi	r20, 0x7A	; 122
    370c:	55 e4       	ldi	r21, 0x45	; 69
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	8b a3       	std	Y+35, r24	; 0x23
    3718:	9c a3       	std	Y+36, r25	; 0x24
    371a:	ad a3       	std	Y+37, r26	; 0x25
    371c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    371e:	6b a1       	ldd	r22, Y+35	; 0x23
    3720:	7c a1       	ldd	r23, Y+36	; 0x24
    3722:	8d a1       	ldd	r24, Y+37	; 0x25
    3724:	9e a1       	ldd	r25, Y+38	; 0x26
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e8       	ldi	r20, 0x80	; 128
    372c:	5f e3       	ldi	r21, 0x3F	; 63
    372e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3732:	88 23       	and	r24, r24
    3734:	2c f4       	brge	.+10     	; 0x3740 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	9a a3       	std	Y+34, r25	; 0x22
    373c:	89 a3       	std	Y+33, r24	; 0x21
    373e:	3f c0       	rjmp	.+126    	; 0x37be <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    3740:	6b a1       	ldd	r22, Y+35	; 0x23
    3742:	7c a1       	ldd	r23, Y+36	; 0x24
    3744:	8d a1       	ldd	r24, Y+37	; 0x25
    3746:	9e a1       	ldd	r25, Y+38	; 0x26
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	3f ef       	ldi	r19, 0xFF	; 255
    374c:	4f e7       	ldi	r20, 0x7F	; 127
    374e:	57 e4       	ldi	r21, 0x47	; 71
    3750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3754:	18 16       	cp	r1, r24
    3756:	4c f5       	brge	.+82     	; 0x37aa <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3758:	6f a1       	ldd	r22, Y+39	; 0x27
    375a:	78 a5       	ldd	r23, Y+40	; 0x28
    375c:	89 a5       	ldd	r24, Y+41	; 0x29
    375e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e2       	ldi	r20, 0x20	; 32
    3766:	51 e4       	ldi	r21, 0x41	; 65
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9a a3       	std	Y+34, r25	; 0x22
    377e:	89 a3       	std	Y+33, r24	; 0x21
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <LCD_displayCharacter+0x1cc>
    3782:	80 e9       	ldi	r24, 0x90	; 144
    3784:	91 e0       	ldi	r25, 0x01	; 1
    3786:	98 a3       	std	Y+32, r25	; 0x20
    3788:	8f 8f       	std	Y+31, r24	; 0x1f
    378a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    378c:	98 a1       	ldd	r25, Y+32	; 0x20
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <LCD_displayCharacter+0x1ba>
    3792:	98 a3       	std	Y+32, r25	; 0x20
    3794:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3796:	89 a1       	ldd	r24, Y+33	; 0x21
    3798:	9a a1       	ldd	r25, Y+34	; 0x22
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	9a a3       	std	Y+34, r25	; 0x22
    379e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a0:	89 a1       	ldd	r24, Y+33	; 0x21
    37a2:	9a a1       	ldd	r25, Y+34	; 0x22
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	69 f7       	brne	.-38     	; 0x3782 <LCD_displayCharacter+0x1ae>
    37a8:	14 c0       	rjmp	.+40     	; 0x37d2 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37aa:	6b a1       	ldd	r22, Y+35	; 0x23
    37ac:	7c a1       	ldd	r23, Y+36	; 0x24
    37ae:	8d a1       	ldd	r24, Y+37	; 0x25
    37b0:	9e a1       	ldd	r25, Y+38	; 0x26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9a a3       	std	Y+34, r25	; 0x22
    37bc:	89 a3       	std	Y+33, r24	; 0x21
    37be:	89 a1       	ldd	r24, Y+33	; 0x21
    37c0:	9a a1       	ldd	r25, Y+34	; 0x22
    37c2:	9e 8f       	std	Y+30, r25	; 0x1e
    37c4:	8d 8f       	std	Y+29, r24	; 0x1d
    37c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <LCD_displayCharacter+0x1f6>
    37ce:	9e 8f       	std	Y+30, r25	; 0x1e
    37d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    37d2:	89 ad       	ldd	r24, Y+57	; 0x39
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	82 e0       	ldi	r24, 0x02	; 2
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	b9 01       	movw	r22, r18
    37de:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <LCD_setPortValue>
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	a0 e8       	ldi	r26, 0x80	; 128
    37e8:	bf e3       	ldi	r27, 0x3F	; 63
    37ea:	89 8f       	std	Y+25, r24	; 0x19
    37ec:	9a 8f       	std	Y+26, r25	; 0x1a
    37ee:	ab 8f       	std	Y+27, r26	; 0x1b
    37f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f2:	69 8d       	ldd	r22, Y+25	; 0x19
    37f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	4a e7       	ldi	r20, 0x7A	; 122
    3800:	55 e4       	ldi	r21, 0x45	; 69
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	8d 8b       	std	Y+21, r24	; 0x15
    380c:	9e 8b       	std	Y+22, r25	; 0x16
    380e:	af 8b       	std	Y+23, r26	; 0x17
    3810:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3812:	6d 89       	ldd	r22, Y+21	; 0x15
    3814:	7e 89       	ldd	r23, Y+22	; 0x16
    3816:	8f 89       	ldd	r24, Y+23	; 0x17
    3818:	98 8d       	ldd	r25, Y+24	; 0x18
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e8       	ldi	r20, 0x80	; 128
    3820:	5f e3       	ldi	r21, 0x3F	; 63
    3822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3826:	88 23       	and	r24, r24
    3828:	2c f4       	brge	.+10     	; 0x3834 <LCD_displayCharacter+0x260>
		__ticks = 1;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	9c 8b       	std	Y+20, r25	; 0x14
    3830:	8b 8b       	std	Y+19, r24	; 0x13
    3832:	3f c0       	rjmp	.+126    	; 0x38b2 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    3834:	6d 89       	ldd	r22, Y+21	; 0x15
    3836:	7e 89       	ldd	r23, Y+22	; 0x16
    3838:	8f 89       	ldd	r24, Y+23	; 0x17
    383a:	98 8d       	ldd	r25, Y+24	; 0x18
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	3f ef       	ldi	r19, 0xFF	; 255
    3840:	4f e7       	ldi	r20, 0x7F	; 127
    3842:	57 e4       	ldi	r21, 0x47	; 71
    3844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3848:	18 16       	cp	r1, r24
    384a:	4c f5       	brge	.+82     	; 0x389e <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384c:	69 8d       	ldd	r22, Y+25	; 0x19
    384e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e2       	ldi	r20, 0x20	; 32
    385a:	51 e4       	ldi	r21, 0x41	; 65
    385c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	bc 01       	movw	r22, r24
    3866:	cd 01       	movw	r24, r26
    3868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	9c 8b       	std	Y+20, r25	; 0x14
    3872:	8b 8b       	std	Y+19, r24	; 0x13
    3874:	0f c0       	rjmp	.+30     	; 0x3894 <LCD_displayCharacter+0x2c0>
    3876:	80 e9       	ldi	r24, 0x90	; 144
    3878:	91 e0       	ldi	r25, 0x01	; 1
    387a:	9a 8b       	std	Y+18, r25	; 0x12
    387c:	89 8b       	std	Y+17, r24	; 0x11
    387e:	89 89       	ldd	r24, Y+17	; 0x11
    3880:	9a 89       	ldd	r25, Y+18	; 0x12
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <LCD_displayCharacter+0x2ae>
    3886:	9a 8b       	std	Y+18, r25	; 0x12
    3888:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388a:	8b 89       	ldd	r24, Y+19	; 0x13
    388c:	9c 89       	ldd	r25, Y+20	; 0x14
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3894:	8b 89       	ldd	r24, Y+19	; 0x13
    3896:	9c 89       	ldd	r25, Y+20	; 0x14
    3898:	00 97       	sbiw	r24, 0x00	; 0
    389a:	69 f7       	brne	.-38     	; 0x3876 <LCD_displayCharacter+0x2a2>
    389c:	14 c0       	rjmp	.+40     	; 0x38c6 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389e:	6d 89       	ldd	r22, Y+21	; 0x15
    38a0:	7e 89       	ldd	r23, Y+22	; 0x16
    38a2:	8f 89       	ldd	r24, Y+23	; 0x17
    38a4:	98 8d       	ldd	r25, Y+24	; 0x18
    38a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9c 8b       	std	Y+20, r25	; 0x14
    38b0:	8b 8b       	std	Y+19, r24	; 0x13
    38b2:	8b 89       	ldd	r24, Y+19	; 0x13
    38b4:	9c 89       	ldd	r25, Y+20	; 0x14
    38b6:	98 8b       	std	Y+16, r25	; 0x10
    38b8:	8f 87       	std	Y+15, r24	; 0x0f
    38ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    38bc:	98 89       	ldd	r25, Y+16	; 0x10
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <LCD_displayCharacter+0x2ea>
    38c2:	98 8b       	std	Y+16, r25	; 0x10
    38c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	65 e0       	ldi	r22, 0x05	; 5
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_setPinValue>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	a0 e8       	ldi	r26, 0x80	; 128
    38dc:	bf e3       	ldi	r27, 0x3F	; 63
    38de:	8b 87       	std	Y+11, r24	; 0x0b
    38e0:	9c 87       	std	Y+12, r25	; 0x0c
    38e2:	ad 87       	std	Y+13, r26	; 0x0d
    38e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a e7       	ldi	r20, 0x7A	; 122
    38f4:	55 e4       	ldi	r21, 0x45	; 69
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8f 83       	std	Y+7, r24	; 0x07
    3900:	98 87       	std	Y+8, r25	; 0x08
    3902:	a9 87       	std	Y+9, r26	; 0x09
    3904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3906:	6f 81       	ldd	r22, Y+7	; 0x07
    3908:	78 85       	ldd	r23, Y+8	; 0x08
    390a:	89 85       	ldd	r24, Y+9	; 0x09
    390c:	9a 85       	ldd	r25, Y+10	; 0x0a
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	2c f4       	brge	.+10     	; 0x3928 <LCD_displayCharacter+0x354>
		__ticks = 1;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9e 83       	std	Y+6, r25	; 0x06
    3924:	8d 83       	std	Y+5, r24	; 0x05
    3926:	3f c0       	rjmp	.+126    	; 0x39a6 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3928:	6f 81       	ldd	r22, Y+7	; 0x07
    392a:	78 85       	ldd	r23, Y+8	; 0x08
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	3f ef       	ldi	r19, 0xFF	; 255
    3934:	4f e7       	ldi	r20, 0x7F	; 127
    3936:	57 e4       	ldi	r21, 0x47	; 71
    3938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    393c:	18 16       	cp	r1, r24
    393e:	4c f5       	brge	.+82     	; 0x3992 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3940:	6b 85       	ldd	r22, Y+11	; 0x0b
    3942:	7c 85       	ldd	r23, Y+12	; 0x0c
    3944:	8d 85       	ldd	r24, Y+13	; 0x0d
    3946:	9e 85       	ldd	r25, Y+14	; 0x0e
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e2       	ldi	r20, 0x20	; 32
    394e:	51 e4       	ldi	r21, 0x41	; 65
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	bc 01       	movw	r22, r24
    395a:	cd 01       	movw	r24, r26
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
    3968:	0f c0       	rjmp	.+30     	; 0x3988 <LCD_displayCharacter+0x3b4>
    396a:	80 e9       	ldi	r24, 0x90	; 144
    396c:	91 e0       	ldi	r25, 0x01	; 1
    396e:	9c 83       	std	Y+4, r25	; 0x04
    3970:	8b 83       	std	Y+3, r24	; 0x03
    3972:	8b 81       	ldd	r24, Y+3	; 0x03
    3974:	9c 81       	ldd	r25, Y+4	; 0x04
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <LCD_displayCharacter+0x3a2>
    397a:	9c 83       	std	Y+4, r25	; 0x04
    397c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397e:	8d 81       	ldd	r24, Y+5	; 0x05
    3980:	9e 81       	ldd	r25, Y+6	; 0x06
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	69 f7       	brne	.-38     	; 0x396a <LCD_displayCharacter+0x396>
    3990:	14 c0       	rjmp	.+40     	; 0x39ba <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3992:	6f 81       	ldd	r22, Y+7	; 0x07
    3994:	78 85       	ldd	r23, Y+8	; 0x08
    3996:	89 85       	ldd	r24, Y+9	; 0x09
    3998:	9a 85       	ldd	r25, Y+10	; 0x0a
    399a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	9e 83       	std	Y+6, r25	; 0x06
    39a4:	8d 83       	std	Y+5, r24	; 0x05
    39a6:	8d 81       	ldd	r24, Y+5	; 0x05
    39a8:	9e 81       	ldd	r25, Y+6	; 0x06
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	9a 81       	ldd	r25, Y+2	; 0x02
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <LCD_displayCharacter+0x3de>
    39b6:	9a 83       	std	Y+2, r25	; 0x02
    39b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    39ba:	e9 96       	adiw	r28, 0x39	; 57
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <LCD_DisplayInteger>:

void LCD_DisplayInteger(u32 num) {
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	68 97       	sbiw	r28, 0x18	; 24
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	6d 8b       	std	Y+21, r22	; 0x15
    39e6:	7e 8b       	std	Y+22, r23	; 0x16
    39e8:	8f 8b       	std	Y+23, r24	; 0x17
    39ea:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
    39ec:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
    39ee:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
    39f0:	8c 81       	ldd	r24, Y+4	; 0x04
    39f2:	08 2f       	mov	r16, r24
    39f4:	10 e0       	ldi	r17, 0x00	; 0
    39f6:	8d 89       	ldd	r24, Y+21	; 0x15
    39f8:	9e 89       	ldd	r25, Y+22	; 0x16
    39fa:	af 89       	ldd	r26, Y+23	; 0x17
    39fc:	b8 8d       	ldd	r27, Y+24	; 0x18
    39fe:	2a e0       	ldi	r18, 0x0A	; 10
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	50 e0       	ldi	r21, 0x00	; 0
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 05 32 	call	0x640a	; 0x640a <__udivmodsi4>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	28 2f       	mov	r18, r24
    3a14:	20 5d       	subi	r18, 0xD0	; 208
    3a16:	ce 01       	movw	r24, r28
    3a18:	05 96       	adiw	r24, 0x05	; 5
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	e0 0f       	add	r30, r16
    3a1e:	f1 1f       	adc	r31, r17
    3a20:	20 83       	st	Z, r18
    3a22:	8c 81       	ldd	r24, Y+4	; 0x04
    3a24:	8f 5f       	subi	r24, 0xFF	; 255
    3a26:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
    3a28:	8d 89       	ldd	r24, Y+21	; 0x15
    3a2a:	9e 89       	ldd	r25, Y+22	; 0x16
    3a2c:	af 89       	ldd	r26, Y+23	; 0x17
    3a2e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a30:	2a e0       	ldi	r18, 0x0A	; 10
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e0       	ldi	r20, 0x00	; 0
    3a36:	50 e0       	ldi	r21, 0x00	; 0
    3a38:	bc 01       	movw	r22, r24
    3a3a:	cd 01       	movw	r24, r26
    3a3c:	0e 94 05 32 	call	0x640a	; 0x640a <__udivmodsi4>
    3a40:	da 01       	movw	r26, r20
    3a42:	c9 01       	movw	r24, r18
    3a44:	8d 8b       	std	Y+21, r24	; 0x15
    3a46:	9e 8b       	std	Y+22, r25	; 0x16
    3a48:	af 8b       	std	Y+23, r26	; 0x17
    3a4a:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
    3a4c:	8d 89       	ldd	r24, Y+21	; 0x15
    3a4e:	9e 89       	ldd	r25, Y+22	; 0x16
    3a50:	af 89       	ldd	r26, Y+23	; 0x17
    3a52:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	a1 05       	cpc	r26, r1
    3a58:	b1 05       	cpc	r27, r1
    3a5a:	51 f6       	brne	.-108    	; 0x39f0 <LCD_DisplayInteger+0x24>

    if (isNegative) {
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	88 23       	and	r24, r24
    3a60:	69 f0       	breq	.+26     	; 0x3a7c <LCD_DisplayInteger+0xb0>
        buffer[i++] = '-';
    3a62:	8c 81       	ldd	r24, Y+4	; 0x04
    3a64:	28 2f       	mov	r18, r24
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	ce 01       	movw	r24, r28
    3a6a:	05 96       	adiw	r24, 0x05	; 5
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	e2 0f       	add	r30, r18
    3a70:	f3 1f       	adc	r31, r19
    3a72:	8d e2       	ldi	r24, 0x2D	; 45
    3a74:	80 83       	st	Z, r24
    3a76:	8c 81       	ldd	r24, Y+4	; 0x04
    3a78:	8f 5f       	subi	r24, 0xFF	; 255
    3a7a:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3a7c:	1a 82       	std	Y+2, r1	; 0x02
    3a7e:	3d c0       	rjmp	.+122    	; 0x3afa <LCD_DisplayInteger+0x12e>
        char temp = buffer[j];
    3a80:	8a 81       	ldd	r24, Y+2	; 0x02
    3a82:	28 2f       	mov	r18, r24
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	ce 01       	movw	r24, r28
    3a88:	05 96       	adiw	r24, 0x05	; 5
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	e2 0f       	add	r30, r18
    3a8e:	f3 1f       	adc	r31, r19
    3a90:	80 81       	ld	r24, Z
    3a92:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    3a94:	8a 81       	ldd	r24, Y+2	; 0x02
    3a96:	48 2f       	mov	r20, r24
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9c:	28 2f       	mov	r18, r24
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	88 2f       	mov	r24, r24
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	b9 01       	movw	r22, r18
    3aa8:	68 1b       	sub	r22, r24
    3aaa:	79 0b       	sbc	r23, r25
    3aac:	cb 01       	movw	r24, r22
    3aae:	9c 01       	movw	r18, r24
    3ab0:	21 50       	subi	r18, 0x01	; 1
    3ab2:	30 40       	sbci	r19, 0x00	; 0
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	05 96       	adiw	r24, 0x05	; 5
    3ab8:	fc 01       	movw	r30, r24
    3aba:	e2 0f       	add	r30, r18
    3abc:	f3 1f       	adc	r31, r19
    3abe:	20 81       	ld	r18, Z
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	05 96       	adiw	r24, 0x05	; 5
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	e4 0f       	add	r30, r20
    3ac8:	f5 1f       	adc	r31, r21
    3aca:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    3acc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ace:	28 2f       	mov	r18, r24
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad4:	88 2f       	mov	r24, r24
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	a9 01       	movw	r20, r18
    3ada:	48 1b       	sub	r20, r24
    3adc:	59 0b       	sbc	r21, r25
    3ade:	ca 01       	movw	r24, r20
    3ae0:	9c 01       	movw	r18, r24
    3ae2:	21 50       	subi	r18, 0x01	; 1
    3ae4:	30 40       	sbci	r19, 0x00	; 0
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	05 96       	adiw	r24, 0x05	; 5
    3aea:	fc 01       	movw	r30, r24
    3aec:	e2 0f       	add	r30, r18
    3aee:	f3 1f       	adc	r31, r19
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3af4:	8a 81       	ldd	r24, Y+2	; 0x02
    3af6:	8f 5f       	subi	r24, 0xFF	; 255
    3af8:	8a 83       	std	Y+2, r24	; 0x02
    3afa:	8c 81       	ldd	r24, Y+4	; 0x04
    3afc:	98 2f       	mov	r25, r24
    3afe:	96 95       	lsr	r25
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	89 17       	cp	r24, r25
    3b04:	08 f4       	brcc	.+2      	; 0x3b08 <LCD_DisplayInteger+0x13c>
    3b06:	bc cf       	rjmp	.-136    	; 0x3a80 <LCD_DisplayInteger+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    3b08:	8c 81       	ldd	r24, Y+4	; 0x04
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	ce 01       	movw	r24, r28
    3b10:	05 96       	adiw	r24, 0x05	; 5
    3b12:	fc 01       	movw	r30, r24
    3b14:	e2 0f       	add	r30, r18
    3b16:	f3 1f       	adc	r31, r19
    3b18:	10 82       	st	Z, r1

    // Write the string to LCD
    LCD_displayString(buffer);
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	05 96       	adiw	r24, 0x05	; 5
    3b1e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <LCD_displayString>
}
    3b22:	68 96       	adiw	r28, 0x18	; 24
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <LCD_init>:


void LCD_init(void)
{
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	2e 97       	sbiw	r28, 0x0e	; 14
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3b4c:	83 e0       	ldi	r24, 0x03	; 3
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	64 e0       	ldi	r22, 0x04	; 4
    3b52:	70 e0       	ldi	r23, 0x00	; 0
    3b54:	41 e0       	ldi	r20, 0x01	; 1
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    3b5c:	83 e0       	ldi	r24, 0x03	; 3
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	65 e0       	ldi	r22, 0x05	; 5
    3b62:	70 e0       	ldi	r23, 0x00	; 0
    3b64:	41 e0       	ldi	r20, 0x01	; 1
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3b6c:	82 e0       	ldi	r24, 0x02	; 2
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	6f ef       	ldi	r22, 0xFF	; 255
    3b72:	70 e0       	ldi	r23, 0x00	; 0
    3b74:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_setPortDirection>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	a0 ea       	ldi	r26, 0xA0	; 160
    3b7e:	b1 e4       	ldi	r27, 0x41	; 65
    3b80:	8b 87       	std	Y+11, r24	; 0x0b
    3b82:	9c 87       	std	Y+12, r25	; 0x0c
    3b84:	ad 87       	std	Y+13, r26	; 0x0d
    3b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	4a e7       	ldi	r20, 0x7A	; 122
    3b96:	55 e4       	ldi	r21, 0x45	; 69
    3b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	8f 83       	std	Y+7, r24	; 0x07
    3ba2:	98 87       	std	Y+8, r25	; 0x08
    3ba4:	a9 87       	std	Y+9, r26	; 0x09
    3ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    3baa:	78 85       	ldd	r23, Y+8	; 0x08
    3bac:	89 85       	ldd	r24, Y+9	; 0x09
    3bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e8       	ldi	r20, 0x80	; 128
    3bb6:	5f e3       	ldi	r21, 0x3F	; 63
    3bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bbc:	88 23       	and	r24, r24
    3bbe:	2c f4       	brge	.+10     	; 0x3bca <LCD_init+0x92>
		__ticks = 1;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9e 83       	std	Y+6, r25	; 0x06
    3bc6:	8d 83       	std	Y+5, r24	; 0x05
    3bc8:	3f c0       	rjmp	.+126    	; 0x3c48 <LCD_init+0x110>
	else if (__tmp > 65535)
    3bca:	6f 81       	ldd	r22, Y+7	; 0x07
    3bcc:	78 85       	ldd	r23, Y+8	; 0x08
    3bce:	89 85       	ldd	r24, Y+9	; 0x09
    3bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	3f ef       	ldi	r19, 0xFF	; 255
    3bd6:	4f e7       	ldi	r20, 0x7F	; 127
    3bd8:	57 e4       	ldi	r21, 0x47	; 71
    3bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bde:	18 16       	cp	r1, r24
    3be0:	4c f5       	brge	.+82     	; 0x3c34 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e2       	ldi	r20, 0x20	; 32
    3bf0:	51 e4       	ldi	r21, 0x41	; 65
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	cd 01       	movw	r24, r26
    3bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	9e 83       	std	Y+6, r25	; 0x06
    3c08:	8d 83       	std	Y+5, r24	; 0x05
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <LCD_init+0xf2>
    3c0c:	80 e9       	ldi	r24, 0x90	; 144
    3c0e:	91 e0       	ldi	r25, 0x01	; 1
    3c10:	9c 83       	std	Y+4, r25	; 0x04
    3c12:	8b 83       	std	Y+3, r24	; 0x03
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	9c 81       	ldd	r25, Y+4	; 0x04
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <LCD_init+0xe0>
    3c1c:	9c 83       	std	Y+4, r25	; 0x04
    3c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c20:	8d 81       	ldd	r24, Y+5	; 0x05
    3c22:	9e 81       	ldd	r25, Y+6	; 0x06
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	9e 83       	std	Y+6, r25	; 0x06
    3c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2e:	00 97       	sbiw	r24, 0x00	; 0
    3c30:	69 f7       	brne	.-38     	; 0x3c0c <LCD_init+0xd4>
    3c32:	14 c0       	rjmp	.+40     	; 0x3c5c <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c34:	6f 81       	ldd	r22, Y+7	; 0x07
    3c36:	78 85       	ldd	r23, Y+8	; 0x08
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4c:	9a 83       	std	Y+2, r25	; 0x02
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <LCD_init+0x11c>
    3c58:	9a 83       	std	Y+2, r25	; 0x02
    3c5a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3c5c:	88 e3       	ldi	r24, 0x38	; 56
    3c5e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3c62:	8c e0       	ldi	r24, 0x0C	; 12
    3c64:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
}
    3c6e:	2e 96       	adiw	r28, 0x0e	; 14
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	00 d0       	rcall	.+0      	; 0x3c86 <LCD_GoToXY+0x6>
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <LCD_GoToXY+0x8>
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	88 32       	cpi	r24, 0x28	; 40
    3c94:	c0 f4       	brcc	.+48     	; 0x3cc6 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	28 2f       	mov	r18, r24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	3c 83       	std	Y+4, r19	; 0x04
    3c9e:	2b 83       	std	Y+3, r18	; 0x03
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	31 f0       	breq	.+12     	; 0x3cb4 <LCD_GoToXY+0x34>
    3ca8:	2b 81       	ldd	r18, Y+3	; 0x03
    3caa:	3c 81       	ldd	r19, Y+4	; 0x04
    3cac:	21 30       	cpi	r18, 0x01	; 1
    3cae:	31 05       	cpc	r19, r1
    3cb0:	31 f0       	breq	.+12     	; 0x3cbe <LCD_GoToXY+0x3e>
    3cb2:	09 c0       	rjmp	.+18     	; 0x3cc6 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb6:	80 58       	subi	r24, 0x80	; 128
    3cb8:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
    3cbc:	04 c0       	rjmp	.+8      	; 0x3cc6 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	80 54       	subi	r24, 0x40	; 64
    3cc2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
			break;
		}
	}
}
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <LCD_displayString+0x6>
    3cda:	0f 92       	push	r0
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
    3ce0:	9b 83       	std	Y+3, r25	; 0x03
    3ce2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3ce4:	19 82       	std	Y+1, r1	; 0x01
    3ce6:	0e c0       	rjmp	.+28     	; 0x3d04 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	28 2f       	mov	r18, r24
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	e2 0f       	add	r30, r18
    3cf6:	f3 1f       	adc	r31, r19
    3cf8:	80 81       	ld	r24, Z
    3cfa:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>
		i++;
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	8f 5f       	subi	r24, 0xFF	; 255
    3d02:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d0e:	fc 01       	movw	r30, r24
    3d10:	e2 0f       	add	r30, r18
    3d12:	f3 1f       	adc	r31, r19
    3d14:	80 81       	ld	r24, Z
    3d16:	88 23       	and	r24, r24
    3d18:	39 f7       	brne	.-50     	; 0x3ce8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	cf 91       	pop	r28
    3d22:	df 91       	pop	r29
    3d24:	08 95       	ret

00003d26 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3d26:	df 93       	push	r29
    3d28:	cf 93       	push	r28
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	28 97       	sbiw	r28, 0x08	; 8
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	8b 83       	std	Y+3, r24	; 0x03
    3d3c:	6c 83       	std	Y+4, r22	; 0x04
    3d3e:	5e 83       	std	Y+6, r21	; 0x06
    3d40:	4d 83       	std	Y+5, r20	; 0x05
    3d42:	38 87       	std	Y+8, r19	; 0x08
    3d44:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3d46:	1a 82       	std	Y+2, r1	; 0x02
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	88 23       	and	r24, r24
    3d50:	49 f4       	brne	.+18     	; 0x3d64 <LCD_String_xy+0x3e>
    3d52:	8c 81       	ldd	r24, Y+4	; 0x04
    3d54:	80 31       	cpi	r24, 0x10	; 16
    3d56:	30 f4       	brcc	.+12     	; 0x3d64 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3d58:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5a:	8f 70       	andi	r24, 0x0F	; 15
    3d5c:	80 68       	ori	r24, 0x80	; 128
    3d5e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
    3d62:	3a c0       	rjmp	.+116    	; 0x3dd8 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3d64:	8b 81       	ldd	r24, Y+3	; 0x03
    3d66:	81 30       	cpi	r24, 0x01	; 1
    3d68:	b9 f5       	brne	.+110    	; 0x3dd8 <LCD_String_xy+0xb2>
    3d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d6c:	80 31       	cpi	r24, 0x10	; 16
    3d6e:	a0 f5       	brcc	.+104    	; 0x3dd8 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    3d70:	8c 81       	ldd	r24, Y+4	; 0x04
    3d72:	8f 70       	andi	r24, 0x0F	; 15
    3d74:	80 6c       	ori	r24, 0xC0	; 192
    3d76:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
    3d7a:	2e c0       	rjmp	.+92     	; 0x3dd8 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	28 2f       	mov	r18, r24
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	fc 01       	movw	r30, r24
    3d88:	e2 0f       	add	r30, r18
    3d8a:	f3 1f       	adc	r31, r19
    3d8c:	80 81       	ld	r24, Z
    3d8e:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>
		i++;
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	8f 5f       	subi	r24, 0xFF	; 255
    3d96:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3d98:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9a:	88 23       	and	r24, r24
    3d9c:	71 f4       	brne	.+28     	; 0x3dba <LCD_String_xy+0x94>
    3d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3da0:	83 30       	cpi	r24, 0x03	; 3
    3da2:	58 f0       	brcs	.+22     	; 0x3dba <LCD_String_xy+0x94>
    3da4:	8a 81       	ldd	r24, Y+2	; 0x02
    3da6:	8b 30       	cpi	r24, 0x0B	; 11
    3da8:	41 f4       	brne	.+16     	; 0x3dba <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <LCD_GoToXY>
			c++;
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	8f 5f       	subi	r24, 0xFF	; 255
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	0b c0       	rjmp	.+22     	; 0x3dd0 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3dba:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbc:	81 30       	cpi	r24, 0x01	; 1
    3dbe:	41 f4       	brne	.+16     	; 0x3dd0 <LCD_String_xy+0xaa>
    3dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc2:	83 30       	cpi	r24, 0x03	; 3
    3dc4:	28 f0       	brcs	.+10     	; 0x3dd0 <LCD_String_xy+0xaa>
    3dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc8:	8b 30       	cpi	r24, 0x0B	; 11
    3dca:	11 f4       	brne	.+4      	; 0x3dd0 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3dcc:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <LCD_ClearScreen>
		}

		*count = c;
    3dd0:	ef 81       	ldd	r30, Y+7	; 0x07
    3dd2:	f8 85       	ldd	r31, Y+8	; 0x08
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dda:	28 2f       	mov	r18, r24
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	8d 81       	ldd	r24, Y+5	; 0x05
    3de0:	9e 81       	ldd	r25, Y+6	; 0x06
    3de2:	fc 01       	movw	r30, r24
    3de4:	e2 0f       	add	r30, r18
    3de6:	f3 1f       	adc	r31, r19
    3de8:	80 81       	ld	r24, Z
    3dea:	88 23       	and	r24, r24
    3dec:	39 f6       	brne	.-114    	; 0x3d7c <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3dee:	28 96       	adiw	r28, 0x08	; 8
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	cf 91       	pop	r28
    3dfc:	df 91       	pop	r29
    3dfe:	08 95       	ret

00003e00 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3e00:	df 93       	push	r29
    3e02:	cf 93       	push	r28
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	2e 97       	sbiw	r28, 0x0e	; 14
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a0 e0       	ldi	r26, 0x00	; 0
    3e20:	b0 e4       	ldi	r27, 0x40	; 64
    3e22:	8b 87       	std	Y+11, r24	; 0x0b
    3e24:	9c 87       	std	Y+12, r25	; 0x0c
    3e26:	ad 87       	std	Y+13, r26	; 0x0d
    3e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	4a e7       	ldi	r20, 0x7A	; 122
    3e38:	55 e4       	ldi	r21, 0x45	; 69
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	8f 83       	std	Y+7, r24	; 0x07
    3e44:	98 87       	std	Y+8, r25	; 0x08
    3e46:	a9 87       	std	Y+9, r26	; 0x09
    3e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e8       	ldi	r20, 0x80	; 128
    3e58:	5f e3       	ldi	r21, 0x3F	; 63
    3e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e5e:	88 23       	and	r24, r24
    3e60:	2c f4       	brge	.+10     	; 0x3e6c <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	9e 83       	std	Y+6, r25	; 0x06
    3e68:	8d 83       	std	Y+5, r24	; 0x05
    3e6a:	3f c0       	rjmp	.+126    	; 0x3eea <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6e:	78 85       	ldd	r23, Y+8	; 0x08
    3e70:	89 85       	ldd	r24, Y+9	; 0x09
    3e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	3f ef       	ldi	r19, 0xFF	; 255
    3e78:	4f e7       	ldi	r20, 0x7F	; 127
    3e7a:	57 e4       	ldi	r21, 0x47	; 71
    3e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e80:	18 16       	cp	r1, r24
    3e82:	4c f5       	brge	.+82     	; 0x3ed6 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e2       	ldi	r20, 0x20	; 32
    3e92:	51 e4       	ldi	r21, 0x41	; 65
    3e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	bc 01       	movw	r22, r24
    3e9e:	cd 01       	movw	r24, r26
    3ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	9e 83       	std	Y+6, r25	; 0x06
    3eaa:	8d 83       	std	Y+5, r24	; 0x05
    3eac:	0f c0       	rjmp	.+30     	; 0x3ecc <LCD_ClearScreen+0xcc>
    3eae:	80 e9       	ldi	r24, 0x90	; 144
    3eb0:	91 e0       	ldi	r25, 0x01	; 1
    3eb2:	9c 83       	std	Y+4, r25	; 0x04
    3eb4:	8b 83       	std	Y+3, r24	; 0x03
    3eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	f1 f7       	brne	.-4      	; 0x3eba <LCD_ClearScreen+0xba>
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	69 f7       	brne	.-38     	; 0x3eae <LCD_ClearScreen+0xae>
    3ed4:	14 c0       	rjmp	.+40     	; 0x3efe <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed8:	78 85       	ldd	r23, Y+8	; 0x08
    3eda:	89 85       	ldd	r24, Y+9	; 0x09
    3edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	9e 83       	std	Y+6, r25	; 0x06
    3ee8:	8d 83       	std	Y+5, r24	; 0x05
    3eea:	8d 81       	ldd	r24, Y+5	; 0x05
    3eec:	9e 81       	ldd	r25, Y+6	; 0x06
    3eee:	9a 83       	std	Y+2, r25	; 0x02
    3ef0:	89 83       	std	Y+1, r24	; 0x01
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	f1 f7       	brne	.-4      	; 0x3ef6 <LCD_ClearScreen+0xf6>
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3efe:	2e 96       	adiw	r28, 0x0e	; 14
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	2e 97       	sbiw	r28, 0x0e	; 14
    3f1a:	0f b6       	in	r0, 0x3f	; 63
    3f1c:	f8 94       	cli
    3f1e:	de bf       	out	0x3e, r29	; 62
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3f24:	88 e1       	ldi	r24, 0x18	; 24
    3f26:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	a0 ea       	ldi	r26, 0xA0	; 160
    3f30:	b1 e4       	ldi	r27, 0x41	; 65
    3f32:	8b 87       	std	Y+11, r24	; 0x0b
    3f34:	9c 87       	std	Y+12, r25	; 0x0c
    3f36:	ad 87       	std	Y+13, r26	; 0x0d
    3f38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	4a e7       	ldi	r20, 0x7A	; 122
    3f48:	55 e4       	ldi	r21, 0x45	; 69
    3f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	8f 83       	std	Y+7, r24	; 0x07
    3f54:	98 87       	std	Y+8, r25	; 0x08
    3f56:	a9 87       	std	Y+9, r26	; 0x09
    3f58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5c:	78 85       	ldd	r23, Y+8	; 0x08
    3f5e:	89 85       	ldd	r24, Y+9	; 0x09
    3f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 e8       	ldi	r20, 0x80	; 128
    3f68:	5f e3       	ldi	r21, 0x3F	; 63
    3f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f6e:	88 23       	and	r24, r24
    3f70:	2c f4       	brge	.+10     	; 0x3f7c <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	9e 83       	std	Y+6, r25	; 0x06
    3f78:	8d 83       	std	Y+5, r24	; 0x05
    3f7a:	3f c0       	rjmp	.+126    	; 0x3ffa <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f7e:	78 85       	ldd	r23, Y+8	; 0x08
    3f80:	89 85       	ldd	r24, Y+9	; 0x09
    3f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	3f ef       	ldi	r19, 0xFF	; 255
    3f88:	4f e7       	ldi	r20, 0x7F	; 127
    3f8a:	57 e4       	ldi	r21, 0x47	; 71
    3f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f90:	18 16       	cp	r1, r24
    3f92:	4c f5       	brge	.+82     	; 0x3fe6 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e2       	ldi	r20, 0x20	; 32
    3fa2:	51 e4       	ldi	r21, 0x41	; 65
    3fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	bc 01       	movw	r22, r24
    3fae:	cd 01       	movw	r24, r26
    3fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	8d 83       	std	Y+5, r24	; 0x05
    3fbc:	0f c0       	rjmp	.+30     	; 0x3fdc <LCD_ShiftingLeft+0xcc>
    3fbe:	80 e9       	ldi	r24, 0x90	; 144
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
    3fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	f1 f7       	brne	.-4      	; 0x3fca <LCD_ShiftingLeft+0xba>
    3fce:	9c 83       	std	Y+4, r25	; 0x04
    3fd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	9e 83       	std	Y+6, r25	; 0x06
    3fda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fde:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe0:	00 97       	sbiw	r24, 0x00	; 0
    3fe2:	69 f7       	brne	.-38     	; 0x3fbe <LCD_ShiftingLeft+0xae>
    3fe4:	14 c0       	rjmp	.+40     	; 0x400e <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fe8:	78 85       	ldd	r23, Y+8	; 0x08
    3fea:	89 85       	ldd	r24, Y+9	; 0x09
    3fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	9e 83       	std	Y+6, r25	; 0x06
    3ff8:	8d 83       	std	Y+5, r24	; 0x05
    3ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffe:	9a 83       	std	Y+2, r25	; 0x02
    4000:	89 83       	std	Y+1, r24	; 0x01
    4002:	89 81       	ldd	r24, Y+1	; 0x01
    4004:	9a 81       	ldd	r25, Y+2	; 0x02
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	f1 f7       	brne	.-4      	; 0x4006 <LCD_ShiftingLeft+0xf6>
    400a:	9a 83       	std	Y+2, r25	; 0x02
    400c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    400e:	2e 96       	adiw	r28, 0x0e	; 14
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	08 95       	ret

00004020 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	2e 97       	sbiw	r28, 0x0e	; 14
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    4034:	8c e1       	ldi	r24, 0x1C	; 28
    4036:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	a0 ea       	ldi	r26, 0xA0	; 160
    4040:	b1 e4       	ldi	r27, 0x41	; 65
    4042:	8b 87       	std	Y+11, r24	; 0x0b
    4044:	9c 87       	std	Y+12, r25	; 0x0c
    4046:	ad 87       	std	Y+13, r26	; 0x0d
    4048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    404a:	6b 85       	ldd	r22, Y+11	; 0x0b
    404c:	7c 85       	ldd	r23, Y+12	; 0x0c
    404e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4050:	9e 85       	ldd	r25, Y+14	; 0x0e
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	4a e7       	ldi	r20, 0x7A	; 122
    4058:	55 e4       	ldi	r21, 0x45	; 69
    405a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	8f 83       	std	Y+7, r24	; 0x07
    4064:	98 87       	std	Y+8, r25	; 0x08
    4066:	a9 87       	std	Y+9, r26	; 0x09
    4068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    406a:	6f 81       	ldd	r22, Y+7	; 0x07
    406c:	78 85       	ldd	r23, Y+8	; 0x08
    406e:	89 85       	ldd	r24, Y+9	; 0x09
    4070:	9a 85       	ldd	r25, Y+10	; 0x0a
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e8       	ldi	r20, 0x80	; 128
    4078:	5f e3       	ldi	r21, 0x3F	; 63
    407a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    407e:	88 23       	and	r24, r24
    4080:	2c f4       	brge	.+10     	; 0x408c <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	9e 83       	std	Y+6, r25	; 0x06
    4088:	8d 83       	std	Y+5, r24	; 0x05
    408a:	3f c0       	rjmp	.+126    	; 0x410a <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    408c:	6f 81       	ldd	r22, Y+7	; 0x07
    408e:	78 85       	ldd	r23, Y+8	; 0x08
    4090:	89 85       	ldd	r24, Y+9	; 0x09
    4092:	9a 85       	ldd	r25, Y+10	; 0x0a
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	3f ef       	ldi	r19, 0xFF	; 255
    4098:	4f e7       	ldi	r20, 0x7F	; 127
    409a:	57 e4       	ldi	r21, 0x47	; 71
    409c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40a0:	18 16       	cp	r1, r24
    40a2:	4c f5       	brge	.+82     	; 0x40f6 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    40a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e2       	ldi	r20, 0x20	; 32
    40b2:	51 e4       	ldi	r21, 0x41	; 65
    40b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	bc 01       	movw	r22, r24
    40be:	cd 01       	movw	r24, r26
    40c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	9e 83       	std	Y+6, r25	; 0x06
    40ca:	8d 83       	std	Y+5, r24	; 0x05
    40cc:	0f c0       	rjmp	.+30     	; 0x40ec <LCD_ShiftingRight+0xcc>
    40ce:	80 e9       	ldi	r24, 0x90	; 144
    40d0:	91 e0       	ldi	r25, 0x01	; 1
    40d2:	9c 83       	std	Y+4, r25	; 0x04
    40d4:	8b 83       	std	Y+3, r24	; 0x03
    40d6:	8b 81       	ldd	r24, Y+3	; 0x03
    40d8:	9c 81       	ldd	r25, Y+4	; 0x04
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	f1 f7       	brne	.-4      	; 0x40da <LCD_ShiftingRight+0xba>
    40de:	9c 83       	std	Y+4, r25	; 0x04
    40e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e2:	8d 81       	ldd	r24, Y+5	; 0x05
    40e4:	9e 81       	ldd	r25, Y+6	; 0x06
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	9e 83       	std	Y+6, r25	; 0x06
    40ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ec:	8d 81       	ldd	r24, Y+5	; 0x05
    40ee:	9e 81       	ldd	r25, Y+6	; 0x06
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	69 f7       	brne	.-38     	; 0x40ce <LCD_ShiftingRight+0xae>
    40f4:	14 c0       	rjmp	.+40     	; 0x411e <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f6:	6f 81       	ldd	r22, Y+7	; 0x07
    40f8:	78 85       	ldd	r23, Y+8	; 0x08
    40fa:	89 85       	ldd	r24, Y+9	; 0x09
    40fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	9e 83       	std	Y+6, r25	; 0x06
    4108:	8d 83       	std	Y+5, r24	; 0x05
    410a:	8d 81       	ldd	r24, Y+5	; 0x05
    410c:	9e 81       	ldd	r25, Y+6	; 0x06
    410e:	9a 83       	std	Y+2, r25	; 0x02
    4110:	89 83       	std	Y+1, r24	; 0x01
    4112:	89 81       	ldd	r24, Y+1	; 0x01
    4114:	9a 81       	ldd	r25, Y+2	; 0x02
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	f1 f7       	brne	.-4      	; 0x4116 <LCD_ShiftingRight+0xf6>
    411a:	9a 83       	std	Y+2, r25	; 0x02
    411c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    411e:	2e 96       	adiw	r28, 0x0e	; 14
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	cf 91       	pop	r28
    412c:	df 91       	pop	r29
    412e:	08 95       	ret

00004130 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    4130:	0f 93       	push	r16
    4132:	df 93       	push	r29
    4134:	cf 93       	push	r28
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	28 97       	sbiw	r28, 0x08	; 8
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	8b 83       	std	Y+3, r24	; 0x03
    4148:	7d 83       	std	Y+5, r23	; 0x05
    414a:	6c 83       	std	Y+4, r22	; 0x04
    414c:	4e 83       	std	Y+6, r20	; 0x06
    414e:	2f 83       	std	Y+7, r18	; 0x07
    4150:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    4152:	88 85       	ldd	r24, Y+8	; 0x08
    4154:	0e 94 ee 18 	call	0x31dc	; 0x31dc <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    4158:	1a 82       	std	Y+2, r1	; 0x02
    415a:	19 82       	std	Y+1, r1	; 0x01
    415c:	0f c0       	rjmp	.+30     	; 0x417c <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    415e:	29 81       	ldd	r18, Y+1	; 0x01
    4160:	3a 81       	ldd	r19, Y+2	; 0x02
    4162:	8c 81       	ldd	r24, Y+4	; 0x04
    4164:	9d 81       	ldd	r25, Y+5	; 0x05
    4166:	fc 01       	movw	r30, r24
    4168:	e2 0f       	add	r30, r18
    416a:	f3 1f       	adc	r31, r19
    416c:	80 81       	ld	r24, Z
    416e:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	9a 81       	ldd	r25, Y+2	; 0x02
    4176:	01 96       	adiw	r24, 0x01	; 1
    4178:	9a 83       	std	Y+2, r25	; 0x02
    417a:	89 83       	std	Y+1, r24	; 0x01
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	9a 81       	ldd	r25, Y+2	; 0x02
    4180:	88 30       	cpi	r24, 0x08	; 8
    4182:	91 05       	cpc	r25, r1
    4184:	64 f3       	brlt	.-40     	; 0x415e <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    4186:	8e 81       	ldd	r24, Y+6	; 0x06
    4188:	6f 81       	ldd	r22, Y+7	; 0x07
    418a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    418e:	8b 81       	ldd	r24, Y+3	; 0x03
    4190:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    4194:	8f 81       	ldd	r24, Y+7	; 0x07
    4196:	80 31       	cpi	r24, 0x10	; 16
    4198:	48 f0       	brcs	.+18     	; 0x41ac <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    419a:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    41a6:	8b 81       	ldd	r24, Y+3	; 0x03
    41a8:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>
	}
}
    41ac:	28 96       	adiw	r28, 0x08	; 8
    41ae:	0f b6       	in	r0, 0x3f	; 63
    41b0:	f8 94       	cli
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	cd bf       	out	0x3d, r28	; 61
    41b8:	cf 91       	pop	r28
    41ba:	df 91       	pop	r29
    41bc:	0f 91       	pop	r16
    41be:	08 95       	ret

000041c0 <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	28 97       	sbiw	r28, 0x08	; 8
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	6d 83       	std	Y+5, r22	; 0x05
    41d6:	7e 83       	std	Y+6, r23	; 0x06
    41d8:	8f 83       	std	Y+7, r24	; 0x07
    41da:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    41dc:	6d 81       	ldd	r22, Y+5	; 0x05
    41de:	7e 81       	ldd	r23, Y+6	; 0x06
    41e0:	8f 81       	ldd	r24, Y+7	; 0x07
    41e2:	98 85       	ldd	r25, Y+8	; 0x08
    41e4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	9c 83       	std	Y+4, r25	; 0x04
    41ee:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    41f0:	8b 81       	ldd	r24, Y+3	; 0x03
    41f2:	9c 81       	ldd	r25, Y+4	; 0x04
    41f4:	aa 27       	eor	r26, r26
    41f6:	97 fd       	sbrc	r25, 7
    41f8:	a0 95       	com	r26
    41fa:	ba 2f       	mov	r27, r26
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    4204:	9b 01       	movw	r18, r22
    4206:	ac 01       	movw	r20, r24
    4208:	6d 81       	ldd	r22, Y+5	; 0x05
    420a:	7e 81       	ldd	r23, Y+6	; 0x06
    420c:	8f 81       	ldd	r24, Y+7	; 0x07
    420e:	98 85       	ldd	r25, Y+8	; 0x08
    4210:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	4a e7       	ldi	r20, 0x7A	; 122
    4222:	54 e4       	ldi	r21, 0x44	; 68
    4224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	bc 01       	movw	r22, r24
    422e:	cd 01       	movw	r24, r26
    4230:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    423c:	8b 81       	ldd	r24, Y+3	; 0x03
    423e:	9c 81       	ldd	r25, Y+4	; 0x04
    4240:	84 36       	cpi	r24, 0x64	; 100
    4242:	91 05       	cpc	r25, r1
    4244:	54 f0       	brlt	.+20     	; 0x425a <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    4246:	8b 81       	ldd	r24, Y+3	; 0x03
    4248:	9c 81       	ldd	r25, Y+4	; 0x04
    424a:	2a e0       	ldi	r18, 0x0A	; 10
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	b9 01       	movw	r22, r18
    4250:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__divmodhi4>
    4254:	cb 01       	movw	r24, r22
    4256:	9c 83       	std	Y+4, r25	; 0x04
    4258:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_DisplayInteger(integerPart);
    425a:	8b 81       	ldd	r24, Y+3	; 0x03
    425c:	9c 81       	ldd	r25, Y+4	; 0x04
    425e:	aa 27       	eor	r26, r26
    4260:	97 fd       	sbrc	r25, 7
    4262:	a0 95       	com	r26
    4264:	ba 2f       	mov	r27, r26
    4266:	bc 01       	movw	r22, r24
    4268:	cd 01       	movw	r24, r26
    426a:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <LCD_DisplayInteger>
    LCD_displayCharacter('.');
    426e:	8e e2       	ldi	r24, 0x2E	; 46
    4270:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>
    LCD_DisplayInteger(decimalPart);
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	aa 27       	eor	r26, r26
    427a:	97 fd       	sbrc	r25, 7
    427c:	a0 95       	com	r26
    427e:	ba 2f       	mov	r27, r26
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <LCD_DisplayInteger>
    
}
    4288:	28 96       	adiw	r28, 0x08	; 8
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	f8 94       	cli
    428e:	de bf       	out	0x3e, r29	; 62
    4290:	0f be       	out	0x3f, r0	; 63
    4292:	cd bf       	out	0x3d, r28	; 61
    4294:	cf 91       	pop	r28
    4296:	df 91       	pop	r29
    4298:	08 95       	ret

0000429a <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    429a:	df 93       	push	r29
    429c:	cf 93       	push	r28
    429e:	00 d0       	rcall	.+0      	; 0x42a0 <displayMinusNumbers+0x6>
    42a0:	00 d0       	rcall	.+0      	; 0x42a2 <displayMinusNumbers+0x8>
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	69 83       	std	Y+1, r22	; 0x01
    42a8:	7a 83       	std	Y+2, r23	; 0x02
    42aa:	8b 83       	std	Y+3, r24	; 0x03
    42ac:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    42ae:	8d e2       	ldi	r24, 0x2D	; 45
    42b0:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <LCD_displayCharacter>
	number = -number;
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	9a 81       	ldd	r25, Y+2	; 0x02
    42b8:	ab 81       	ldd	r26, Y+3	; 0x03
    42ba:	bc 81       	ldd	r27, Y+4	; 0x04
    42bc:	b0 58       	subi	r27, 0x80	; 128
    42be:	89 83       	std	Y+1, r24	; 0x01
    42c0:	9a 83       	std	Y+2, r25	; 0x02
    42c2:	ab 83       	std	Y+3, r26	; 0x03
    42c4:	bc 83       	std	Y+4, r27	; 0x04
	LCD_DisplayInteger(number);   
    42c6:	69 81       	ldd	r22, Y+1	; 0x01
    42c8:	7a 81       	ldd	r23, Y+2	; 0x02
    42ca:	8b 81       	ldd	r24, Y+3	; 0x03
    42cc:	9c 81       	ldd	r25, Y+4	; 0x04
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	bc 01       	movw	r22, r24
    42d8:	cd 01       	movw	r24, r26
    42da:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <LCD_DisplayInteger>
}
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	0f 90       	pop	r0
    42e4:	0f 90       	pop	r0
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <KPD_voidInit>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <KPD_voidInit+0x6>
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    42f6:	1a 82       	std	Y+2, r1	; 0x02
    42f8:	19 82       	std	Y+1, r1	; 0x01
    42fa:	31 c0       	rjmp	.+98     	; 0x435e <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4300:	fc 01       	movw	r30, r24
    4302:	e5 58       	subi	r30, 0x85	; 133
    4304:	fe 4f       	sbci	r31, 0xFE	; 254
    4306:	90 81       	ld	r25, Z
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	69 2f       	mov	r22, r25
    430c:	41 e0       	ldi	r20, 0x01	; 1
    430e:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	9a 81       	ldd	r25, Y+2	; 0x02
    4316:	fc 01       	movw	r30, r24
    4318:	e5 58       	subi	r30, 0x85	; 133
    431a:	fe 4f       	sbci	r31, 0xFE	; 254
    431c:	90 81       	ld	r25, Z
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	69 2f       	mov	r22, r25
    4322:	41 e0       	ldi	r20, 0x01	; 1
    4324:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	fc 01       	movw	r30, r24
    432e:	e1 58       	subi	r30, 0x81	; 129
    4330:	fe 4f       	sbci	r31, 0xFE	; 254
    4332:	90 81       	ld	r25, Z
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	69 2f       	mov	r22, r25
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    433e:	89 81       	ldd	r24, Y+1	; 0x01
    4340:	9a 81       	ldd	r25, Y+2	; 0x02
    4342:	fc 01       	movw	r30, r24
    4344:	e1 58       	subi	r30, 0x81	; 129
    4346:	fe 4f       	sbci	r31, 0xFE	; 254
    4348:	90 81       	ld	r25, Z
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	69 2f       	mov	r22, r25
    434e:	41 e0       	ldi	r20, 0x01	; 1
    4350:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	9a 81       	ldd	r25, Y+2	; 0x02
    4358:	01 96       	adiw	r24, 0x01	; 1
    435a:	9a 83       	std	Y+2, r25	; 0x02
    435c:	89 83       	std	Y+1, r24	; 0x01
    435e:	89 81       	ldd	r24, Y+1	; 0x01
    4360:	9a 81       	ldd	r25, Y+2	; 0x02
    4362:	84 30       	cpi	r24, 0x04	; 4
    4364:	91 05       	cpc	r25, r1
    4366:	54 f2       	brlt	.-108    	; 0x42fc <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <KPD_u8GetKeyState>:



u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	65 97       	sbiw	r28, 0x15	; 21
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	9d 8b       	std	Y+21, r25	; 0x15
    4388:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    438e:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    4390:	8c 89       	ldd	r24, Y+20	; 0x14
    4392:	9d 89       	ldd	r25, Y+21	; 0x15
    4394:	00 97       	sbiw	r24, 0x00	; 0
    4396:	09 f4       	brne	.+2      	; 0x439a <KPD_u8GetKeyState+0x28>
    4398:	f0 c0       	rjmp	.+480    	; 0x457a <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    439a:	ec 89       	ldd	r30, Y+20	; 0x14
    439c:	fd 89       	ldd	r31, Y+21	; 0x15
    439e:	8f ef       	ldi	r24, 0xFF	; 255
    43a0:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    43a2:	19 8a       	std	Y+17, r1	; 0x11
    43a4:	e5 c0       	rjmp	.+458    	; 0x4570 <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    43a6:	89 89       	ldd	r24, Y+17	; 0x11
    43a8:	88 2f       	mov	r24, r24
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	fc 01       	movw	r30, r24
    43ae:	e5 58       	subi	r30, 0x85	; 133
    43b0:	fe 4f       	sbci	r31, 0xFE	; 254
    43b2:	90 81       	ld	r25, Z
    43b4:	80 e0       	ldi	r24, 0x00	; 0
    43b6:	69 2f       	mov	r22, r25
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    43be:	18 8a       	std	Y+16, r1	; 0x10
    43c0:	c1 c0       	rjmp	.+386    	; 0x4544 <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    43c2:	88 89       	ldd	r24, Y+16	; 0x10
    43c4:	88 2f       	mov	r24, r24
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	fc 01       	movw	r30, r24
    43ca:	e1 58       	subi	r30, 0x81	; 129
    43cc:	fe 4f       	sbci	r31, 0xFE	; 254
    43ce:	90 81       	ld	r25, Z
    43d0:	9e 01       	movw	r18, r28
    43d2:	2d 5e       	subi	r18, 0xED	; 237
    43d4:	3f 4f       	sbci	r19, 0xFF	; 255
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	69 2f       	mov	r22, r25
    43da:	a9 01       	movw	r20, r18
    43dc:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    43e0:	8b 89       	ldd	r24, Y+19	; 0x13
    43e2:	88 23       	and	r24, r24
    43e4:	09 f0       	breq	.+2      	; 0x43e8 <KPD_u8GetKeyState+0x76>
    43e6:	ab c0       	rjmp	.+342    	; 0x453e <KPD_u8GetKeyState+0x1cc>
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	a0 ea       	ldi	r26, 0xA0	; 160
    43ee:	b1 e4       	ldi	r27, 0x41	; 65
    43f0:	8b 87       	std	Y+11, r24	; 0x0b
    43f2:	9c 87       	std	Y+12, r25	; 0x0c
    43f4:	ad 87       	std	Y+13, r26	; 0x0d
    43f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    43fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	4a e7       	ldi	r20, 0x7A	; 122
    4406:	55 e4       	ldi	r21, 0x45	; 69
    4408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    440c:	dc 01       	movw	r26, r24
    440e:	cb 01       	movw	r24, r22
    4410:	8f 83       	std	Y+7, r24	; 0x07
    4412:	98 87       	std	Y+8, r25	; 0x08
    4414:	a9 87       	std	Y+9, r26	; 0x09
    4416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4418:	6f 81       	ldd	r22, Y+7	; 0x07
    441a:	78 85       	ldd	r23, Y+8	; 0x08
    441c:	89 85       	ldd	r24, Y+9	; 0x09
    441e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e8       	ldi	r20, 0x80	; 128
    4426:	5f e3       	ldi	r21, 0x3F	; 63
    4428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    442c:	88 23       	and	r24, r24
    442e:	2c f4       	brge	.+10     	; 0x443a <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	9e 83       	std	Y+6, r25	; 0x06
    4436:	8d 83       	std	Y+5, r24	; 0x05
    4438:	3f c0       	rjmp	.+126    	; 0x44b8 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    443a:	6f 81       	ldd	r22, Y+7	; 0x07
    443c:	78 85       	ldd	r23, Y+8	; 0x08
    443e:	89 85       	ldd	r24, Y+9	; 0x09
    4440:	9a 85       	ldd	r25, Y+10	; 0x0a
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	3f ef       	ldi	r19, 0xFF	; 255
    4446:	4f e7       	ldi	r20, 0x7F	; 127
    4448:	57 e4       	ldi	r21, 0x47	; 71
    444a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    444e:	18 16       	cp	r1, r24
    4450:	4c f5       	brge	.+82     	; 0x44a4 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4452:	6b 85       	ldd	r22, Y+11	; 0x0b
    4454:	7c 85       	ldd	r23, Y+12	; 0x0c
    4456:	8d 85       	ldd	r24, Y+13	; 0x0d
    4458:	9e 85       	ldd	r25, Y+14	; 0x0e
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	40 e2       	ldi	r20, 0x20	; 32
    4460:	51 e4       	ldi	r21, 0x41	; 65
    4462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	bc 01       	movw	r22, r24
    446c:	cd 01       	movw	r24, r26
    446e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	9e 83       	std	Y+6, r25	; 0x06
    4478:	8d 83       	std	Y+5, r24	; 0x05
    447a:	0f c0       	rjmp	.+30     	; 0x449a <KPD_u8GetKeyState+0x128>
    447c:	80 e9       	ldi	r24, 0x90	; 144
    447e:	91 e0       	ldi	r25, 0x01	; 1
    4480:	9c 83       	std	Y+4, r25	; 0x04
    4482:	8b 83       	std	Y+3, r24	; 0x03
    4484:	8b 81       	ldd	r24, Y+3	; 0x03
    4486:	9c 81       	ldd	r25, Y+4	; 0x04
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <KPD_u8GetKeyState+0x116>
    448c:	9c 83       	std	Y+4, r25	; 0x04
    448e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4490:	8d 81       	ldd	r24, Y+5	; 0x05
    4492:	9e 81       	ldd	r25, Y+6	; 0x06
    4494:	01 97       	sbiw	r24, 0x01	; 1
    4496:	9e 83       	std	Y+6, r25	; 0x06
    4498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    449a:	8d 81       	ldd	r24, Y+5	; 0x05
    449c:	9e 81       	ldd	r25, Y+6	; 0x06
    449e:	00 97       	sbiw	r24, 0x00	; 0
    44a0:	69 f7       	brne	.-38     	; 0x447c <KPD_u8GetKeyState+0x10a>
    44a2:	14 c0       	rjmp	.+40     	; 0x44cc <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a4:	6f 81       	ldd	r22, Y+7	; 0x07
    44a6:	78 85       	ldd	r23, Y+8	; 0x08
    44a8:	89 85       	ldd	r24, Y+9	; 0x09
    44aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	9e 83       	std	Y+6, r25	; 0x06
    44b6:	8d 83       	std	Y+5, r24	; 0x05
    44b8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ba:	9e 81       	ldd	r25, Y+6	; 0x06
    44bc:	9a 83       	std	Y+2, r25	; 0x02
    44be:	89 83       	std	Y+1, r24	; 0x01
    44c0:	89 81       	ldd	r24, Y+1	; 0x01
    44c2:	9a 81       	ldd	r25, Y+2	; 0x02
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	f1 f7       	brne	.-4      	; 0x44c4 <KPD_u8GetKeyState+0x152>
    44c8:	9a 83       	std	Y+2, r25	; 0x02
    44ca:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    44cc:	88 89       	ldd	r24, Y+16	; 0x10
    44ce:	88 2f       	mov	r24, r24
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	fc 01       	movw	r30, r24
    44d4:	e1 58       	subi	r30, 0x81	; 129
    44d6:	fe 4f       	sbci	r31, 0xFE	; 254
    44d8:	90 81       	ld	r25, Z
    44da:	9e 01       	movw	r18, r28
    44dc:	2d 5e       	subi	r18, 0xED	; 237
    44de:	3f 4f       	sbci	r19, 0xFF	; 255
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	69 2f       	mov	r22, r25
    44e4:	a9 01       	movw	r20, r18
    44e6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <DIO_u8GetPinValue>
    44ea:	0f c0       	rjmp	.+30     	; 0x450a <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    44ec:	88 89       	ldd	r24, Y+16	; 0x10
    44ee:	88 2f       	mov	r24, r24
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	fc 01       	movw	r30, r24
    44f4:	e1 58       	subi	r30, 0x81	; 129
    44f6:	fe 4f       	sbci	r31, 0xFE	; 254
    44f8:	90 81       	ld	r25, Z
    44fa:	9e 01       	movw	r18, r28
    44fc:	2d 5e       	subi	r18, 0xED	; 237
    44fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	69 2f       	mov	r22, r25
    4504:	a9 01       	movw	r20, r18
    4506:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    450a:	8b 89       	ldd	r24, Y+19	; 0x13
    450c:	88 23       	and	r24, r24
    450e:	71 f3       	breq	.-36     	; 0x44ec <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    4510:	89 89       	ldd	r24, Y+17	; 0x11
    4512:	48 2f       	mov	r20, r24
    4514:	50 e0       	ldi	r21, 0x00	; 0
    4516:	88 89       	ldd	r24, Y+16	; 0x10
    4518:	28 2f       	mov	r18, r24
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	ca 01       	movw	r24, r20
    451e:	88 0f       	add	r24, r24
    4520:	99 1f       	adc	r25, r25
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	82 0f       	add	r24, r18
    4528:	93 1f       	adc	r25, r19
    452a:	fc 01       	movw	r30, r24
    452c:	e5 59       	subi	r30, 0x95	; 149
    452e:	fe 4f       	sbci	r31, 0xFE	; 254
    4530:	80 81       	ld	r24, Z
    4532:	ec 89       	ldd	r30, Y+20	; 0x14
    4534:	fd 89       	ldd	r31, Y+21	; 0x15
    4536:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	8f 87       	std	Y+15, r24	; 0x0f
    453c:	07 c0       	rjmp	.+14     	; 0x454c <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    453e:	88 89       	ldd	r24, Y+16	; 0x10
    4540:	8f 5f       	subi	r24, 0xFF	; 255
    4542:	88 8b       	std	Y+16, r24	; 0x10
    4544:	88 89       	ldd	r24, Y+16	; 0x10
    4546:	84 30       	cpi	r24, 0x04	; 4
    4548:	08 f4       	brcc	.+2      	; 0x454c <KPD_u8GetKeyState+0x1da>
    454a:	3b cf       	rjmp	.-394    	; 0x43c2 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    454c:	89 89       	ldd	r24, Y+17	; 0x11
    454e:	88 2f       	mov	r24, r24
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	fc 01       	movw	r30, r24
    4554:	e5 58       	subi	r30, 0x85	; 133
    4556:	fe 4f       	sbci	r31, 0xFE	; 254
    4558:	90 81       	ld	r25, Z
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	69 2f       	mov	r22, r25
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
			if(Local_u8Flag){
    4564:	8f 85       	ldd	r24, Y+15	; 0x0f
    4566:	88 23       	and	r24, r24
    4568:	49 f4       	brne	.+18     	; 0x457c <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    456a:	89 89       	ldd	r24, Y+17	; 0x11
    456c:	8f 5f       	subi	r24, 0xFF	; 255
    456e:	89 8b       	std	Y+17, r24	; 0x11
    4570:	89 89       	ldd	r24, Y+17	; 0x11
    4572:	84 30       	cpi	r24, 0x04	; 4
    4574:	08 f4       	brcc	.+2      	; 0x4578 <KPD_u8GetKeyState+0x206>
    4576:	17 cf       	rjmp	.-466    	; 0x43a6 <KPD_u8GetKeyState+0x34>
    4578:	01 c0       	rjmp	.+2      	; 0x457c <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    457a:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    457c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    457e:	65 96       	adiw	r28, 0x15	; 21
    4580:	0f b6       	in	r0, 0x3f	; 63
    4582:	f8 94       	cli
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	0f be       	out	0x3f, r0	; 63
    4588:	cd bf       	out	0x3d, r28	; 61
    458a:	cf 91       	pop	r28
    458c:	df 91       	pop	r29
    458e:	08 95       	ret

00004590 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h"

#include "DC_Motor_Config.h"
#include "DC_Motor_Private.h"

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    4590:	df 93       	push	r29
    4592:	cf 93       	push	r28
    4594:	00 d0       	rcall	.+0      	; 0x4596 <DC_Motor_Init+0x6>
    4596:	0f 92       	push	r0
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
    459c:	8a 83       	std	Y+2, r24	; 0x02
    459e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    45a4:	8a 81       	ldd	r24, Y+2	; 0x02
    45a6:	81 30       	cpi	r24, 0x01	; 1
    45a8:	79 f4       	brne	.+30     	; 0x45c8 <DC_Motor_Init+0x38>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, DIO_u8_OUTPUT);
    45aa:	83 e0       	ldi	r24, 0x03	; 3
    45ac:	62 e0       	ldi	r22, 0x02	; 2
    45ae:	41 e0       	ldi	r20, 0x01	; 1
    45b0:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_u8_OUTPUT);
    45b4:	83 e0       	ldi	r24, 0x03	; 3
    45b6:	60 e0       	ldi	r22, 0x00	; 0
    45b8:	41 e0       	ldi	r20, 0x01	; 1
    45ba:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_u8_OUTPUT);
    45be:	83 e0       	ldi	r24, 0x03	; 3
    45c0:	61 e0       	ldi	r22, 0x01	; 1
    45c2:	41 e0       	ldi	r20, 0x01	; 1
    45c4:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
	}

	if(Copy_u8_Motor2 == MOTOR_Connected){
    45c8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ca:	81 30       	cpi	r24, 0x01	; 1
    45cc:	81 f4       	brne	.+32     	; 0x45ee <DC_Motor_Init+0x5e>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, DIO_u8_OUTPUT);
    45ce:	83 e0       	ldi	r24, 0x03	; 3
    45d0:	63 e0       	ldi	r22, 0x03	; 3
    45d2:	41 e0       	ldi	r20, 0x01	; 1
    45d4:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_u8_OUTPUT);
    45d8:	83 e0       	ldi	r24, 0x03	; 3
    45da:	66 e0       	ldi	r22, 0x06	; 6
    45dc:	41 e0       	ldi	r20, 0x01	; 1
    45de:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_u8_OUTPUT);
    45e2:	83 e0       	ldi	r24, 0x03	; 3
    45e4:	67 e0       	ldi	r22, 0x07	; 7
    45e6:	41 e0       	ldi	r20, 0x01	; 1
    45e8:	0e 94 77 11 	call	0x22ee	; 0x22ee <DIO_u8SetPinDirection>
    45ec:	01 c0       	rjmp	.+2      	; 0x45f0 <DC_Motor_Init+0x60>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    45ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	cf 91       	pop	r28
    45fa:	df 91       	pop	r29
    45fc:	08 95       	ret

000045fe <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    45fe:	df 93       	push	r29
    4600:	cf 93       	push	r28
    4602:	cd b7       	in	r28, 0x3d	; 61
    4604:	de b7       	in	r29, 0x3e	; 62
    4606:	29 97       	sbiw	r28, 0x09	; 9
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	f8 94       	cli
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	8a 83       	std	Y+2, r24	; 0x02
    4614:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    461a:	8a 81       	ldd	r24, Y+2	; 0x02
    461c:	28 2f       	mov	r18, r24
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	39 87       	std	Y+9, r19	; 0x09
    4622:	28 87       	std	Y+8, r18	; 0x08
    4624:	88 85       	ldd	r24, Y+8	; 0x08
    4626:	99 85       	ldd	r25, Y+9	; 0x09
    4628:	00 97       	sbiw	r24, 0x00	; 0
    462a:	31 f0       	breq	.+12     	; 0x4638 <DC_Motor_Rotate+0x3a>
    462c:	28 85       	ldd	r18, Y+8	; 0x08
    462e:	39 85       	ldd	r19, Y+9	; 0x09
    4630:	21 30       	cpi	r18, 0x01	; 1
    4632:	31 05       	cpc	r19, r1
    4634:	89 f1       	breq	.+98     	; 0x4698 <DC_Motor_Rotate+0x9a>
    4636:	60 c0       	rjmp	.+192    	; 0x46f8 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	28 2f       	mov	r18, r24
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	3f 83       	std	Y+7, r19	; 0x07
    4640:	2e 83       	std	Y+6, r18	; 0x06
    4642:	8e 81       	ldd	r24, Y+6	; 0x06
    4644:	9f 81       	ldd	r25, Y+7	; 0x07
    4646:	00 97       	sbiw	r24, 0x00	; 0
    4648:	a9 f0       	breq	.+42     	; 0x4674 <DC_Motor_Rotate+0x76>
    464a:	2e 81       	ldd	r18, Y+6	; 0x06
    464c:	3f 81       	ldd	r19, Y+7	; 0x07
    464e:	21 30       	cpi	r18, 0x01	; 1
    4650:	31 05       	cpc	r19, r1
    4652:	01 f5       	brne	.+64     	; 0x4694 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	62 e0       	ldi	r22, 0x02	; 2
    4658:	41 e0       	ldi	r20, 0x01	; 1
    465a:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    465e:	83 e0       	ldi	r24, 0x03	; 3
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	41 e0       	ldi	r20, 0x01	; 1
    4664:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    4668:	83 e0       	ldi	r24, 0x03	; 3
    466a:	61 e0       	ldi	r22, 0x01	; 1
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    4672:	43 c0       	rjmp	.+134    	; 0x46fa <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4674:	83 e0       	ldi	r24, 0x03	; 3
    4676:	62 e0       	ldi	r22, 0x02	; 2
    4678:	41 e0       	ldi	r20, 0x01	; 1
    467a:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    467e:	83 e0       	ldi	r24, 0x03	; 3
    4680:	60 e0       	ldi	r22, 0x00	; 0
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    4688:	83 e0       	ldi	r24, 0x03	; 3
    468a:	61 e0       	ldi	r22, 0x01	; 1
    468c:	41 e0       	ldi	r20, 0x01	; 1
    468e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    4692:	33 c0       	rjmp	.+102    	; 0x46fa <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4694:	19 82       	std	Y+1, r1	; 0x01
    4696:	31 c0       	rjmp	.+98     	; 0x46fa <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    4698:	8b 81       	ldd	r24, Y+3	; 0x03
    469a:	28 2f       	mov	r18, r24
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	3d 83       	std	Y+5, r19	; 0x05
    46a0:	2c 83       	std	Y+4, r18	; 0x04
    46a2:	8c 81       	ldd	r24, Y+4	; 0x04
    46a4:	9d 81       	ldd	r25, Y+5	; 0x05
    46a6:	00 97       	sbiw	r24, 0x00	; 0
    46a8:	a9 f0       	breq	.+42     	; 0x46d4 <DC_Motor_Rotate+0xd6>
    46aa:	2c 81       	ldd	r18, Y+4	; 0x04
    46ac:	3d 81       	ldd	r19, Y+5	; 0x05
    46ae:	21 30       	cpi	r18, 0x01	; 1
    46b0:	31 05       	cpc	r19, r1
    46b2:	01 f5       	brne	.+64     	; 0x46f4 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    46b4:	83 e0       	ldi	r24, 0x03	; 3
    46b6:	63 e0       	ldi	r22, 0x03	; 3
    46b8:	41 e0       	ldi	r20, 0x01	; 1
    46ba:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    46be:	83 e0       	ldi	r24, 0x03	; 3
    46c0:	66 e0       	ldi	r22, 0x06	; 6
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    46c8:	83 e0       	ldi	r24, 0x03	; 3
    46ca:	67 e0       	ldi	r22, 0x07	; 7
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    46d2:	13 c0       	rjmp	.+38     	; 0x46fa <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    46d4:	83 e0       	ldi	r24, 0x03	; 3
    46d6:	63 e0       	ldi	r22, 0x03	; 3
    46d8:	41 e0       	ldi	r20, 0x01	; 1
    46da:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    46de:	83 e0       	ldi	r24, 0x03	; 3
    46e0:	66 e0       	ldi	r22, 0x06	; 6
    46e2:	40 e0       	ldi	r20, 0x00	; 0
    46e4:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    46e8:	83 e0       	ldi	r24, 0x03	; 3
    46ea:	67 e0       	ldi	r22, 0x07	; 7
    46ec:	41 e0       	ldi	r20, 0x01	; 1
    46ee:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    46f2:	03 c0       	rjmp	.+6      	; 0x46fa <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    46f4:	19 82       	std	Y+1, r1	; 0x01
    46f6:	01 c0       	rjmp	.+2      	; 0x46fa <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    46f8:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    46fc:	29 96       	adiw	r28, 0x09	; 9
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	de bf       	out	0x3e, r29	; 62
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	cd bf       	out	0x3d, r28	; 61
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	08 95       	ret

0000470e <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    470e:	df 93       	push	r29
    4710:	cf 93       	push	r28
    4712:	00 d0       	rcall	.+0      	; 0x4714 <DC_Motor_Stop+0x6>
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	88 23       	and	r24, r24
    4722:	31 f4       	brne	.+12     	; 0x4730 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    4724:	83 e0       	ldi	r24, 0x03	; 3
    4726:	62 e0       	ldi	r22, 0x02	; 2
    4728:	40 e0       	ldi	r20, 0x00	; 0
    472a:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    472e:	0a c0       	rjmp	.+20     	; 0x4744 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    4730:	8a 81       	ldd	r24, Y+2	; 0x02
    4732:	81 30       	cpi	r24, 0x01	; 1
    4734:	31 f4       	brne	.+12     	; 0x4742 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    4736:	83 e0       	ldi	r24, 0x03	; 3
    4738:	63 e0       	ldi	r22, 0x03	; 3
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    4740:	01 c0       	rjmp	.+2      	; 0x4744 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4742:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4744:	89 81       	ldd	r24, Y+1	; 0x01
}
    4746:	0f 90       	pop	r0
    4748:	0f 90       	pop	r0
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	0f 92       	push	r0
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    475c:	89 81       	ldd	r24, Y+1	; 0x01
    475e:	61 e0       	ldi	r22, 0x01	; 1
    4760:	0e 94 12 15 	call	0x2a24	; 0x2a24 <DIO_u8SetPortDirection>
}
    4764:	0f 90       	pop	r0
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	08 95       	ret

0000476c <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    476c:	af 92       	push	r10
    476e:	cf 92       	push	r12
    4770:	ef 92       	push	r14
    4772:	0f 93       	push	r16
    4774:	df 93       	push	r29
    4776:	cf 93       	push	r28
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	2a 97       	sbiw	r28, 0x0a	; 10
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	f8 94       	cli
    4782:	de bf       	out	0x3e, r29	; 62
    4784:	0f be       	out	0x3f, r0	; 63
    4786:	cd bf       	out	0x3d, r28	; 61
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	6a 83       	std	Y+2, r22	; 0x02
    478c:	4b 83       	std	Y+3, r20	; 0x03
    478e:	2c 83       	std	Y+4, r18	; 0x04
    4790:	0d 83       	std	Y+5, r16	; 0x05
    4792:	ee 82       	std	Y+6, r14	; 0x06
    4794:	cf 82       	std	Y+7, r12	; 0x07
    4796:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	28 2f       	mov	r18, r24
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	3a 87       	std	Y+10, r19	; 0x0a
    47a0:	29 87       	std	Y+9, r18	; 0x09
    47a2:	89 85       	ldd	r24, Y+9	; 0x09
    47a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a6:	81 30       	cpi	r24, 0x01	; 1
    47a8:	91 05       	cpc	r25, r1
    47aa:	09 f4       	brne	.+2      	; 0x47ae <SevenSegment_Display+0x42>
    47ac:	96 c0       	rjmp	.+300    	; 0x48da <SevenSegment_Display+0x16e>
    47ae:	29 85       	ldd	r18, Y+9	; 0x09
    47b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    47b2:	22 30       	cpi	r18, 0x02	; 2
    47b4:	31 05       	cpc	r19, r1
    47b6:	2c f4       	brge	.+10     	; 0x47c2 <SevenSegment_Display+0x56>
    47b8:	89 85       	ldd	r24, Y+9	; 0x09
    47ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    47bc:	00 97       	sbiw	r24, 0x00	; 0
    47be:	71 f0       	breq	.+28     	; 0x47dc <SevenSegment_Display+0x70>
    47c0:	08 c2       	rjmp	.+1040   	; 0x4bd2 <SevenSegment_Display+0x466>
    47c2:	29 85       	ldd	r18, Y+9	; 0x09
    47c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    47c6:	22 30       	cpi	r18, 0x02	; 2
    47c8:	31 05       	cpc	r19, r1
    47ca:	09 f4       	brne	.+2      	; 0x47ce <SevenSegment_Display+0x62>
    47cc:	05 c1       	rjmp	.+522    	; 0x49d8 <SevenSegment_Display+0x26c>
    47ce:	89 85       	ldd	r24, Y+9	; 0x09
    47d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d2:	83 30       	cpi	r24, 0x03	; 3
    47d4:	91 05       	cpc	r25, r1
    47d6:	09 f4       	brne	.+2      	; 0x47da <SevenSegment_Display+0x6e>
    47d8:	7e c1       	rjmp	.+764    	; 0x4ad6 <SevenSegment_Display+0x36a>
    47da:	fb c1       	rjmp	.+1014   	; 0x4bd2 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    47dc:	8a 81       	ldd	r24, Y+2	; 0x02
    47de:	81 30       	cpi	r24, 0x01	; 1
    47e0:	41 f4       	brne	.+16     	; 0x47f2 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    47e2:	ab e3       	ldi	r26, 0x3B	; 59
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	eb e3       	ldi	r30, 0x3B	; 59
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	81 60       	ori	r24, 0x01	; 1
    47ee:	8c 93       	st	X, r24
    47f0:	07 c0       	rjmp	.+14     	; 0x4800 <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    47f2:	ab e3       	ldi	r26, 0x3B	; 59
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	eb e3       	ldi	r30, 0x3B	; 59
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	80 81       	ld	r24, Z
    47fc:	8e 7f       	andi	r24, 0xFE	; 254
    47fe:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4800:	8b 81       	ldd	r24, Y+3	; 0x03
    4802:	81 30       	cpi	r24, 0x01	; 1
    4804:	41 f4       	brne	.+16     	; 0x4816 <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    4806:	ab e3       	ldi	r26, 0x3B	; 59
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	eb e3       	ldi	r30, 0x3B	; 59
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	82 60       	ori	r24, 0x02	; 2
    4812:	8c 93       	st	X, r24
    4814:	07 c0       	rjmp	.+14     	; 0x4824 <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    4816:	ab e3       	ldi	r26, 0x3B	; 59
    4818:	b0 e0       	ldi	r27, 0x00	; 0
    481a:	eb e3       	ldi	r30, 0x3B	; 59
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	80 81       	ld	r24, Z
    4820:	8d 7f       	andi	r24, 0xFD	; 253
    4822:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4824:	8c 81       	ldd	r24, Y+4	; 0x04
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	41 f4       	brne	.+16     	; 0x483a <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    482a:	ab e3       	ldi	r26, 0x3B	; 59
    482c:	b0 e0       	ldi	r27, 0x00	; 0
    482e:	eb e3       	ldi	r30, 0x3B	; 59
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	80 81       	ld	r24, Z
    4834:	84 60       	ori	r24, 0x04	; 4
    4836:	8c 93       	st	X, r24
    4838:	07 c0       	rjmp	.+14     	; 0x4848 <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    483a:	ab e3       	ldi	r26, 0x3B	; 59
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	eb e3       	ldi	r30, 0x3B	; 59
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	80 81       	ld	r24, Z
    4844:	8b 7f       	andi	r24, 0xFB	; 251
    4846:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4848:	8d 81       	ldd	r24, Y+5	; 0x05
    484a:	81 30       	cpi	r24, 0x01	; 1
    484c:	41 f4       	brne	.+16     	; 0x485e <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    484e:	ab e3       	ldi	r26, 0x3B	; 59
    4850:	b0 e0       	ldi	r27, 0x00	; 0
    4852:	eb e3       	ldi	r30, 0x3B	; 59
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	80 81       	ld	r24, Z
    4858:	88 60       	ori	r24, 0x08	; 8
    485a:	8c 93       	st	X, r24
    485c:	07 c0       	rjmp	.+14     	; 0x486c <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    485e:	ab e3       	ldi	r26, 0x3B	; 59
    4860:	b0 e0       	ldi	r27, 0x00	; 0
    4862:	eb e3       	ldi	r30, 0x3B	; 59
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	80 81       	ld	r24, Z
    4868:	87 7f       	andi	r24, 0xF7	; 247
    486a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    486c:	8e 81       	ldd	r24, Y+6	; 0x06
    486e:	81 30       	cpi	r24, 0x01	; 1
    4870:	41 f4       	brne	.+16     	; 0x4882 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4872:	ab e3       	ldi	r26, 0x3B	; 59
    4874:	b0 e0       	ldi	r27, 0x00	; 0
    4876:	eb e3       	ldi	r30, 0x3B	; 59
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	80 61       	ori	r24, 0x10	; 16
    487e:	8c 93       	st	X, r24
    4880:	07 c0       	rjmp	.+14     	; 0x4890 <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4882:	ab e3       	ldi	r26, 0x3B	; 59
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	eb e3       	ldi	r30, 0x3B	; 59
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	80 81       	ld	r24, Z
    488c:	8f 7e       	andi	r24, 0xEF	; 239
    488e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4890:	8f 81       	ldd	r24, Y+7	; 0x07
    4892:	81 30       	cpi	r24, 0x01	; 1
    4894:	41 f4       	brne	.+16     	; 0x48a6 <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4896:	ab e3       	ldi	r26, 0x3B	; 59
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	eb e3       	ldi	r30, 0x3B	; 59
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	80 62       	ori	r24, 0x20	; 32
    48a2:	8c 93       	st	X, r24
    48a4:	07 c0       	rjmp	.+14     	; 0x48b4 <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    48a6:	ab e3       	ldi	r26, 0x3B	; 59
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	eb e3       	ldi	r30, 0x3B	; 59
    48ac:	f0 e0       	ldi	r31, 0x00	; 0
    48ae:	80 81       	ld	r24, Z
    48b0:	8f 7d       	andi	r24, 0xDF	; 223
    48b2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    48b4:	88 85       	ldd	r24, Y+8	; 0x08
    48b6:	81 30       	cpi	r24, 0x01	; 1
    48b8:	41 f4       	brne	.+16     	; 0x48ca <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    48ba:	ab e3       	ldi	r26, 0x3B	; 59
    48bc:	b0 e0       	ldi	r27, 0x00	; 0
    48be:	eb e3       	ldi	r30, 0x3B	; 59
    48c0:	f0 e0       	ldi	r31, 0x00	; 0
    48c2:	80 81       	ld	r24, Z
    48c4:	80 64       	ori	r24, 0x40	; 64
    48c6:	8c 93       	st	X, r24
    48c8:	84 c1       	rjmp	.+776    	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    48ca:	ab e3       	ldi	r26, 0x3B	; 59
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	eb e3       	ldi	r30, 0x3B	; 59
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	8f 7b       	andi	r24, 0xBF	; 191
    48d6:	8c 93       	st	X, r24
    48d8:	7c c1       	rjmp	.+760    	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    48da:	8a 81       	ldd	r24, Y+2	; 0x02
    48dc:	81 30       	cpi	r24, 0x01	; 1
    48de:	41 f4       	brne	.+16     	; 0x48f0 <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    48e0:	a8 e3       	ldi	r26, 0x38	; 56
    48e2:	b0 e0       	ldi	r27, 0x00	; 0
    48e4:	e8 e3       	ldi	r30, 0x38	; 56
    48e6:	f0 e0       	ldi	r31, 0x00	; 0
    48e8:	80 81       	ld	r24, Z
    48ea:	81 60       	ori	r24, 0x01	; 1
    48ec:	8c 93       	st	X, r24
    48ee:	07 c0       	rjmp	.+14     	; 0x48fe <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    48f0:	a8 e3       	ldi	r26, 0x38	; 56
    48f2:	b0 e0       	ldi	r27, 0x00	; 0
    48f4:	e8 e3       	ldi	r30, 0x38	; 56
    48f6:	f0 e0       	ldi	r31, 0x00	; 0
    48f8:	80 81       	ld	r24, Z
    48fa:	8e 7f       	andi	r24, 0xFE	; 254
    48fc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    48fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4900:	81 30       	cpi	r24, 0x01	; 1
    4902:	41 f4       	brne	.+16     	; 0x4914 <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    4904:	a8 e3       	ldi	r26, 0x38	; 56
    4906:	b0 e0       	ldi	r27, 0x00	; 0
    4908:	e8 e3       	ldi	r30, 0x38	; 56
    490a:	f0 e0       	ldi	r31, 0x00	; 0
    490c:	80 81       	ld	r24, Z
    490e:	82 60       	ori	r24, 0x02	; 2
    4910:	8c 93       	st	X, r24
    4912:	07 c0       	rjmp	.+14     	; 0x4922 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    4914:	a8 e3       	ldi	r26, 0x38	; 56
    4916:	b0 e0       	ldi	r27, 0x00	; 0
    4918:	e8 e3       	ldi	r30, 0x38	; 56
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	80 81       	ld	r24, Z
    491e:	8d 7f       	andi	r24, 0xFD	; 253
    4920:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4922:	8c 81       	ldd	r24, Y+4	; 0x04
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	41 f4       	brne	.+16     	; 0x4938 <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    4928:	a8 e3       	ldi	r26, 0x38	; 56
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	e8 e3       	ldi	r30, 0x38	; 56
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	84 60       	ori	r24, 0x04	; 4
    4934:	8c 93       	st	X, r24
    4936:	07 c0       	rjmp	.+14     	; 0x4946 <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    4938:	a8 e3       	ldi	r26, 0x38	; 56
    493a:	b0 e0       	ldi	r27, 0x00	; 0
    493c:	e8 e3       	ldi	r30, 0x38	; 56
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	80 81       	ld	r24, Z
    4942:	8b 7f       	andi	r24, 0xFB	; 251
    4944:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4946:	8d 81       	ldd	r24, Y+5	; 0x05
    4948:	81 30       	cpi	r24, 0x01	; 1
    494a:	41 f4       	brne	.+16     	; 0x495c <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    494c:	a8 e3       	ldi	r26, 0x38	; 56
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e8 e3       	ldi	r30, 0x38	; 56
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	88 60       	ori	r24, 0x08	; 8
    4958:	8c 93       	st	X, r24
    495a:	07 c0       	rjmp	.+14     	; 0x496a <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    495c:	a8 e3       	ldi	r26, 0x38	; 56
    495e:	b0 e0       	ldi	r27, 0x00	; 0
    4960:	e8 e3       	ldi	r30, 0x38	; 56
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 81       	ld	r24, Z
    4966:	87 7f       	andi	r24, 0xF7	; 247
    4968:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    496a:	8e 81       	ldd	r24, Y+6	; 0x06
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	41 f4       	brne	.+16     	; 0x4980 <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4970:	a8 e3       	ldi	r26, 0x38	; 56
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	e8 e3       	ldi	r30, 0x38	; 56
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	80 61       	ori	r24, 0x10	; 16
    497c:	8c 93       	st	X, r24
    497e:	07 c0       	rjmp	.+14     	; 0x498e <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4980:	a8 e3       	ldi	r26, 0x38	; 56
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	e8 e3       	ldi	r30, 0x38	; 56
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	8f 7e       	andi	r24, 0xEF	; 239
    498c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    498e:	8f 81       	ldd	r24, Y+7	; 0x07
    4990:	81 30       	cpi	r24, 0x01	; 1
    4992:	41 f4       	brne	.+16     	; 0x49a4 <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4994:	a8 e3       	ldi	r26, 0x38	; 56
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	e8 e3       	ldi	r30, 0x38	; 56
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	80 81       	ld	r24, Z
    499e:	80 62       	ori	r24, 0x20	; 32
    49a0:	8c 93       	st	X, r24
    49a2:	07 c0       	rjmp	.+14     	; 0x49b2 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    49a4:	a8 e3       	ldi	r26, 0x38	; 56
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	e8 e3       	ldi	r30, 0x38	; 56
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	8f 7d       	andi	r24, 0xDF	; 223
    49b0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    49b2:	88 85       	ldd	r24, Y+8	; 0x08
    49b4:	81 30       	cpi	r24, 0x01	; 1
    49b6:	41 f4       	brne	.+16     	; 0x49c8 <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    49b8:	a8 e3       	ldi	r26, 0x38	; 56
    49ba:	b0 e0       	ldi	r27, 0x00	; 0
    49bc:	e8 e3       	ldi	r30, 0x38	; 56
    49be:	f0 e0       	ldi	r31, 0x00	; 0
    49c0:	80 81       	ld	r24, Z
    49c2:	80 64       	ori	r24, 0x40	; 64
    49c4:	8c 93       	st	X, r24
    49c6:	05 c1       	rjmp	.+522    	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    49c8:	a8 e3       	ldi	r26, 0x38	; 56
    49ca:	b0 e0       	ldi	r27, 0x00	; 0
    49cc:	e8 e3       	ldi	r30, 0x38	; 56
    49ce:	f0 e0       	ldi	r31, 0x00	; 0
    49d0:	80 81       	ld	r24, Z
    49d2:	8f 7b       	andi	r24, 0xBF	; 191
    49d4:	8c 93       	st	X, r24
    49d6:	fd c0       	rjmp	.+506    	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    49d8:	8a 81       	ldd	r24, Y+2	; 0x02
    49da:	81 30       	cpi	r24, 0x01	; 1
    49dc:	41 f4       	brne	.+16     	; 0x49ee <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    49de:	a5 e3       	ldi	r26, 0x35	; 53
    49e0:	b0 e0       	ldi	r27, 0x00	; 0
    49e2:	e5 e3       	ldi	r30, 0x35	; 53
    49e4:	f0 e0       	ldi	r31, 0x00	; 0
    49e6:	80 81       	ld	r24, Z
    49e8:	81 60       	ori	r24, 0x01	; 1
    49ea:	8c 93       	st	X, r24
    49ec:	07 c0       	rjmp	.+14     	; 0x49fc <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    49ee:	a5 e3       	ldi	r26, 0x35	; 53
    49f0:	b0 e0       	ldi	r27, 0x00	; 0
    49f2:	e5 e3       	ldi	r30, 0x35	; 53
    49f4:	f0 e0       	ldi	r31, 0x00	; 0
    49f6:	80 81       	ld	r24, Z
    49f8:	8e 7f       	andi	r24, 0xFE	; 254
    49fa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
    49fe:	81 30       	cpi	r24, 0x01	; 1
    4a00:	41 f4       	brne	.+16     	; 0x4a12 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    4a02:	a5 e3       	ldi	r26, 0x35	; 53
    4a04:	b0 e0       	ldi	r27, 0x00	; 0
    4a06:	e5 e3       	ldi	r30, 0x35	; 53
    4a08:	f0 e0       	ldi	r31, 0x00	; 0
    4a0a:	80 81       	ld	r24, Z
    4a0c:	82 60       	ori	r24, 0x02	; 2
    4a0e:	8c 93       	st	X, r24
    4a10:	07 c0       	rjmp	.+14     	; 0x4a20 <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    4a12:	a5 e3       	ldi	r26, 0x35	; 53
    4a14:	b0 e0       	ldi	r27, 0x00	; 0
    4a16:	e5 e3       	ldi	r30, 0x35	; 53
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	80 81       	ld	r24, Z
    4a1c:	8d 7f       	andi	r24, 0xFD	; 253
    4a1e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4a20:	8c 81       	ldd	r24, Y+4	; 0x04
    4a22:	81 30       	cpi	r24, 0x01	; 1
    4a24:	41 f4       	brne	.+16     	; 0x4a36 <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    4a26:	a5 e3       	ldi	r26, 0x35	; 53
    4a28:	b0 e0       	ldi	r27, 0x00	; 0
    4a2a:	e5 e3       	ldi	r30, 0x35	; 53
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	80 81       	ld	r24, Z
    4a30:	84 60       	ori	r24, 0x04	; 4
    4a32:	8c 93       	st	X, r24
    4a34:	07 c0       	rjmp	.+14     	; 0x4a44 <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    4a36:	a5 e3       	ldi	r26, 0x35	; 53
    4a38:	b0 e0       	ldi	r27, 0x00	; 0
    4a3a:	e5 e3       	ldi	r30, 0x35	; 53
    4a3c:	f0 e0       	ldi	r31, 0x00	; 0
    4a3e:	80 81       	ld	r24, Z
    4a40:	8b 7f       	andi	r24, 0xFB	; 251
    4a42:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4a44:	8d 81       	ldd	r24, Y+5	; 0x05
    4a46:	81 30       	cpi	r24, 0x01	; 1
    4a48:	41 f4       	brne	.+16     	; 0x4a5a <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    4a4a:	a5 e3       	ldi	r26, 0x35	; 53
    4a4c:	b0 e0       	ldi	r27, 0x00	; 0
    4a4e:	e5 e3       	ldi	r30, 0x35	; 53
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	80 81       	ld	r24, Z
    4a54:	88 60       	ori	r24, 0x08	; 8
    4a56:	8c 93       	st	X, r24
    4a58:	07 c0       	rjmp	.+14     	; 0x4a68 <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    4a5a:	a5 e3       	ldi	r26, 0x35	; 53
    4a5c:	b0 e0       	ldi	r27, 0x00	; 0
    4a5e:	e5 e3       	ldi	r30, 0x35	; 53
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	80 81       	ld	r24, Z
    4a64:	87 7f       	andi	r24, 0xF7	; 247
    4a66:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4a68:	8e 81       	ldd	r24, Y+6	; 0x06
    4a6a:	81 30       	cpi	r24, 0x01	; 1
    4a6c:	41 f4       	brne	.+16     	; 0x4a7e <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4a6e:	a5 e3       	ldi	r26, 0x35	; 53
    4a70:	b0 e0       	ldi	r27, 0x00	; 0
    4a72:	e5 e3       	ldi	r30, 0x35	; 53
    4a74:	f0 e0       	ldi	r31, 0x00	; 0
    4a76:	80 81       	ld	r24, Z
    4a78:	80 61       	ori	r24, 0x10	; 16
    4a7a:	8c 93       	st	X, r24
    4a7c:	07 c0       	rjmp	.+14     	; 0x4a8c <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4a7e:	a5 e3       	ldi	r26, 0x35	; 53
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	e5 e3       	ldi	r30, 0x35	; 53
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	80 81       	ld	r24, Z
    4a88:	8f 7e       	andi	r24, 0xEF	; 239
    4a8a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a8e:	81 30       	cpi	r24, 0x01	; 1
    4a90:	41 f4       	brne	.+16     	; 0x4aa2 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4a92:	a5 e3       	ldi	r26, 0x35	; 53
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	e5 e3       	ldi	r30, 0x35	; 53
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	80 81       	ld	r24, Z
    4a9c:	80 62       	ori	r24, 0x20	; 32
    4a9e:	8c 93       	st	X, r24
    4aa0:	07 c0       	rjmp	.+14     	; 0x4ab0 <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4aa2:	a5 e3       	ldi	r26, 0x35	; 53
    4aa4:	b0 e0       	ldi	r27, 0x00	; 0
    4aa6:	e5 e3       	ldi	r30, 0x35	; 53
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	80 81       	ld	r24, Z
    4aac:	8f 7d       	andi	r24, 0xDF	; 223
    4aae:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4ab0:	88 85       	ldd	r24, Y+8	; 0x08
    4ab2:	81 30       	cpi	r24, 0x01	; 1
    4ab4:	41 f4       	brne	.+16     	; 0x4ac6 <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4ab6:	a5 e3       	ldi	r26, 0x35	; 53
    4ab8:	b0 e0       	ldi	r27, 0x00	; 0
    4aba:	e5 e3       	ldi	r30, 0x35	; 53
    4abc:	f0 e0       	ldi	r31, 0x00	; 0
    4abe:	80 81       	ld	r24, Z
    4ac0:	80 64       	ori	r24, 0x40	; 64
    4ac2:	8c 93       	st	X, r24
    4ac4:	86 c0       	rjmp	.+268    	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4ac6:	a5 e3       	ldi	r26, 0x35	; 53
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	e5 e3       	ldi	r30, 0x35	; 53
    4acc:	f0 e0       	ldi	r31, 0x00	; 0
    4ace:	80 81       	ld	r24, Z
    4ad0:	8f 7b       	andi	r24, 0xBF	; 191
    4ad2:	8c 93       	st	X, r24
    4ad4:	7e c0       	rjmp	.+252    	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad8:	81 30       	cpi	r24, 0x01	; 1
    4ada:	41 f4       	brne	.+16     	; 0x4aec <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4adc:	a2 e3       	ldi	r26, 0x32	; 50
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	e2 e3       	ldi	r30, 0x32	; 50
    4ae2:	f0 e0       	ldi	r31, 0x00	; 0
    4ae4:	80 81       	ld	r24, Z
    4ae6:	81 60       	ori	r24, 0x01	; 1
    4ae8:	8c 93       	st	X, r24
    4aea:	07 c0       	rjmp	.+14     	; 0x4afa <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4aec:	a2 e3       	ldi	r26, 0x32	; 50
    4aee:	b0 e0       	ldi	r27, 0x00	; 0
    4af0:	e2 e3       	ldi	r30, 0x32	; 50
    4af2:	f0 e0       	ldi	r31, 0x00	; 0
    4af4:	80 81       	ld	r24, Z
    4af6:	8e 7f       	andi	r24, 0xFE	; 254
    4af8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4afa:	8b 81       	ldd	r24, Y+3	; 0x03
    4afc:	81 30       	cpi	r24, 0x01	; 1
    4afe:	41 f4       	brne	.+16     	; 0x4b10 <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4b00:	a2 e3       	ldi	r26, 0x32	; 50
    4b02:	b0 e0       	ldi	r27, 0x00	; 0
    4b04:	e2 e3       	ldi	r30, 0x32	; 50
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	80 81       	ld	r24, Z
    4b0a:	82 60       	ori	r24, 0x02	; 2
    4b0c:	8c 93       	st	X, r24
    4b0e:	07 c0       	rjmp	.+14     	; 0x4b1e <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4b10:	a2 e3       	ldi	r26, 0x32	; 50
    4b12:	b0 e0       	ldi	r27, 0x00	; 0
    4b14:	e2 e3       	ldi	r30, 0x32	; 50
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	80 81       	ld	r24, Z
    4b1a:	8d 7f       	andi	r24, 0xFD	; 253
    4b1c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b20:	81 30       	cpi	r24, 0x01	; 1
    4b22:	41 f4       	brne	.+16     	; 0x4b34 <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4b24:	a2 e3       	ldi	r26, 0x32	; 50
    4b26:	b0 e0       	ldi	r27, 0x00	; 0
    4b28:	e2 e3       	ldi	r30, 0x32	; 50
    4b2a:	f0 e0       	ldi	r31, 0x00	; 0
    4b2c:	80 81       	ld	r24, Z
    4b2e:	84 60       	ori	r24, 0x04	; 4
    4b30:	8c 93       	st	X, r24
    4b32:	07 c0       	rjmp	.+14     	; 0x4b42 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4b34:	a2 e3       	ldi	r26, 0x32	; 50
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	e2 e3       	ldi	r30, 0x32	; 50
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	80 81       	ld	r24, Z
    4b3e:	8b 7f       	andi	r24, 0xFB	; 251
    4b40:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4b42:	8d 81       	ldd	r24, Y+5	; 0x05
    4b44:	81 30       	cpi	r24, 0x01	; 1
    4b46:	41 f4       	brne	.+16     	; 0x4b58 <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    4b48:	a2 e3       	ldi	r26, 0x32	; 50
    4b4a:	b0 e0       	ldi	r27, 0x00	; 0
    4b4c:	e2 e3       	ldi	r30, 0x32	; 50
    4b4e:	f0 e0       	ldi	r31, 0x00	; 0
    4b50:	80 81       	ld	r24, Z
    4b52:	88 60       	ori	r24, 0x08	; 8
    4b54:	8c 93       	st	X, r24
    4b56:	07 c0       	rjmp	.+14     	; 0x4b66 <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    4b58:	a2 e3       	ldi	r26, 0x32	; 50
    4b5a:	b0 e0       	ldi	r27, 0x00	; 0
    4b5c:	e2 e3       	ldi	r30, 0x32	; 50
    4b5e:	f0 e0       	ldi	r31, 0x00	; 0
    4b60:	80 81       	ld	r24, Z
    4b62:	87 7f       	andi	r24, 0xF7	; 247
    4b64:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4b66:	8e 81       	ldd	r24, Y+6	; 0x06
    4b68:	81 30       	cpi	r24, 0x01	; 1
    4b6a:	41 f4       	brne	.+16     	; 0x4b7c <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4b6c:	a2 e3       	ldi	r26, 0x32	; 50
    4b6e:	b0 e0       	ldi	r27, 0x00	; 0
    4b70:	e2 e3       	ldi	r30, 0x32	; 50
    4b72:	f0 e0       	ldi	r31, 0x00	; 0
    4b74:	80 81       	ld	r24, Z
    4b76:	80 61       	ori	r24, 0x10	; 16
    4b78:	8c 93       	st	X, r24
    4b7a:	07 c0       	rjmp	.+14     	; 0x4b8a <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4b7c:	a2 e3       	ldi	r26, 0x32	; 50
    4b7e:	b0 e0       	ldi	r27, 0x00	; 0
    4b80:	e2 e3       	ldi	r30, 0x32	; 50
    4b82:	f0 e0       	ldi	r31, 0x00	; 0
    4b84:	80 81       	ld	r24, Z
    4b86:	8f 7e       	andi	r24, 0xEF	; 239
    4b88:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4b8a:	8f 81       	ldd	r24, Y+7	; 0x07
    4b8c:	81 30       	cpi	r24, 0x01	; 1
    4b8e:	41 f4       	brne	.+16     	; 0x4ba0 <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4b90:	a2 e3       	ldi	r26, 0x32	; 50
    4b92:	b0 e0       	ldi	r27, 0x00	; 0
    4b94:	e2 e3       	ldi	r30, 0x32	; 50
    4b96:	f0 e0       	ldi	r31, 0x00	; 0
    4b98:	80 81       	ld	r24, Z
    4b9a:	80 62       	ori	r24, 0x20	; 32
    4b9c:	8c 93       	st	X, r24
    4b9e:	07 c0       	rjmp	.+14     	; 0x4bae <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4ba0:	a2 e3       	ldi	r26, 0x32	; 50
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	e2 e3       	ldi	r30, 0x32	; 50
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	8f 7d       	andi	r24, 0xDF	; 223
    4bac:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4bae:	88 85       	ldd	r24, Y+8	; 0x08
    4bb0:	81 30       	cpi	r24, 0x01	; 1
    4bb2:	41 f4       	brne	.+16     	; 0x4bc4 <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4bb4:	a2 e3       	ldi	r26, 0x32	; 50
    4bb6:	b0 e0       	ldi	r27, 0x00	; 0
    4bb8:	e2 e3       	ldi	r30, 0x32	; 50
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	80 81       	ld	r24, Z
    4bbe:	80 64       	ori	r24, 0x40	; 64
    4bc0:	8c 93       	st	X, r24
    4bc2:	07 c0       	rjmp	.+14     	; 0x4bd2 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4bc4:	a2 e3       	ldi	r26, 0x32	; 50
    4bc6:	b0 e0       	ldi	r27, 0x00	; 0
    4bc8:	e2 e3       	ldi	r30, 0x32	; 50
    4bca:	f0 e0       	ldi	r31, 0x00	; 0
    4bcc:	80 81       	ld	r24, Z
    4bce:	8f 7b       	andi	r24, 0xBF	; 191
    4bd0:	8c 93       	st	X, r24
		}
		break;
	}
}
    4bd2:	2a 96       	adiw	r28, 0x0a	; 10
    4bd4:	0f b6       	in	r0, 0x3f	; 63
    4bd6:	f8 94       	cli
    4bd8:	de bf       	out	0x3e, r29	; 62
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	cd bf       	out	0x3d, r28	; 61
    4bde:	cf 91       	pop	r28
    4be0:	df 91       	pop	r29
    4be2:	0f 91       	pop	r16
    4be4:	ef 90       	pop	r14
    4be6:	cf 90       	pop	r12
    4be8:	af 90       	pop	r10
    4bea:	08 95       	ret

00004bec <SevenSegment_From0To9>:

void SevenSegment_From0To9(u8 Copy_u8PortId){
    4bec:	af 92       	push	r10
    4bee:	cf 92       	push	r12
    4bf0:	ef 92       	push	r14
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	df 93       	push	r29
    4bf8:	cf 93       	push	r28
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	cd 58       	subi	r28, 0x8D	; 141
    4c00:	d0 40       	sbci	r29, 0x00	; 0
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	f8 94       	cli
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	cd bf       	out	0x3d, r28	; 61
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	e3 57       	subi	r30, 0x73	; 115
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 0); // 0
    4c14:	fe 01       	movw	r30, r28
    4c16:	e3 57       	subi	r30, 0x73	; 115
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	80 81       	ld	r24, Z
    4c1c:	61 e0       	ldi	r22, 0x01	; 1
    4c1e:	41 e0       	ldi	r20, 0x01	; 1
    4c20:	21 e0       	ldi	r18, 0x01	; 1
    4c22:	01 e0       	ldi	r16, 0x01	; 1
    4c24:	ee 24       	eor	r14, r14
    4c26:	e3 94       	inc	r14
    4c28:	cc 24       	eor	r12, r12
    4c2a:	c3 94       	inc	r12
    4c2c:	aa 24       	eor	r10, r10
    4c2e:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    4c32:	fe 01       	movw	r30, r28
    4c34:	e7 57       	subi	r30, 0x77	; 119
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	a8 e4       	ldi	r26, 0x48	; 72
    4c3e:	b2 e4       	ldi	r27, 0x42	; 66
    4c40:	80 83       	st	Z, r24
    4c42:	91 83       	std	Z+1, r25	; 0x01
    4c44:	a2 83       	std	Z+2, r26	; 0x02
    4c46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c48:	8e 01       	movw	r16, r28
    4c4a:	0b 57       	subi	r16, 0x7B	; 123
    4c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4e:	fe 01       	movw	r30, r28
    4c50:	e7 57       	subi	r30, 0x77	; 119
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	60 81       	ld	r22, Z
    4c56:	71 81       	ldd	r23, Z+1	; 0x01
    4c58:	82 81       	ldd	r24, Z+2	; 0x02
    4c5a:	93 81       	ldd	r25, Z+3	; 0x03
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	4a e7       	ldi	r20, 0x7A	; 122
    4c62:	55 e4       	ldi	r21, 0x45	; 69
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	f8 01       	movw	r30, r16
    4c6e:	80 83       	st	Z, r24
    4c70:	91 83       	std	Z+1, r25	; 0x01
    4c72:	a2 83       	std	Z+2, r26	; 0x02
    4c74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c76:	fe 01       	movw	r30, r28
    4c78:	eb 57       	subi	r30, 0x7B	; 123
    4c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7c:	60 81       	ld	r22, Z
    4c7e:	71 81       	ldd	r23, Z+1	; 0x01
    4c80:	82 81       	ldd	r24, Z+2	; 0x02
    4c82:	93 81       	ldd	r25, Z+3	; 0x03
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	40 e8       	ldi	r20, 0x80	; 128
    4c8a:	5f e3       	ldi	r21, 0x3F	; 63
    4c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c90:	88 23       	and	r24, r24
    4c92:	44 f4       	brge	.+16     	; 0x4ca4 <SevenSegment_From0To9+0xb8>
		__ticks = 1;
    4c94:	fe 01       	movw	r30, r28
    4c96:	ed 57       	subi	r30, 0x7D	; 125
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	91 83       	std	Z+1, r25	; 0x01
    4ca0:	80 83       	st	Z, r24
    4ca2:	64 c0       	rjmp	.+200    	; 0x4d6c <SevenSegment_From0To9+0x180>
	else if (__tmp > 65535)
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	eb 57       	subi	r30, 0x7B	; 123
    4ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    4caa:	60 81       	ld	r22, Z
    4cac:	71 81       	ldd	r23, Z+1	; 0x01
    4cae:	82 81       	ldd	r24, Z+2	; 0x02
    4cb0:	93 81       	ldd	r25, Z+3	; 0x03
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	3f ef       	ldi	r19, 0xFF	; 255
    4cb6:	4f e7       	ldi	r20, 0x7F	; 127
    4cb8:	57 e4       	ldi	r21, 0x47	; 71
    4cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cbe:	18 16       	cp	r1, r24
    4cc0:	0c f0       	brlt	.+2      	; 0x4cc4 <SevenSegment_From0To9+0xd8>
    4cc2:	43 c0       	rjmp	.+134    	; 0x4d4a <SevenSegment_From0To9+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e7 57       	subi	r30, 0x77	; 119
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	60 81       	ld	r22, Z
    4ccc:	71 81       	ldd	r23, Z+1	; 0x01
    4cce:	82 81       	ldd	r24, Z+2	; 0x02
    4cd0:	93 81       	ldd	r25, Z+3	; 0x03
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	40 e2       	ldi	r20, 0x20	; 32
    4cd8:	51 e4       	ldi	r21, 0x41	; 65
    4cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	8e 01       	movw	r16, r28
    4ce4:	0d 57       	subi	r16, 0x7D	; 125
    4ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce8:	bc 01       	movw	r22, r24
    4cea:	cd 01       	movw	r24, r26
    4cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	91 83       	std	Z+1, r25	; 0x01
    4cf8:	80 83       	st	Z, r24
    4cfa:	1f c0       	rjmp	.+62     	; 0x4d3a <SevenSegment_From0To9+0x14e>
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	ef 57       	subi	r30, 0x7F	; 127
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	80 e9       	ldi	r24, 0x90	; 144
    4d04:	91 e0       	ldi	r25, 0x01	; 1
    4d06:	91 83       	std	Z+1, r25	; 0x01
    4d08:	80 83       	st	Z, r24
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	ef 57       	subi	r30, 0x7F	; 127
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	80 81       	ld	r24, Z
    4d12:	91 81       	ldd	r25, Z+1	; 0x01
    4d14:	01 97       	sbiw	r24, 0x01	; 1
    4d16:	f1 f7       	brne	.-4      	; 0x4d14 <SevenSegment_From0To9+0x128>
    4d18:	fe 01       	movw	r30, r28
    4d1a:	ef 57       	subi	r30, 0x7F	; 127
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	91 83       	std	Z+1, r25	; 0x01
    4d20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d22:	de 01       	movw	r26, r28
    4d24:	ad 57       	subi	r26, 0x7D	; 125
    4d26:	bf 4f       	sbci	r27, 0xFF	; 255
    4d28:	fe 01       	movw	r30, r28
    4d2a:	ed 57       	subi	r30, 0x7D	; 125
    4d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2e:	80 81       	ld	r24, Z
    4d30:	91 81       	ldd	r25, Z+1	; 0x01
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	11 96       	adiw	r26, 0x01	; 1
    4d36:	9c 93       	st	X, r25
    4d38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	ed 57       	subi	r30, 0x7D	; 125
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	d1 f6       	brne	.-76     	; 0x4cfc <SevenSegment_From0To9+0x110>
    4d48:	27 c0       	rjmp	.+78     	; 0x4d98 <SevenSegment_From0To9+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d4a:	8e 01       	movw	r16, r28
    4d4c:	0d 57       	subi	r16, 0x7D	; 125
    4d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d50:	fe 01       	movw	r30, r28
    4d52:	eb 57       	subi	r30, 0x7B	; 123
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	60 81       	ld	r22, Z
    4d58:	71 81       	ldd	r23, Z+1	; 0x01
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	93 81       	ldd	r25, Z+3	; 0x03
    4d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	f8 01       	movw	r30, r16
    4d68:	91 83       	std	Z+1, r25	; 0x01
    4d6a:	80 83       	st	Z, r24
    4d6c:	de 01       	movw	r26, r28
    4d6e:	a1 58       	subi	r26, 0x81	; 129
    4d70:	bf 4f       	sbci	r27, 0xFF	; 255
    4d72:	fe 01       	movw	r30, r28
    4d74:	ed 57       	subi	r30, 0x7D	; 125
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	80 81       	ld	r24, Z
    4d7a:	91 81       	ldd	r25, Z+1	; 0x01
    4d7c:	8d 93       	st	X+, r24
    4d7e:	9c 93       	st	X, r25
    4d80:	fe 01       	movw	r30, r28
    4d82:	e1 58       	subi	r30, 0x81	; 129
    4d84:	ff 4f       	sbci	r31, 0xFF	; 255
    4d86:	80 81       	ld	r24, Z
    4d88:	91 81       	ldd	r25, Z+1	; 0x01
    4d8a:	01 97       	sbiw	r24, 0x01	; 1
    4d8c:	f1 f7       	brne	.-4      	; 0x4d8a <SevenSegment_From0To9+0x19e>
    4d8e:	fe 01       	movw	r30, r28
    4d90:	e1 58       	subi	r30, 0x81	; 129
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	91 83       	std	Z+1, r25	; 0x01
    4d96:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 0, 0); // 1
    4d98:	fe 01       	movw	r30, r28
    4d9a:	e3 57       	subi	r30, 0x73	; 115
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	80 81       	ld	r24, Z
    4da0:	60 e0       	ldi	r22, 0x00	; 0
    4da2:	41 e0       	ldi	r20, 0x01	; 1
    4da4:	21 e0       	ldi	r18, 0x01	; 1
    4da6:	00 e0       	ldi	r16, 0x00	; 0
    4da8:	ee 24       	eor	r14, r14
    4daa:	cc 24       	eor	r12, r12
    4dac:	aa 24       	eor	r10, r10
    4dae:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    4db2:	fe 01       	movw	r30, r28
    4db4:	e5 58       	subi	r30, 0x85	; 133
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	a8 e4       	ldi	r26, 0x48	; 72
    4dbe:	b2 e4       	ldi	r27, 0x42	; 66
    4dc0:	80 83       	st	Z, r24
    4dc2:	91 83       	std	Z+1, r25	; 0x01
    4dc4:	a2 83       	std	Z+2, r26	; 0x02
    4dc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc8:	8e 01       	movw	r16, r28
    4dca:	09 58       	subi	r16, 0x89	; 137
    4dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    4dce:	fe 01       	movw	r30, r28
    4dd0:	e5 58       	subi	r30, 0x85	; 133
    4dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd4:	60 81       	ld	r22, Z
    4dd6:	71 81       	ldd	r23, Z+1	; 0x01
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	93 81       	ldd	r25, Z+3	; 0x03
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	4a e7       	ldi	r20, 0x7A	; 122
    4de2:	55 e4       	ldi	r21, 0x45	; 69
    4de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	f8 01       	movw	r30, r16
    4dee:	80 83       	st	Z, r24
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	a2 83       	std	Z+2, r26	; 0x02
    4df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4df6:	fe 01       	movw	r30, r28
    4df8:	e9 58       	subi	r30, 0x89	; 137
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	60 81       	ld	r22, Z
    4dfe:	71 81       	ldd	r23, Z+1	; 0x01
    4e00:	82 81       	ldd	r24, Z+2	; 0x02
    4e02:	93 81       	ldd	r25, Z+3	; 0x03
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	40 e8       	ldi	r20, 0x80	; 128
    4e0a:	5f e3       	ldi	r21, 0x3F	; 63
    4e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e10:	88 23       	and	r24, r24
    4e12:	44 f4       	brge	.+16     	; 0x4e24 <SevenSegment_From0To9+0x238>
		__ticks = 1;
    4e14:	fe 01       	movw	r30, r28
    4e16:	eb 58       	subi	r30, 0x8B	; 139
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	80 83       	st	Z, r24
    4e22:	64 c0       	rjmp	.+200    	; 0x4eec <SevenSegment_From0To9+0x300>
	else if (__tmp > 65535)
    4e24:	fe 01       	movw	r30, r28
    4e26:	e9 58       	subi	r30, 0x89	; 137
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	60 81       	ld	r22, Z
    4e2c:	71 81       	ldd	r23, Z+1	; 0x01
    4e2e:	82 81       	ldd	r24, Z+2	; 0x02
    4e30:	93 81       	ldd	r25, Z+3	; 0x03
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	3f ef       	ldi	r19, 0xFF	; 255
    4e36:	4f e7       	ldi	r20, 0x7F	; 127
    4e38:	57 e4       	ldi	r21, 0x47	; 71
    4e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e3e:	18 16       	cp	r1, r24
    4e40:	0c f0       	brlt	.+2      	; 0x4e44 <SevenSegment_From0To9+0x258>
    4e42:	43 c0       	rjmp	.+134    	; 0x4eca <SevenSegment_From0To9+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e44:	fe 01       	movw	r30, r28
    4e46:	e5 58       	subi	r30, 0x85	; 133
    4e48:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e2       	ldi	r20, 0x20	; 32
    4e58:	51 e4       	ldi	r21, 0x41	; 65
    4e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	8e 01       	movw	r16, r28
    4e64:	0b 58       	subi	r16, 0x8B	; 139
    4e66:	1f 4f       	sbci	r17, 0xFF	; 255
    4e68:	bc 01       	movw	r22, r24
    4e6a:	cd 01       	movw	r24, r26
    4e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	f8 01       	movw	r30, r16
    4e76:	91 83       	std	Z+1, r25	; 0x01
    4e78:	80 83       	st	Z, r24
    4e7a:	1f c0       	rjmp	.+62     	; 0x4eba <SevenSegment_From0To9+0x2ce>
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	ed 58       	subi	r30, 0x8D	; 141
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	80 e9       	ldi	r24, 0x90	; 144
    4e84:	91 e0       	ldi	r25, 0x01	; 1
    4e86:	91 83       	std	Z+1, r25	; 0x01
    4e88:	80 83       	st	Z, r24
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	ed 58       	subi	r30, 0x8D	; 141
    4e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e90:	80 81       	ld	r24, Z
    4e92:	91 81       	ldd	r25, Z+1	; 0x01
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	f1 f7       	brne	.-4      	; 0x4e94 <SevenSegment_From0To9+0x2a8>
    4e98:	fe 01       	movw	r30, r28
    4e9a:	ed 58       	subi	r30, 0x8D	; 141
    4e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ea2:	de 01       	movw	r26, r28
    4ea4:	ab 58       	subi	r26, 0x8B	; 139
    4ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	eb 58       	subi	r30, 0x8B	; 139
    4eac:	ff 4f       	sbci	r31, 0xFF	; 255
    4eae:	80 81       	ld	r24, Z
    4eb0:	91 81       	ldd	r25, Z+1	; 0x01
    4eb2:	01 97       	sbiw	r24, 0x01	; 1
    4eb4:	11 96       	adiw	r26, 0x01	; 1
    4eb6:	9c 93       	st	X, r25
    4eb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eba:	fe 01       	movw	r30, r28
    4ebc:	eb 58       	subi	r30, 0x8B	; 139
    4ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec0:	80 81       	ld	r24, Z
    4ec2:	91 81       	ldd	r25, Z+1	; 0x01
    4ec4:	00 97       	sbiw	r24, 0x00	; 0
    4ec6:	d1 f6       	brne	.-76     	; 0x4e7c <SevenSegment_From0To9+0x290>
    4ec8:	27 c0       	rjmp	.+78     	; 0x4f18 <SevenSegment_From0To9+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eca:	8e 01       	movw	r16, r28
    4ecc:	0b 58       	subi	r16, 0x8B	; 139
    4ece:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	e9 58       	subi	r30, 0x89	; 137
    4ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed6:	60 81       	ld	r22, Z
    4ed8:	71 81       	ldd	r23, Z+1	; 0x01
    4eda:	82 81       	ldd	r24, Z+2	; 0x02
    4edc:	93 81       	ldd	r25, Z+3	; 0x03
    4ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	f8 01       	movw	r30, r16
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	80 83       	st	Z, r24
    4eec:	de 01       	movw	r26, r28
    4eee:	af 58       	subi	r26, 0x8F	; 143
    4ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	eb 58       	subi	r30, 0x8B	; 139
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	91 81       	ldd	r25, Z+1	; 0x01
    4efc:	8d 93       	st	X+, r24
    4efe:	9c 93       	st	X, r25
    4f00:	fe 01       	movw	r30, r28
    4f02:	ef 58       	subi	r30, 0x8F	; 143
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 81       	ld	r24, Z
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	f1 f7       	brne	.-4      	; 0x4f0a <SevenSegment_From0To9+0x31e>
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ef 58       	subi	r30, 0x8F	; 143
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 0, 1, 1, 0, 1); // 2
    4f18:	fe 01       	movw	r30, r28
    4f1a:	e3 57       	subi	r30, 0x73	; 115
    4f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1e:	80 81       	ld	r24, Z
    4f20:	61 e0       	ldi	r22, 0x01	; 1
    4f22:	41 e0       	ldi	r20, 0x01	; 1
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	01 e0       	ldi	r16, 0x01	; 1
    4f28:	ee 24       	eor	r14, r14
    4f2a:	e3 94       	inc	r14
    4f2c:	cc 24       	eor	r12, r12
    4f2e:	aa 24       	eor	r10, r10
    4f30:	a3 94       	inc	r10
    4f32:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    4f36:	fe 01       	movw	r30, r28
    4f38:	e3 59       	subi	r30, 0x93	; 147
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	80 e0       	ldi	r24, 0x00	; 0
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	a8 e4       	ldi	r26, 0x48	; 72
    4f42:	b2 e4       	ldi	r27, 0x42	; 66
    4f44:	80 83       	st	Z, r24
    4f46:	91 83       	std	Z+1, r25	; 0x01
    4f48:	a2 83       	std	Z+2, r26	; 0x02
    4f4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f4c:	8e 01       	movw	r16, r28
    4f4e:	07 59       	subi	r16, 0x97	; 151
    4f50:	1f 4f       	sbci	r17, 0xFF	; 255
    4f52:	fe 01       	movw	r30, r28
    4f54:	e3 59       	subi	r30, 0x93	; 147
    4f56:	ff 4f       	sbci	r31, 0xFF	; 255
    4f58:	60 81       	ld	r22, Z
    4f5a:	71 81       	ldd	r23, Z+1	; 0x01
    4f5c:	82 81       	ldd	r24, Z+2	; 0x02
    4f5e:	93 81       	ldd	r25, Z+3	; 0x03
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	4a e7       	ldi	r20, 0x7A	; 122
    4f66:	55 e4       	ldi	r21, 0x45	; 69
    4f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	f8 01       	movw	r30, r16
    4f72:	80 83       	st	Z, r24
    4f74:	91 83       	std	Z+1, r25	; 0x01
    4f76:	a2 83       	std	Z+2, r26	; 0x02
    4f78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	e7 59       	subi	r30, 0x97	; 151
    4f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f80:	60 81       	ld	r22, Z
    4f82:	71 81       	ldd	r23, Z+1	; 0x01
    4f84:	82 81       	ldd	r24, Z+2	; 0x02
    4f86:	93 81       	ldd	r25, Z+3	; 0x03
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	40 e8       	ldi	r20, 0x80	; 128
    4f8e:	5f e3       	ldi	r21, 0x3F	; 63
    4f90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f94:	88 23       	and	r24, r24
    4f96:	44 f4       	brge	.+16     	; 0x4fa8 <SevenSegment_From0To9+0x3bc>
		__ticks = 1;
    4f98:	fe 01       	movw	r30, r28
    4f9a:	e9 59       	subi	r30, 0x99	; 153
    4f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	91 83       	std	Z+1, r25	; 0x01
    4fa4:	80 83       	st	Z, r24
    4fa6:	64 c0       	rjmp	.+200    	; 0x5070 <SevenSegment_From0To9+0x484>
	else if (__tmp > 65535)
    4fa8:	fe 01       	movw	r30, r28
    4faa:	e7 59       	subi	r30, 0x97	; 151
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	60 81       	ld	r22, Z
    4fb0:	71 81       	ldd	r23, Z+1	; 0x01
    4fb2:	82 81       	ldd	r24, Z+2	; 0x02
    4fb4:	93 81       	ldd	r25, Z+3	; 0x03
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	3f ef       	ldi	r19, 0xFF	; 255
    4fba:	4f e7       	ldi	r20, 0x7F	; 127
    4fbc:	57 e4       	ldi	r21, 0x47	; 71
    4fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fc2:	18 16       	cp	r1, r24
    4fc4:	0c f0       	brlt	.+2      	; 0x4fc8 <SevenSegment_From0To9+0x3dc>
    4fc6:	43 c0       	rjmp	.+134    	; 0x504e <SevenSegment_From0To9+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc8:	fe 01       	movw	r30, r28
    4fca:	e3 59       	subi	r30, 0x93	; 147
    4fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fce:	60 81       	ld	r22, Z
    4fd0:	71 81       	ldd	r23, Z+1	; 0x01
    4fd2:	82 81       	ldd	r24, Z+2	; 0x02
    4fd4:	93 81       	ldd	r25, Z+3	; 0x03
    4fd6:	20 e0       	ldi	r18, 0x00	; 0
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	40 e2       	ldi	r20, 0x20	; 32
    4fdc:	51 e4       	ldi	r21, 0x41	; 65
    4fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	cb 01       	movw	r24, r22
    4fe6:	8e 01       	movw	r16, r28
    4fe8:	09 59       	subi	r16, 0x99	; 153
    4fea:	1f 4f       	sbci	r17, 0xFF	; 255
    4fec:	bc 01       	movw	r22, r24
    4fee:	cd 01       	movw	r24, r26
    4ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff4:	dc 01       	movw	r26, r24
    4ff6:	cb 01       	movw	r24, r22
    4ff8:	f8 01       	movw	r30, r16
    4ffa:	91 83       	std	Z+1, r25	; 0x01
    4ffc:	80 83       	st	Z, r24
    4ffe:	1f c0       	rjmp	.+62     	; 0x503e <SevenSegment_From0To9+0x452>
    5000:	fe 01       	movw	r30, r28
    5002:	eb 59       	subi	r30, 0x9B	; 155
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	80 e9       	ldi	r24, 0x90	; 144
    5008:	91 e0       	ldi	r25, 0x01	; 1
    500a:	91 83       	std	Z+1, r25	; 0x01
    500c:	80 83       	st	Z, r24
    500e:	fe 01       	movw	r30, r28
    5010:	eb 59       	subi	r30, 0x9B	; 155
    5012:	ff 4f       	sbci	r31, 0xFF	; 255
    5014:	80 81       	ld	r24, Z
    5016:	91 81       	ldd	r25, Z+1	; 0x01
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	f1 f7       	brne	.-4      	; 0x5018 <SevenSegment_From0To9+0x42c>
    501c:	fe 01       	movw	r30, r28
    501e:	eb 59       	subi	r30, 0x9B	; 155
    5020:	ff 4f       	sbci	r31, 0xFF	; 255
    5022:	91 83       	std	Z+1, r25	; 0x01
    5024:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5026:	de 01       	movw	r26, r28
    5028:	a9 59       	subi	r26, 0x99	; 153
    502a:	bf 4f       	sbci	r27, 0xFF	; 255
    502c:	fe 01       	movw	r30, r28
    502e:	e9 59       	subi	r30, 0x99	; 153
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	11 96       	adiw	r26, 0x01	; 1
    503a:	9c 93       	st	X, r25
    503c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    503e:	fe 01       	movw	r30, r28
    5040:	e9 59       	subi	r30, 0x99	; 153
    5042:	ff 4f       	sbci	r31, 0xFF	; 255
    5044:	80 81       	ld	r24, Z
    5046:	91 81       	ldd	r25, Z+1	; 0x01
    5048:	00 97       	sbiw	r24, 0x00	; 0
    504a:	d1 f6       	brne	.-76     	; 0x5000 <SevenSegment_From0To9+0x414>
    504c:	27 c0       	rjmp	.+78     	; 0x509c <SevenSegment_From0To9+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    504e:	8e 01       	movw	r16, r28
    5050:	09 59       	subi	r16, 0x99	; 153
    5052:	1f 4f       	sbci	r17, 0xFF	; 255
    5054:	fe 01       	movw	r30, r28
    5056:	e7 59       	subi	r30, 0x97	; 151
    5058:	ff 4f       	sbci	r31, 0xFF	; 255
    505a:	60 81       	ld	r22, Z
    505c:	71 81       	ldd	r23, Z+1	; 0x01
    505e:	82 81       	ldd	r24, Z+2	; 0x02
    5060:	93 81       	ldd	r25, Z+3	; 0x03
    5062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	f8 01       	movw	r30, r16
    506c:	91 83       	std	Z+1, r25	; 0x01
    506e:	80 83       	st	Z, r24
    5070:	de 01       	movw	r26, r28
    5072:	ad 59       	subi	r26, 0x9D	; 157
    5074:	bf 4f       	sbci	r27, 0xFF	; 255
    5076:	fe 01       	movw	r30, r28
    5078:	e9 59       	subi	r30, 0x99	; 153
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	8d 93       	st	X+, r24
    5082:	9c 93       	st	X, r25
    5084:	fe 01       	movw	r30, r28
    5086:	ed 59       	subi	r30, 0x9D	; 157
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	80 81       	ld	r24, Z
    508c:	91 81       	ldd	r25, Z+1	; 0x01
    508e:	01 97       	sbiw	r24, 0x01	; 1
    5090:	f1 f7       	brne	.-4      	; 0x508e <SevenSegment_From0To9+0x4a2>
    5092:	fe 01       	movw	r30, r28
    5094:	ed 59       	subi	r30, 0x9D	; 157
    5096:	ff 4f       	sbci	r31, 0xFF	; 255
    5098:	91 83       	std	Z+1, r25	; 0x01
    509a:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 0, 1); // 3
    509c:	fe 01       	movw	r30, r28
    509e:	e3 57       	subi	r30, 0x73	; 115
    50a0:	ff 4f       	sbci	r31, 0xFF	; 255
    50a2:	80 81       	ld	r24, Z
    50a4:	61 e0       	ldi	r22, 0x01	; 1
    50a6:	41 e0       	ldi	r20, 0x01	; 1
    50a8:	21 e0       	ldi	r18, 0x01	; 1
    50aa:	01 e0       	ldi	r16, 0x01	; 1
    50ac:	ee 24       	eor	r14, r14
    50ae:	cc 24       	eor	r12, r12
    50b0:	aa 24       	eor	r10, r10
    50b2:	a3 94       	inc	r10
    50b4:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    50b8:	fe 01       	movw	r30, r28
    50ba:	e1 5a       	subi	r30, 0xA1	; 161
    50bc:	ff 4f       	sbci	r31, 0xFF	; 255
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	a8 e4       	ldi	r26, 0x48	; 72
    50c4:	b2 e4       	ldi	r27, 0x42	; 66
    50c6:	80 83       	st	Z, r24
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	a2 83       	std	Z+2, r26	; 0x02
    50cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ce:	8e 01       	movw	r16, r28
    50d0:	05 5a       	subi	r16, 0xA5	; 165
    50d2:	1f 4f       	sbci	r17, 0xFF	; 255
    50d4:	fe 01       	movw	r30, r28
    50d6:	e1 5a       	subi	r30, 0xA1	; 161
    50d8:	ff 4f       	sbci	r31, 0xFF	; 255
    50da:	60 81       	ld	r22, Z
    50dc:	71 81       	ldd	r23, Z+1	; 0x01
    50de:	82 81       	ldd	r24, Z+2	; 0x02
    50e0:	93 81       	ldd	r25, Z+3	; 0x03
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	4a e7       	ldi	r20, 0x7A	; 122
    50e8:	55 e4       	ldi	r21, 0x45	; 69
    50ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	f8 01       	movw	r30, r16
    50f4:	80 83       	st	Z, r24
    50f6:	91 83       	std	Z+1, r25	; 0x01
    50f8:	a2 83       	std	Z+2, r26	; 0x02
    50fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50fc:	fe 01       	movw	r30, r28
    50fe:	e5 5a       	subi	r30, 0xA5	; 165
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	60 81       	ld	r22, Z
    5104:	71 81       	ldd	r23, Z+1	; 0x01
    5106:	82 81       	ldd	r24, Z+2	; 0x02
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e8       	ldi	r20, 0x80	; 128
    5110:	5f e3       	ldi	r21, 0x3F	; 63
    5112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5116:	88 23       	and	r24, r24
    5118:	44 f4       	brge	.+16     	; 0x512a <SevenSegment_From0To9+0x53e>
		__ticks = 1;
    511a:	fe 01       	movw	r30, r28
    511c:	e7 5a       	subi	r30, 0xA7	; 167
    511e:	ff 4f       	sbci	r31, 0xFF	; 255
    5120:	81 e0       	ldi	r24, 0x01	; 1
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	91 83       	std	Z+1, r25	; 0x01
    5126:	80 83       	st	Z, r24
    5128:	64 c0       	rjmp	.+200    	; 0x51f2 <SevenSegment_From0To9+0x606>
	else if (__tmp > 65535)
    512a:	fe 01       	movw	r30, r28
    512c:	e5 5a       	subi	r30, 0xA5	; 165
    512e:	ff 4f       	sbci	r31, 0xFF	; 255
    5130:	60 81       	ld	r22, Z
    5132:	71 81       	ldd	r23, Z+1	; 0x01
    5134:	82 81       	ldd	r24, Z+2	; 0x02
    5136:	93 81       	ldd	r25, Z+3	; 0x03
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	3f ef       	ldi	r19, 0xFF	; 255
    513c:	4f e7       	ldi	r20, 0x7F	; 127
    513e:	57 e4       	ldi	r21, 0x47	; 71
    5140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5144:	18 16       	cp	r1, r24
    5146:	0c f0       	brlt	.+2      	; 0x514a <SevenSegment_From0To9+0x55e>
    5148:	43 c0       	rjmp	.+134    	; 0x51d0 <SevenSegment_From0To9+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    514a:	fe 01       	movw	r30, r28
    514c:	e1 5a       	subi	r30, 0xA1	; 161
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	60 81       	ld	r22, Z
    5152:	71 81       	ldd	r23, Z+1	; 0x01
    5154:	82 81       	ldd	r24, Z+2	; 0x02
    5156:	93 81       	ldd	r25, Z+3	; 0x03
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	40 e2       	ldi	r20, 0x20	; 32
    515e:	51 e4       	ldi	r21, 0x41	; 65
    5160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5164:	dc 01       	movw	r26, r24
    5166:	cb 01       	movw	r24, r22
    5168:	8e 01       	movw	r16, r28
    516a:	07 5a       	subi	r16, 0xA7	; 167
    516c:	1f 4f       	sbci	r17, 0xFF	; 255
    516e:	bc 01       	movw	r22, r24
    5170:	cd 01       	movw	r24, r26
    5172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5176:	dc 01       	movw	r26, r24
    5178:	cb 01       	movw	r24, r22
    517a:	f8 01       	movw	r30, r16
    517c:	91 83       	std	Z+1, r25	; 0x01
    517e:	80 83       	st	Z, r24
    5180:	1f c0       	rjmp	.+62     	; 0x51c0 <SevenSegment_From0To9+0x5d4>
    5182:	fe 01       	movw	r30, r28
    5184:	e9 5a       	subi	r30, 0xA9	; 169
    5186:	ff 4f       	sbci	r31, 0xFF	; 255
    5188:	80 e9       	ldi	r24, 0x90	; 144
    518a:	91 e0       	ldi	r25, 0x01	; 1
    518c:	91 83       	std	Z+1, r25	; 0x01
    518e:	80 83       	st	Z, r24
    5190:	fe 01       	movw	r30, r28
    5192:	e9 5a       	subi	r30, 0xA9	; 169
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	80 81       	ld	r24, Z
    5198:	91 81       	ldd	r25, Z+1	; 0x01
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <SevenSegment_From0To9+0x5ae>
    519e:	fe 01       	movw	r30, r28
    51a0:	e9 5a       	subi	r30, 0xA9	; 169
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	91 83       	std	Z+1, r25	; 0x01
    51a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a8:	de 01       	movw	r26, r28
    51aa:	a7 5a       	subi	r26, 0xA7	; 167
    51ac:	bf 4f       	sbci	r27, 0xFF	; 255
    51ae:	fe 01       	movw	r30, r28
    51b0:	e7 5a       	subi	r30, 0xA7	; 167
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	80 81       	ld	r24, Z
    51b6:	91 81       	ldd	r25, Z+1	; 0x01
    51b8:	01 97       	sbiw	r24, 0x01	; 1
    51ba:	11 96       	adiw	r26, 0x01	; 1
    51bc:	9c 93       	st	X, r25
    51be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c0:	fe 01       	movw	r30, r28
    51c2:	e7 5a       	subi	r30, 0xA7	; 167
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	80 81       	ld	r24, Z
    51c8:	91 81       	ldd	r25, Z+1	; 0x01
    51ca:	00 97       	sbiw	r24, 0x00	; 0
    51cc:	d1 f6       	brne	.-76     	; 0x5182 <SevenSegment_From0To9+0x596>
    51ce:	27 c0       	rjmp	.+78     	; 0x521e <SevenSegment_From0To9+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d0:	8e 01       	movw	r16, r28
    51d2:	07 5a       	subi	r16, 0xA7	; 167
    51d4:	1f 4f       	sbci	r17, 0xFF	; 255
    51d6:	fe 01       	movw	r30, r28
    51d8:	e5 5a       	subi	r30, 0xA5	; 165
    51da:	ff 4f       	sbci	r31, 0xFF	; 255
    51dc:	60 81       	ld	r22, Z
    51de:	71 81       	ldd	r23, Z+1	; 0x01
    51e0:	82 81       	ldd	r24, Z+2	; 0x02
    51e2:	93 81       	ldd	r25, Z+3	; 0x03
    51e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	f8 01       	movw	r30, r16
    51ee:	91 83       	std	Z+1, r25	; 0x01
    51f0:	80 83       	st	Z, r24
    51f2:	de 01       	movw	r26, r28
    51f4:	ab 5a       	subi	r26, 0xAB	; 171
    51f6:	bf 4f       	sbci	r27, 0xFF	; 255
    51f8:	fe 01       	movw	r30, r28
    51fa:	e7 5a       	subi	r30, 0xA7	; 167
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	80 81       	ld	r24, Z
    5200:	91 81       	ldd	r25, Z+1	; 0x01
    5202:	8d 93       	st	X+, r24
    5204:	9c 93       	st	X, r25
    5206:	fe 01       	movw	r30, r28
    5208:	eb 5a       	subi	r30, 0xAB	; 171
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	80 81       	ld	r24, Z
    520e:	91 81       	ldd	r25, Z+1	; 0x01
    5210:	01 97       	sbiw	r24, 0x01	; 1
    5212:	f1 f7       	brne	.-4      	; 0x5210 <SevenSegment_From0To9+0x624>
    5214:	fe 01       	movw	r30, r28
    5216:	eb 5a       	subi	r30, 0xAB	; 171
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	91 83       	std	Z+1, r25	; 0x01
    521c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 1, 1); // 4
    521e:	fe 01       	movw	r30, r28
    5220:	e3 57       	subi	r30, 0x73	; 115
    5222:	ff 4f       	sbci	r31, 0xFF	; 255
    5224:	80 81       	ld	r24, Z
    5226:	60 e0       	ldi	r22, 0x00	; 0
    5228:	41 e0       	ldi	r20, 0x01	; 1
    522a:	21 e0       	ldi	r18, 0x01	; 1
    522c:	00 e0       	ldi	r16, 0x00	; 0
    522e:	ee 24       	eor	r14, r14
    5230:	cc 24       	eor	r12, r12
    5232:	c3 94       	inc	r12
    5234:	aa 24       	eor	r10, r10
    5236:	a3 94       	inc	r10
    5238:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    523c:	fe 01       	movw	r30, r28
    523e:	ef 5a       	subi	r30, 0xAF	; 175
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	a8 e4       	ldi	r26, 0x48	; 72
    5248:	b2 e4       	ldi	r27, 0x42	; 66
    524a:	80 83       	st	Z, r24
    524c:	91 83       	std	Z+1, r25	; 0x01
    524e:	a2 83       	std	Z+2, r26	; 0x02
    5250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5252:	8e 01       	movw	r16, r28
    5254:	03 5b       	subi	r16, 0xB3	; 179
    5256:	1f 4f       	sbci	r17, 0xFF	; 255
    5258:	fe 01       	movw	r30, r28
    525a:	ef 5a       	subi	r30, 0xAF	; 175
    525c:	ff 4f       	sbci	r31, 0xFF	; 255
    525e:	60 81       	ld	r22, Z
    5260:	71 81       	ldd	r23, Z+1	; 0x01
    5262:	82 81       	ldd	r24, Z+2	; 0x02
    5264:	93 81       	ldd	r25, Z+3	; 0x03
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	4a e7       	ldi	r20, 0x7A	; 122
    526c:	55 e4       	ldi	r21, 0x45	; 69
    526e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5272:	dc 01       	movw	r26, r24
    5274:	cb 01       	movw	r24, r22
    5276:	f8 01       	movw	r30, r16
    5278:	80 83       	st	Z, r24
    527a:	91 83       	std	Z+1, r25	; 0x01
    527c:	a2 83       	std	Z+2, r26	; 0x02
    527e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5280:	fe 01       	movw	r30, r28
    5282:	e3 5b       	subi	r30, 0xB3	; 179
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	60 81       	ld	r22, Z
    5288:	71 81       	ldd	r23, Z+1	; 0x01
    528a:	82 81       	ldd	r24, Z+2	; 0x02
    528c:	93 81       	ldd	r25, Z+3	; 0x03
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	40 e8       	ldi	r20, 0x80	; 128
    5294:	5f e3       	ldi	r21, 0x3F	; 63
    5296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    529a:	88 23       	and	r24, r24
    529c:	44 f4       	brge	.+16     	; 0x52ae <SevenSegment_From0To9+0x6c2>
		__ticks = 1;
    529e:	fe 01       	movw	r30, r28
    52a0:	e5 5b       	subi	r30, 0xB5	; 181
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
    52ac:	64 c0       	rjmp	.+200    	; 0x5376 <SevenSegment_From0To9+0x78a>
	else if (__tmp > 65535)
    52ae:	fe 01       	movw	r30, r28
    52b0:	e3 5b       	subi	r30, 0xB3	; 179
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	60 81       	ld	r22, Z
    52b6:	71 81       	ldd	r23, Z+1	; 0x01
    52b8:	82 81       	ldd	r24, Z+2	; 0x02
    52ba:	93 81       	ldd	r25, Z+3	; 0x03
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	3f ef       	ldi	r19, 0xFF	; 255
    52c0:	4f e7       	ldi	r20, 0x7F	; 127
    52c2:	57 e4       	ldi	r21, 0x47	; 71
    52c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52c8:	18 16       	cp	r1, r24
    52ca:	0c f0       	brlt	.+2      	; 0x52ce <SevenSegment_From0To9+0x6e2>
    52cc:	43 c0       	rjmp	.+134    	; 0x5354 <SevenSegment_From0To9+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ce:	fe 01       	movw	r30, r28
    52d0:	ef 5a       	subi	r30, 0xAF	; 175
    52d2:	ff 4f       	sbci	r31, 0xFF	; 255
    52d4:	60 81       	ld	r22, Z
    52d6:	71 81       	ldd	r23, Z+1	; 0x01
    52d8:	82 81       	ldd	r24, Z+2	; 0x02
    52da:	93 81       	ldd	r25, Z+3	; 0x03
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	30 e0       	ldi	r19, 0x00	; 0
    52e0:	40 e2       	ldi	r20, 0x20	; 32
    52e2:	51 e4       	ldi	r21, 0x41	; 65
    52e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	8e 01       	movw	r16, r28
    52ee:	05 5b       	subi	r16, 0xB5	; 181
    52f0:	1f 4f       	sbci	r17, 0xFF	; 255
    52f2:	bc 01       	movw	r22, r24
    52f4:	cd 01       	movw	r24, r26
    52f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	f8 01       	movw	r30, r16
    5300:	91 83       	std	Z+1, r25	; 0x01
    5302:	80 83       	st	Z, r24
    5304:	1f c0       	rjmp	.+62     	; 0x5344 <SevenSegment_From0To9+0x758>
    5306:	fe 01       	movw	r30, r28
    5308:	e7 5b       	subi	r30, 0xB7	; 183
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	80 e9       	ldi	r24, 0x90	; 144
    530e:	91 e0       	ldi	r25, 0x01	; 1
    5310:	91 83       	std	Z+1, r25	; 0x01
    5312:	80 83       	st	Z, r24
    5314:	fe 01       	movw	r30, r28
    5316:	e7 5b       	subi	r30, 0xB7	; 183
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 81       	ld	r24, Z
    531c:	91 81       	ldd	r25, Z+1	; 0x01
    531e:	01 97       	sbiw	r24, 0x01	; 1
    5320:	f1 f7       	brne	.-4      	; 0x531e <SevenSegment_From0To9+0x732>
    5322:	fe 01       	movw	r30, r28
    5324:	e7 5b       	subi	r30, 0xB7	; 183
    5326:	ff 4f       	sbci	r31, 0xFF	; 255
    5328:	91 83       	std	Z+1, r25	; 0x01
    532a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532c:	de 01       	movw	r26, r28
    532e:	a5 5b       	subi	r26, 0xB5	; 181
    5330:	bf 4f       	sbci	r27, 0xFF	; 255
    5332:	fe 01       	movw	r30, r28
    5334:	e5 5b       	subi	r30, 0xB5	; 181
    5336:	ff 4f       	sbci	r31, 0xFF	; 255
    5338:	80 81       	ld	r24, Z
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	01 97       	sbiw	r24, 0x01	; 1
    533e:	11 96       	adiw	r26, 0x01	; 1
    5340:	9c 93       	st	X, r25
    5342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5344:	fe 01       	movw	r30, r28
    5346:	e5 5b       	subi	r30, 0xB5	; 181
    5348:	ff 4f       	sbci	r31, 0xFF	; 255
    534a:	80 81       	ld	r24, Z
    534c:	91 81       	ldd	r25, Z+1	; 0x01
    534e:	00 97       	sbiw	r24, 0x00	; 0
    5350:	d1 f6       	brne	.-76     	; 0x5306 <SevenSegment_From0To9+0x71a>
    5352:	27 c0       	rjmp	.+78     	; 0x53a2 <SevenSegment_From0To9+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5354:	8e 01       	movw	r16, r28
    5356:	05 5b       	subi	r16, 0xB5	; 181
    5358:	1f 4f       	sbci	r17, 0xFF	; 255
    535a:	fe 01       	movw	r30, r28
    535c:	e3 5b       	subi	r30, 0xB3	; 179
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	60 81       	ld	r22, Z
    5362:	71 81       	ldd	r23, Z+1	; 0x01
    5364:	82 81       	ldd	r24, Z+2	; 0x02
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    536c:	dc 01       	movw	r26, r24
    536e:	cb 01       	movw	r24, r22
    5370:	f8 01       	movw	r30, r16
    5372:	91 83       	std	Z+1, r25	; 0x01
    5374:	80 83       	st	Z, r24
    5376:	de 01       	movw	r26, r28
    5378:	a9 5b       	subi	r26, 0xB9	; 185
    537a:	bf 4f       	sbci	r27, 0xFF	; 255
    537c:	fe 01       	movw	r30, r28
    537e:	e5 5b       	subi	r30, 0xB5	; 181
    5380:	ff 4f       	sbci	r31, 0xFF	; 255
    5382:	80 81       	ld	r24, Z
    5384:	91 81       	ldd	r25, Z+1	; 0x01
    5386:	8d 93       	st	X+, r24
    5388:	9c 93       	st	X, r25
    538a:	fe 01       	movw	r30, r28
    538c:	e9 5b       	subi	r30, 0xB9	; 185
    538e:	ff 4f       	sbci	r31, 0xFF	; 255
    5390:	80 81       	ld	r24, Z
    5392:	91 81       	ldd	r25, Z+1	; 0x01
    5394:	01 97       	sbiw	r24, 0x01	; 1
    5396:	f1 f7       	brne	.-4      	; 0x5394 <SevenSegment_From0To9+0x7a8>
    5398:	fe 01       	movw	r30, r28
    539a:	e9 5b       	subi	r30, 0xB9	; 185
    539c:	ff 4f       	sbci	r31, 0xFF	; 255
    539e:	91 83       	std	Z+1, r25	; 0x01
    53a0:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 0, 1, 1); // 5
    53a2:	fe 01       	movw	r30, r28
    53a4:	e3 57       	subi	r30, 0x73	; 115
    53a6:	ff 4f       	sbci	r31, 0xFF	; 255
    53a8:	80 81       	ld	r24, Z
    53aa:	61 e0       	ldi	r22, 0x01	; 1
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	21 e0       	ldi	r18, 0x01	; 1
    53b0:	01 e0       	ldi	r16, 0x01	; 1
    53b2:	ee 24       	eor	r14, r14
    53b4:	cc 24       	eor	r12, r12
    53b6:	c3 94       	inc	r12
    53b8:	aa 24       	eor	r10, r10
    53ba:	a3 94       	inc	r10
    53bc:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    53c0:	fe 01       	movw	r30, r28
    53c2:	ed 5b       	subi	r30, 0xBD	; 189
    53c4:	ff 4f       	sbci	r31, 0xFF	; 255
    53c6:	80 e0       	ldi	r24, 0x00	; 0
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	a8 e4       	ldi	r26, 0x48	; 72
    53cc:	b2 e4       	ldi	r27, 0x42	; 66
    53ce:	80 83       	st	Z, r24
    53d0:	91 83       	std	Z+1, r25	; 0x01
    53d2:	a2 83       	std	Z+2, r26	; 0x02
    53d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53d6:	8e 01       	movw	r16, r28
    53d8:	01 5c       	subi	r16, 0xC1	; 193
    53da:	1f 4f       	sbci	r17, 0xFF	; 255
    53dc:	fe 01       	movw	r30, r28
    53de:	ed 5b       	subi	r30, 0xBD	; 189
    53e0:	ff 4f       	sbci	r31, 0xFF	; 255
    53e2:	60 81       	ld	r22, Z
    53e4:	71 81       	ldd	r23, Z+1	; 0x01
    53e6:	82 81       	ldd	r24, Z+2	; 0x02
    53e8:	93 81       	ldd	r25, Z+3	; 0x03
    53ea:	20 e0       	ldi	r18, 0x00	; 0
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	4a e7       	ldi	r20, 0x7A	; 122
    53f0:	55 e4       	ldi	r21, 0x45	; 69
    53f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	f8 01       	movw	r30, r16
    53fc:	80 83       	st	Z, r24
    53fe:	91 83       	std	Z+1, r25	; 0x01
    5400:	a2 83       	std	Z+2, r26	; 0x02
    5402:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5404:	fe 01       	movw	r30, r28
    5406:	ff 96       	adiw	r30, 0x3f	; 63
    5408:	60 81       	ld	r22, Z
    540a:	71 81       	ldd	r23, Z+1	; 0x01
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	40 e8       	ldi	r20, 0x80	; 128
    5416:	5f e3       	ldi	r21, 0x3F	; 63
    5418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    541c:	88 23       	and	r24, r24
    541e:	2c f4       	brge	.+10     	; 0x542a <SevenSegment_From0To9+0x83e>
		__ticks = 1;
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	9e af       	std	Y+62, r25	; 0x3e
    5426:	8d af       	std	Y+61, r24	; 0x3d
    5428:	46 c0       	rjmp	.+140    	; 0x54b6 <SevenSegment_From0To9+0x8ca>
	else if (__tmp > 65535)
    542a:	fe 01       	movw	r30, r28
    542c:	ff 96       	adiw	r30, 0x3f	; 63
    542e:	60 81       	ld	r22, Z
    5430:	71 81       	ldd	r23, Z+1	; 0x01
    5432:	82 81       	ldd	r24, Z+2	; 0x02
    5434:	93 81       	ldd	r25, Z+3	; 0x03
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	3f ef       	ldi	r19, 0xFF	; 255
    543a:	4f e7       	ldi	r20, 0x7F	; 127
    543c:	57 e4       	ldi	r21, 0x47	; 71
    543e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5442:	18 16       	cp	r1, r24
    5444:	64 f5       	brge	.+88     	; 0x549e <SevenSegment_From0To9+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5446:	fe 01       	movw	r30, r28
    5448:	ed 5b       	subi	r30, 0xBD	; 189
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	60 81       	ld	r22, Z
    544e:	71 81       	ldd	r23, Z+1	; 0x01
    5450:	82 81       	ldd	r24, Z+2	; 0x02
    5452:	93 81       	ldd	r25, Z+3	; 0x03
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	40 e2       	ldi	r20, 0x20	; 32
    545a:	51 e4       	ldi	r21, 0x41	; 65
    545c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5460:	dc 01       	movw	r26, r24
    5462:	cb 01       	movw	r24, r22
    5464:	bc 01       	movw	r22, r24
    5466:	cd 01       	movw	r24, r26
    5468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    546c:	dc 01       	movw	r26, r24
    546e:	cb 01       	movw	r24, r22
    5470:	9e af       	std	Y+62, r25	; 0x3e
    5472:	8d af       	std	Y+61, r24	; 0x3d
    5474:	0f c0       	rjmp	.+30     	; 0x5494 <SevenSegment_From0To9+0x8a8>
    5476:	80 e9       	ldi	r24, 0x90	; 144
    5478:	91 e0       	ldi	r25, 0x01	; 1
    547a:	9c af       	std	Y+60, r25	; 0x3c
    547c:	8b af       	std	Y+59, r24	; 0x3b
    547e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5480:	9c ad       	ldd	r25, Y+60	; 0x3c
    5482:	01 97       	sbiw	r24, 0x01	; 1
    5484:	f1 f7       	brne	.-4      	; 0x5482 <SevenSegment_From0To9+0x896>
    5486:	9c af       	std	Y+60, r25	; 0x3c
    5488:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    548a:	8d ad       	ldd	r24, Y+61	; 0x3d
    548c:	9e ad       	ldd	r25, Y+62	; 0x3e
    548e:	01 97       	sbiw	r24, 0x01	; 1
    5490:	9e af       	std	Y+62, r25	; 0x3e
    5492:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5494:	8d ad       	ldd	r24, Y+61	; 0x3d
    5496:	9e ad       	ldd	r25, Y+62	; 0x3e
    5498:	00 97       	sbiw	r24, 0x00	; 0
    549a:	69 f7       	brne	.-38     	; 0x5476 <SevenSegment_From0To9+0x88a>
    549c:	16 c0       	rjmp	.+44     	; 0x54ca <SevenSegment_From0To9+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    549e:	fe 01       	movw	r30, r28
    54a0:	ff 96       	adiw	r30, 0x3f	; 63
    54a2:	60 81       	ld	r22, Z
    54a4:	71 81       	ldd	r23, Z+1	; 0x01
    54a6:	82 81       	ldd	r24, Z+2	; 0x02
    54a8:	93 81       	ldd	r25, Z+3	; 0x03
    54aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	9e af       	std	Y+62, r25	; 0x3e
    54b4:	8d af       	std	Y+61, r24	; 0x3d
    54b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    54b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    54ba:	9a af       	std	Y+58, r25	; 0x3a
    54bc:	89 af       	std	Y+57, r24	; 0x39
    54be:	89 ad       	ldd	r24, Y+57	; 0x39
    54c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    54c2:	01 97       	sbiw	r24, 0x01	; 1
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <SevenSegment_From0To9+0x8d6>
    54c6:	9a af       	std	Y+58, r25	; 0x3a
    54c8:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 1); // 6
    54ca:	fe 01       	movw	r30, r28
    54cc:	e3 57       	subi	r30, 0x73	; 115
    54ce:	ff 4f       	sbci	r31, 0xFF	; 255
    54d0:	80 81       	ld	r24, Z
    54d2:	61 e0       	ldi	r22, 0x01	; 1
    54d4:	40 e0       	ldi	r20, 0x00	; 0
    54d6:	21 e0       	ldi	r18, 0x01	; 1
    54d8:	01 e0       	ldi	r16, 0x01	; 1
    54da:	ee 24       	eor	r14, r14
    54dc:	e3 94       	inc	r14
    54de:	cc 24       	eor	r12, r12
    54e0:	c3 94       	inc	r12
    54e2:	aa 24       	eor	r10, r10
    54e4:	a3 94       	inc	r10
    54e6:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	a8 e4       	ldi	r26, 0x48	; 72
    54f0:	b2 e4       	ldi	r27, 0x42	; 66
    54f2:	8d ab       	std	Y+53, r24	; 0x35
    54f4:	9e ab       	std	Y+54, r25	; 0x36
    54f6:	af ab       	std	Y+55, r26	; 0x37
    54f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54fa:	6d a9       	ldd	r22, Y+53	; 0x35
    54fc:	7e a9       	ldd	r23, Y+54	; 0x36
    54fe:	8f a9       	ldd	r24, Y+55	; 0x37
    5500:	98 ad       	ldd	r25, Y+56	; 0x38
    5502:	20 e0       	ldi	r18, 0x00	; 0
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	4a e7       	ldi	r20, 0x7A	; 122
    5508:	55 e4       	ldi	r21, 0x45	; 69
    550a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    550e:	dc 01       	movw	r26, r24
    5510:	cb 01       	movw	r24, r22
    5512:	89 ab       	std	Y+49, r24	; 0x31
    5514:	9a ab       	std	Y+50, r25	; 0x32
    5516:	ab ab       	std	Y+51, r26	; 0x33
    5518:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    551a:	69 a9       	ldd	r22, Y+49	; 0x31
    551c:	7a a9       	ldd	r23, Y+50	; 0x32
    551e:	8b a9       	ldd	r24, Y+51	; 0x33
    5520:	9c a9       	ldd	r25, Y+52	; 0x34
    5522:	20 e0       	ldi	r18, 0x00	; 0
    5524:	30 e0       	ldi	r19, 0x00	; 0
    5526:	40 e8       	ldi	r20, 0x80	; 128
    5528:	5f e3       	ldi	r21, 0x3F	; 63
    552a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    552e:	88 23       	and	r24, r24
    5530:	2c f4       	brge	.+10     	; 0x553c <SevenSegment_From0To9+0x950>
		__ticks = 1;
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	98 ab       	std	Y+48, r25	; 0x30
    5538:	8f a7       	std	Y+47, r24	; 0x2f
    553a:	3f c0       	rjmp	.+126    	; 0x55ba <SevenSegment_From0To9+0x9ce>
	else if (__tmp > 65535)
    553c:	69 a9       	ldd	r22, Y+49	; 0x31
    553e:	7a a9       	ldd	r23, Y+50	; 0x32
    5540:	8b a9       	ldd	r24, Y+51	; 0x33
    5542:	9c a9       	ldd	r25, Y+52	; 0x34
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	3f ef       	ldi	r19, 0xFF	; 255
    5548:	4f e7       	ldi	r20, 0x7F	; 127
    554a:	57 e4       	ldi	r21, 0x47	; 71
    554c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5550:	18 16       	cp	r1, r24
    5552:	4c f5       	brge	.+82     	; 0x55a6 <SevenSegment_From0To9+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5554:	6d a9       	ldd	r22, Y+53	; 0x35
    5556:	7e a9       	ldd	r23, Y+54	; 0x36
    5558:	8f a9       	ldd	r24, Y+55	; 0x37
    555a:	98 ad       	ldd	r25, Y+56	; 0x38
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	40 e2       	ldi	r20, 0x20	; 32
    5562:	51 e4       	ldi	r21, 0x41	; 65
    5564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	bc 01       	movw	r22, r24
    556e:	cd 01       	movw	r24, r26
    5570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5574:	dc 01       	movw	r26, r24
    5576:	cb 01       	movw	r24, r22
    5578:	98 ab       	std	Y+48, r25	; 0x30
    557a:	8f a7       	std	Y+47, r24	; 0x2f
    557c:	0f c0       	rjmp	.+30     	; 0x559c <SevenSegment_From0To9+0x9b0>
    557e:	80 e9       	ldi	r24, 0x90	; 144
    5580:	91 e0       	ldi	r25, 0x01	; 1
    5582:	9e a7       	std	Y+46, r25	; 0x2e
    5584:	8d a7       	std	Y+45, r24	; 0x2d
    5586:	8d a5       	ldd	r24, Y+45	; 0x2d
    5588:	9e a5       	ldd	r25, Y+46	; 0x2e
    558a:	01 97       	sbiw	r24, 0x01	; 1
    558c:	f1 f7       	brne	.-4      	; 0x558a <SevenSegment_From0To9+0x99e>
    558e:	9e a7       	std	Y+46, r25	; 0x2e
    5590:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5592:	8f a5       	ldd	r24, Y+47	; 0x2f
    5594:	98 a9       	ldd	r25, Y+48	; 0x30
    5596:	01 97       	sbiw	r24, 0x01	; 1
    5598:	98 ab       	std	Y+48, r25	; 0x30
    559a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    559c:	8f a5       	ldd	r24, Y+47	; 0x2f
    559e:	98 a9       	ldd	r25, Y+48	; 0x30
    55a0:	00 97       	sbiw	r24, 0x00	; 0
    55a2:	69 f7       	brne	.-38     	; 0x557e <SevenSegment_From0To9+0x992>
    55a4:	14 c0       	rjmp	.+40     	; 0x55ce <SevenSegment_From0To9+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55a6:	69 a9       	ldd	r22, Y+49	; 0x31
    55a8:	7a a9       	ldd	r23, Y+50	; 0x32
    55aa:	8b a9       	ldd	r24, Y+51	; 0x33
    55ac:	9c a9       	ldd	r25, Y+52	; 0x34
    55ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	98 ab       	std	Y+48, r25	; 0x30
    55b8:	8f a7       	std	Y+47, r24	; 0x2f
    55ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    55bc:	98 a9       	ldd	r25, Y+48	; 0x30
    55be:	9c a7       	std	Y+44, r25	; 0x2c
    55c0:	8b a7       	std	Y+43, r24	; 0x2b
    55c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    55c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    55c6:	01 97       	sbiw	r24, 0x01	; 1
    55c8:	f1 f7       	brne	.-4      	; 0x55c6 <SevenSegment_From0To9+0x9da>
    55ca:	9c a7       	std	Y+44, r25	; 0x2c
    55cc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 0, 0, 0); // 7
    55ce:	fe 01       	movw	r30, r28
    55d0:	e3 57       	subi	r30, 0x73	; 115
    55d2:	ff 4f       	sbci	r31, 0xFF	; 255
    55d4:	80 81       	ld	r24, Z
    55d6:	61 e0       	ldi	r22, 0x01	; 1
    55d8:	41 e0       	ldi	r20, 0x01	; 1
    55da:	21 e0       	ldi	r18, 0x01	; 1
    55dc:	00 e0       	ldi	r16, 0x00	; 0
    55de:	ee 24       	eor	r14, r14
    55e0:	cc 24       	eor	r12, r12
    55e2:	aa 24       	eor	r10, r10
    55e4:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    55e8:	80 e0       	ldi	r24, 0x00	; 0
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	a8 e4       	ldi	r26, 0x48	; 72
    55ee:	b2 e4       	ldi	r27, 0x42	; 66
    55f0:	8f a3       	std	Y+39, r24	; 0x27
    55f2:	98 a7       	std	Y+40, r25	; 0x28
    55f4:	a9 a7       	std	Y+41, r26	; 0x29
    55f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55f8:	6f a1       	ldd	r22, Y+39	; 0x27
    55fa:	78 a5       	ldd	r23, Y+40	; 0x28
    55fc:	89 a5       	ldd	r24, Y+41	; 0x29
    55fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	4a e7       	ldi	r20, 0x7A	; 122
    5606:	55 e4       	ldi	r21, 0x45	; 69
    5608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	8b a3       	std	Y+35, r24	; 0x23
    5612:	9c a3       	std	Y+36, r25	; 0x24
    5614:	ad a3       	std	Y+37, r26	; 0x25
    5616:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5618:	6b a1       	ldd	r22, Y+35	; 0x23
    561a:	7c a1       	ldd	r23, Y+36	; 0x24
    561c:	8d a1       	ldd	r24, Y+37	; 0x25
    561e:	9e a1       	ldd	r25, Y+38	; 0x26
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	40 e8       	ldi	r20, 0x80	; 128
    5626:	5f e3       	ldi	r21, 0x3F	; 63
    5628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    562c:	88 23       	and	r24, r24
    562e:	2c f4       	brge	.+10     	; 0x563a <SevenSegment_From0To9+0xa4e>
		__ticks = 1;
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	9a a3       	std	Y+34, r25	; 0x22
    5636:	89 a3       	std	Y+33, r24	; 0x21
    5638:	3f c0       	rjmp	.+126    	; 0x56b8 <SevenSegment_From0To9+0xacc>
	else if (__tmp > 65535)
    563a:	6b a1       	ldd	r22, Y+35	; 0x23
    563c:	7c a1       	ldd	r23, Y+36	; 0x24
    563e:	8d a1       	ldd	r24, Y+37	; 0x25
    5640:	9e a1       	ldd	r25, Y+38	; 0x26
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	3f ef       	ldi	r19, 0xFF	; 255
    5646:	4f e7       	ldi	r20, 0x7F	; 127
    5648:	57 e4       	ldi	r21, 0x47	; 71
    564a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    564e:	18 16       	cp	r1, r24
    5650:	4c f5       	brge	.+82     	; 0x56a4 <SevenSegment_From0To9+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5652:	6f a1       	ldd	r22, Y+39	; 0x27
    5654:	78 a5       	ldd	r23, Y+40	; 0x28
    5656:	89 a5       	ldd	r24, Y+41	; 0x29
    5658:	9a a5       	ldd	r25, Y+42	; 0x2a
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	40 e2       	ldi	r20, 0x20	; 32
    5660:	51 e4       	ldi	r21, 0x41	; 65
    5662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5666:	dc 01       	movw	r26, r24
    5668:	cb 01       	movw	r24, r22
    566a:	bc 01       	movw	r22, r24
    566c:	cd 01       	movw	r24, r26
    566e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	9a a3       	std	Y+34, r25	; 0x22
    5678:	89 a3       	std	Y+33, r24	; 0x21
    567a:	0f c0       	rjmp	.+30     	; 0x569a <SevenSegment_From0To9+0xaae>
    567c:	80 e9       	ldi	r24, 0x90	; 144
    567e:	91 e0       	ldi	r25, 0x01	; 1
    5680:	98 a3       	std	Y+32, r25	; 0x20
    5682:	8f 8f       	std	Y+31, r24	; 0x1f
    5684:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5686:	98 a1       	ldd	r25, Y+32	; 0x20
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	f1 f7       	brne	.-4      	; 0x5688 <SevenSegment_From0To9+0xa9c>
    568c:	98 a3       	std	Y+32, r25	; 0x20
    568e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5690:	89 a1       	ldd	r24, Y+33	; 0x21
    5692:	9a a1       	ldd	r25, Y+34	; 0x22
    5694:	01 97       	sbiw	r24, 0x01	; 1
    5696:	9a a3       	std	Y+34, r25	; 0x22
    5698:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    569a:	89 a1       	ldd	r24, Y+33	; 0x21
    569c:	9a a1       	ldd	r25, Y+34	; 0x22
    569e:	00 97       	sbiw	r24, 0x00	; 0
    56a0:	69 f7       	brne	.-38     	; 0x567c <SevenSegment_From0To9+0xa90>
    56a2:	14 c0       	rjmp	.+40     	; 0x56cc <SevenSegment_From0To9+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56a4:	6b a1       	ldd	r22, Y+35	; 0x23
    56a6:	7c a1       	ldd	r23, Y+36	; 0x24
    56a8:	8d a1       	ldd	r24, Y+37	; 0x25
    56aa:	9e a1       	ldd	r25, Y+38	; 0x26
    56ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56b0:	dc 01       	movw	r26, r24
    56b2:	cb 01       	movw	r24, r22
    56b4:	9a a3       	std	Y+34, r25	; 0x22
    56b6:	89 a3       	std	Y+33, r24	; 0x21
    56b8:	89 a1       	ldd	r24, Y+33	; 0x21
    56ba:	9a a1       	ldd	r25, Y+34	; 0x22
    56bc:	9e 8f       	std	Y+30, r25	; 0x1e
    56be:	8d 8f       	std	Y+29, r24	; 0x1d
    56c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    56c4:	01 97       	sbiw	r24, 0x01	; 1
    56c6:	f1 f7       	brne	.-4      	; 0x56c4 <SevenSegment_From0To9+0xad8>
    56c8:	9e 8f       	std	Y+30, r25	; 0x1e
    56ca:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 1); // 8
    56cc:	fe 01       	movw	r30, r28
    56ce:	e3 57       	subi	r30, 0x73	; 115
    56d0:	ff 4f       	sbci	r31, 0xFF	; 255
    56d2:	80 81       	ld	r24, Z
    56d4:	61 e0       	ldi	r22, 0x01	; 1
    56d6:	41 e0       	ldi	r20, 0x01	; 1
    56d8:	21 e0       	ldi	r18, 0x01	; 1
    56da:	01 e0       	ldi	r16, 0x01	; 1
    56dc:	ee 24       	eor	r14, r14
    56de:	e3 94       	inc	r14
    56e0:	cc 24       	eor	r12, r12
    56e2:	c3 94       	inc	r12
    56e4:	aa 24       	eor	r10, r10
    56e6:	a3 94       	inc	r10
    56e8:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    56ec:	80 e0       	ldi	r24, 0x00	; 0
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	a8 e4       	ldi	r26, 0x48	; 72
    56f2:	b2 e4       	ldi	r27, 0x42	; 66
    56f4:	89 8f       	std	Y+25, r24	; 0x19
    56f6:	9a 8f       	std	Y+26, r25	; 0x1a
    56f8:	ab 8f       	std	Y+27, r26	; 0x1b
    56fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56fc:	69 8d       	ldd	r22, Y+25	; 0x19
    56fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5704:	20 e0       	ldi	r18, 0x00	; 0
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	4a e7       	ldi	r20, 0x7A	; 122
    570a:	55 e4       	ldi	r21, 0x45	; 69
    570c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5710:	dc 01       	movw	r26, r24
    5712:	cb 01       	movw	r24, r22
    5714:	8d 8b       	std	Y+21, r24	; 0x15
    5716:	9e 8b       	std	Y+22, r25	; 0x16
    5718:	af 8b       	std	Y+23, r26	; 0x17
    571a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    571c:	6d 89       	ldd	r22, Y+21	; 0x15
    571e:	7e 89       	ldd	r23, Y+22	; 0x16
    5720:	8f 89       	ldd	r24, Y+23	; 0x17
    5722:	98 8d       	ldd	r25, Y+24	; 0x18
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	40 e8       	ldi	r20, 0x80	; 128
    572a:	5f e3       	ldi	r21, 0x3F	; 63
    572c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5730:	88 23       	and	r24, r24
    5732:	2c f4       	brge	.+10     	; 0x573e <SevenSegment_From0To9+0xb52>
		__ticks = 1;
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	9c 8b       	std	Y+20, r25	; 0x14
    573a:	8b 8b       	std	Y+19, r24	; 0x13
    573c:	3f c0       	rjmp	.+126    	; 0x57bc <SevenSegment_From0To9+0xbd0>
	else if (__tmp > 65535)
    573e:	6d 89       	ldd	r22, Y+21	; 0x15
    5740:	7e 89       	ldd	r23, Y+22	; 0x16
    5742:	8f 89       	ldd	r24, Y+23	; 0x17
    5744:	98 8d       	ldd	r25, Y+24	; 0x18
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	3f ef       	ldi	r19, 0xFF	; 255
    574a:	4f e7       	ldi	r20, 0x7F	; 127
    574c:	57 e4       	ldi	r21, 0x47	; 71
    574e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5752:	18 16       	cp	r1, r24
    5754:	4c f5       	brge	.+82     	; 0x57a8 <SevenSegment_From0To9+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5756:	69 8d       	ldd	r22, Y+25	; 0x19
    5758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    575a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    575c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e2       	ldi	r20, 0x20	; 32
    5764:	51 e4       	ldi	r21, 0x41	; 65
    5766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    576a:	dc 01       	movw	r26, r24
    576c:	cb 01       	movw	r24, r22
    576e:	bc 01       	movw	r22, r24
    5770:	cd 01       	movw	r24, r26
    5772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5776:	dc 01       	movw	r26, r24
    5778:	cb 01       	movw	r24, r22
    577a:	9c 8b       	std	Y+20, r25	; 0x14
    577c:	8b 8b       	std	Y+19, r24	; 0x13
    577e:	0f c0       	rjmp	.+30     	; 0x579e <SevenSegment_From0To9+0xbb2>
    5780:	80 e9       	ldi	r24, 0x90	; 144
    5782:	91 e0       	ldi	r25, 0x01	; 1
    5784:	9a 8b       	std	Y+18, r25	; 0x12
    5786:	89 8b       	std	Y+17, r24	; 0x11
    5788:	89 89       	ldd	r24, Y+17	; 0x11
    578a:	9a 89       	ldd	r25, Y+18	; 0x12
    578c:	01 97       	sbiw	r24, 0x01	; 1
    578e:	f1 f7       	brne	.-4      	; 0x578c <SevenSegment_From0To9+0xba0>
    5790:	9a 8b       	std	Y+18, r25	; 0x12
    5792:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5794:	8b 89       	ldd	r24, Y+19	; 0x13
    5796:	9c 89       	ldd	r25, Y+20	; 0x14
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	9c 8b       	std	Y+20, r25	; 0x14
    579c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    579e:	8b 89       	ldd	r24, Y+19	; 0x13
    57a0:	9c 89       	ldd	r25, Y+20	; 0x14
    57a2:	00 97       	sbiw	r24, 0x00	; 0
    57a4:	69 f7       	brne	.-38     	; 0x5780 <SevenSegment_From0To9+0xb94>
    57a6:	14 c0       	rjmp	.+40     	; 0x57d0 <SevenSegment_From0To9+0xbe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57a8:	6d 89       	ldd	r22, Y+21	; 0x15
    57aa:	7e 89       	ldd	r23, Y+22	; 0x16
    57ac:	8f 89       	ldd	r24, Y+23	; 0x17
    57ae:	98 8d       	ldd	r25, Y+24	; 0x18
    57b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b4:	dc 01       	movw	r26, r24
    57b6:	cb 01       	movw	r24, r22
    57b8:	9c 8b       	std	Y+20, r25	; 0x14
    57ba:	8b 8b       	std	Y+19, r24	; 0x13
    57bc:	8b 89       	ldd	r24, Y+19	; 0x13
    57be:	9c 89       	ldd	r25, Y+20	; 0x14
    57c0:	98 8b       	std	Y+16, r25	; 0x10
    57c2:	8f 87       	std	Y+15, r24	; 0x0f
    57c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    57c6:	98 89       	ldd	r25, Y+16	; 0x10
    57c8:	01 97       	sbiw	r24, 0x01	; 1
    57ca:	f1 f7       	brne	.-4      	; 0x57c8 <SevenSegment_From0To9+0xbdc>
    57cc:	98 8b       	std	Y+16, r25	; 0x10
    57ce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 1, 1); // 9
    57d0:	fe 01       	movw	r30, r28
    57d2:	e3 57       	subi	r30, 0x73	; 115
    57d4:	ff 4f       	sbci	r31, 0xFF	; 255
    57d6:	80 81       	ld	r24, Z
    57d8:	61 e0       	ldi	r22, 0x01	; 1
    57da:	41 e0       	ldi	r20, 0x01	; 1
    57dc:	21 e0       	ldi	r18, 0x01	; 1
    57de:	01 e0       	ldi	r16, 0x01	; 1
    57e0:	ee 24       	eor	r14, r14
    57e2:	cc 24       	eor	r12, r12
    57e4:	c3 94       	inc	r12
    57e6:	aa 24       	eor	r10, r10
    57e8:	a3 94       	inc	r10
    57ea:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	a8 e4       	ldi	r26, 0x48	; 72
    57f4:	b2 e4       	ldi	r27, 0x42	; 66
    57f6:	8b 87       	std	Y+11, r24	; 0x0b
    57f8:	9c 87       	std	Y+12, r25	; 0x0c
    57fa:	ad 87       	std	Y+13, r26	; 0x0d
    57fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5800:	7c 85       	ldd	r23, Y+12	; 0x0c
    5802:	8d 85       	ldd	r24, Y+13	; 0x0d
    5804:	9e 85       	ldd	r25, Y+14	; 0x0e
    5806:	20 e0       	ldi	r18, 0x00	; 0
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	4a e7       	ldi	r20, 0x7A	; 122
    580c:	55 e4       	ldi	r21, 0x45	; 69
    580e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5812:	dc 01       	movw	r26, r24
    5814:	cb 01       	movw	r24, r22
    5816:	8f 83       	std	Y+7, r24	; 0x07
    5818:	98 87       	std	Y+8, r25	; 0x08
    581a:	a9 87       	std	Y+9, r26	; 0x09
    581c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    581e:	6f 81       	ldd	r22, Y+7	; 0x07
    5820:	78 85       	ldd	r23, Y+8	; 0x08
    5822:	89 85       	ldd	r24, Y+9	; 0x09
    5824:	9a 85       	ldd	r25, Y+10	; 0x0a
    5826:	20 e0       	ldi	r18, 0x00	; 0
    5828:	30 e0       	ldi	r19, 0x00	; 0
    582a:	40 e8       	ldi	r20, 0x80	; 128
    582c:	5f e3       	ldi	r21, 0x3F	; 63
    582e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5832:	88 23       	and	r24, r24
    5834:	2c f4       	brge	.+10     	; 0x5840 <SevenSegment_From0To9+0xc54>
		__ticks = 1;
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	9e 83       	std	Y+6, r25	; 0x06
    583c:	8d 83       	std	Y+5, r24	; 0x05
    583e:	3f c0       	rjmp	.+126    	; 0x58be <SevenSegment_From0To9+0xcd2>
	else if (__tmp > 65535)
    5840:	6f 81       	ldd	r22, Y+7	; 0x07
    5842:	78 85       	ldd	r23, Y+8	; 0x08
    5844:	89 85       	ldd	r24, Y+9	; 0x09
    5846:	9a 85       	ldd	r25, Y+10	; 0x0a
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	3f ef       	ldi	r19, 0xFF	; 255
    584c:	4f e7       	ldi	r20, 0x7F	; 127
    584e:	57 e4       	ldi	r21, 0x47	; 71
    5850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5854:	18 16       	cp	r1, r24
    5856:	4c f5       	brge	.+82     	; 0x58aa <SevenSegment_From0To9+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5858:	6b 85       	ldd	r22, Y+11	; 0x0b
    585a:	7c 85       	ldd	r23, Y+12	; 0x0c
    585c:	8d 85       	ldd	r24, Y+13	; 0x0d
    585e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5860:	20 e0       	ldi	r18, 0x00	; 0
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	40 e2       	ldi	r20, 0x20	; 32
    5866:	51 e4       	ldi	r21, 0x41	; 65
    5868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    586c:	dc 01       	movw	r26, r24
    586e:	cb 01       	movw	r24, r22
    5870:	bc 01       	movw	r22, r24
    5872:	cd 01       	movw	r24, r26
    5874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	9e 83       	std	Y+6, r25	; 0x06
    587e:	8d 83       	std	Y+5, r24	; 0x05
    5880:	0f c0       	rjmp	.+30     	; 0x58a0 <SevenSegment_From0To9+0xcb4>
    5882:	80 e9       	ldi	r24, 0x90	; 144
    5884:	91 e0       	ldi	r25, 0x01	; 1
    5886:	9c 83       	std	Y+4, r25	; 0x04
    5888:	8b 83       	std	Y+3, r24	; 0x03
    588a:	8b 81       	ldd	r24, Y+3	; 0x03
    588c:	9c 81       	ldd	r25, Y+4	; 0x04
    588e:	01 97       	sbiw	r24, 0x01	; 1
    5890:	f1 f7       	brne	.-4      	; 0x588e <SevenSegment_From0To9+0xca2>
    5892:	9c 83       	std	Y+4, r25	; 0x04
    5894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5896:	8d 81       	ldd	r24, Y+5	; 0x05
    5898:	9e 81       	ldd	r25, Y+6	; 0x06
    589a:	01 97       	sbiw	r24, 0x01	; 1
    589c:	9e 83       	std	Y+6, r25	; 0x06
    589e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58a0:	8d 81       	ldd	r24, Y+5	; 0x05
    58a2:	9e 81       	ldd	r25, Y+6	; 0x06
    58a4:	00 97       	sbiw	r24, 0x00	; 0
    58a6:	69 f7       	brne	.-38     	; 0x5882 <SevenSegment_From0To9+0xc96>
    58a8:	b5 c9       	rjmp	.-3222   	; 0x4c14 <SevenSegment_From0To9+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58aa:	6f 81       	ldd	r22, Y+7	; 0x07
    58ac:	78 85       	ldd	r23, Y+8	; 0x08
    58ae:	89 85       	ldd	r24, Y+9	; 0x09
    58b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b6:	dc 01       	movw	r26, r24
    58b8:	cb 01       	movw	r24, r22
    58ba:	9e 83       	std	Y+6, r25	; 0x06
    58bc:	8d 83       	std	Y+5, r24	; 0x05
    58be:	8d 81       	ldd	r24, Y+5	; 0x05
    58c0:	9e 81       	ldd	r25, Y+6	; 0x06
    58c2:	9a 83       	std	Y+2, r25	; 0x02
    58c4:	89 83       	std	Y+1, r24	; 0x01
    58c6:	89 81       	ldd	r24, Y+1	; 0x01
    58c8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ca:	01 97       	sbiw	r24, 0x01	; 1
    58cc:	f1 f7       	brne	.-4      	; 0x58ca <SevenSegment_From0To9+0xcde>
    58ce:	9a 83       	std	Y+2, r25	; 0x02
    58d0:	89 83       	std	Y+1, r24	; 0x01
    58d2:	a0 c9       	rjmp	.-3264   	; 0x4c14 <SevenSegment_From0To9+0x28>

000058d4 <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(u8 Copy_u8PortId){
    58d4:	af 92       	push	r10
    58d6:	cf 92       	push	r12
    58d8:	ef 92       	push	r14
    58da:	0f 93       	push	r16
    58dc:	1f 93       	push	r17
    58de:	df 93       	push	r29
    58e0:	cf 93       	push	r28
    58e2:	cd b7       	in	r28, 0x3d	; 61
    58e4:	de b7       	in	r29, 0x3e	; 62
    58e6:	c1 57       	subi	r28, 0x71	; 113
    58e8:	d0 40       	sbci	r29, 0x00	; 0
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	f8 94       	cli
    58ee:	de bf       	out	0x3e, r29	; 62
    58f0:	0f be       	out	0x3f, r0	; 63
    58f2:	cd bf       	out	0x3d, r28	; 61
    58f4:	fe 01       	movw	r30, r28
    58f6:	ef 58       	subi	r30, 0x8F	; 143
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 1, 1, 1); // A
    58fc:	fe 01       	movw	r30, r28
    58fe:	ef 58       	subi	r30, 0x8F	; 143
    5900:	ff 4f       	sbci	r31, 0xFF	; 255
    5902:	80 81       	ld	r24, Z
    5904:	61 e0       	ldi	r22, 0x01	; 1
    5906:	41 e0       	ldi	r20, 0x01	; 1
    5908:	21 e0       	ldi	r18, 0x01	; 1
    590a:	00 e0       	ldi	r16, 0x00	; 0
    590c:	ee 24       	eor	r14, r14
    590e:	e3 94       	inc	r14
    5910:	cc 24       	eor	r12, r12
    5912:	c3 94       	inc	r12
    5914:	aa 24       	eor	r10, r10
    5916:	a3 94       	inc	r10
    5918:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    591c:	fe 01       	movw	r30, r28
    591e:	e3 59       	subi	r30, 0x93	; 147
    5920:	ff 4f       	sbci	r31, 0xFF	; 255
    5922:	80 e0       	ldi	r24, 0x00	; 0
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	a8 e4       	ldi	r26, 0x48	; 72
    5928:	b2 e4       	ldi	r27, 0x42	; 66
    592a:	80 83       	st	Z, r24
    592c:	91 83       	std	Z+1, r25	; 0x01
    592e:	a2 83       	std	Z+2, r26	; 0x02
    5930:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5932:	8e 01       	movw	r16, r28
    5934:	07 59       	subi	r16, 0x97	; 151
    5936:	1f 4f       	sbci	r17, 0xFF	; 255
    5938:	fe 01       	movw	r30, r28
    593a:	e3 59       	subi	r30, 0x93	; 147
    593c:	ff 4f       	sbci	r31, 0xFF	; 255
    593e:	60 81       	ld	r22, Z
    5940:	71 81       	ldd	r23, Z+1	; 0x01
    5942:	82 81       	ldd	r24, Z+2	; 0x02
    5944:	93 81       	ldd	r25, Z+3	; 0x03
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	4a e7       	ldi	r20, 0x7A	; 122
    594c:	55 e4       	ldi	r21, 0x45	; 69
    594e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5952:	dc 01       	movw	r26, r24
    5954:	cb 01       	movw	r24, r22
    5956:	f8 01       	movw	r30, r16
    5958:	80 83       	st	Z, r24
    595a:	91 83       	std	Z+1, r25	; 0x01
    595c:	a2 83       	std	Z+2, r26	; 0x02
    595e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5960:	fe 01       	movw	r30, r28
    5962:	e7 59       	subi	r30, 0x97	; 151
    5964:	ff 4f       	sbci	r31, 0xFF	; 255
    5966:	60 81       	ld	r22, Z
    5968:	71 81       	ldd	r23, Z+1	; 0x01
    596a:	82 81       	ldd	r24, Z+2	; 0x02
    596c:	93 81       	ldd	r25, Z+3	; 0x03
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	40 e8       	ldi	r20, 0x80	; 128
    5974:	5f e3       	ldi	r21, 0x3F	; 63
    5976:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    597a:	88 23       	and	r24, r24
    597c:	44 f4       	brge	.+16     	; 0x598e <SevenSegment_FromAToH+0xba>
		__ticks = 1;
    597e:	fe 01       	movw	r30, r28
    5980:	e9 59       	subi	r30, 0x99	; 153
    5982:	ff 4f       	sbci	r31, 0xFF	; 255
    5984:	81 e0       	ldi	r24, 0x01	; 1
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	91 83       	std	Z+1, r25	; 0x01
    598a:	80 83       	st	Z, r24
    598c:	64 c0       	rjmp	.+200    	; 0x5a56 <SevenSegment_FromAToH+0x182>
	else if (__tmp > 65535)
    598e:	fe 01       	movw	r30, r28
    5990:	e7 59       	subi	r30, 0x97	; 151
    5992:	ff 4f       	sbci	r31, 0xFF	; 255
    5994:	60 81       	ld	r22, Z
    5996:	71 81       	ldd	r23, Z+1	; 0x01
    5998:	82 81       	ldd	r24, Z+2	; 0x02
    599a:	93 81       	ldd	r25, Z+3	; 0x03
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	3f ef       	ldi	r19, 0xFF	; 255
    59a0:	4f e7       	ldi	r20, 0x7F	; 127
    59a2:	57 e4       	ldi	r21, 0x47	; 71
    59a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59a8:	18 16       	cp	r1, r24
    59aa:	0c f0       	brlt	.+2      	; 0x59ae <SevenSegment_FromAToH+0xda>
    59ac:	43 c0       	rjmp	.+134    	; 0x5a34 <SevenSegment_FromAToH+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ae:	fe 01       	movw	r30, r28
    59b0:	e3 59       	subi	r30, 0x93	; 147
    59b2:	ff 4f       	sbci	r31, 0xFF	; 255
    59b4:	60 81       	ld	r22, Z
    59b6:	71 81       	ldd	r23, Z+1	; 0x01
    59b8:	82 81       	ldd	r24, Z+2	; 0x02
    59ba:	93 81       	ldd	r25, Z+3	; 0x03
    59bc:	20 e0       	ldi	r18, 0x00	; 0
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	40 e2       	ldi	r20, 0x20	; 32
    59c2:	51 e4       	ldi	r21, 0x41	; 65
    59c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	8e 01       	movw	r16, r28
    59ce:	09 59       	subi	r16, 0x99	; 153
    59d0:	1f 4f       	sbci	r17, 0xFF	; 255
    59d2:	bc 01       	movw	r22, r24
    59d4:	cd 01       	movw	r24, r26
    59d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	f8 01       	movw	r30, r16
    59e0:	91 83       	std	Z+1, r25	; 0x01
    59e2:	80 83       	st	Z, r24
    59e4:	1f c0       	rjmp	.+62     	; 0x5a24 <SevenSegment_FromAToH+0x150>
    59e6:	fe 01       	movw	r30, r28
    59e8:	eb 59       	subi	r30, 0x9B	; 155
    59ea:	ff 4f       	sbci	r31, 0xFF	; 255
    59ec:	80 e9       	ldi	r24, 0x90	; 144
    59ee:	91 e0       	ldi	r25, 0x01	; 1
    59f0:	91 83       	std	Z+1, r25	; 0x01
    59f2:	80 83       	st	Z, r24
    59f4:	fe 01       	movw	r30, r28
    59f6:	eb 59       	subi	r30, 0x9B	; 155
    59f8:	ff 4f       	sbci	r31, 0xFF	; 255
    59fa:	80 81       	ld	r24, Z
    59fc:	91 81       	ldd	r25, Z+1	; 0x01
    59fe:	01 97       	sbiw	r24, 0x01	; 1
    5a00:	f1 f7       	brne	.-4      	; 0x59fe <SevenSegment_FromAToH+0x12a>
    5a02:	fe 01       	movw	r30, r28
    5a04:	eb 59       	subi	r30, 0x9B	; 155
    5a06:	ff 4f       	sbci	r31, 0xFF	; 255
    5a08:	91 83       	std	Z+1, r25	; 0x01
    5a0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a0c:	de 01       	movw	r26, r28
    5a0e:	a9 59       	subi	r26, 0x99	; 153
    5a10:	bf 4f       	sbci	r27, 0xFF	; 255
    5a12:	fe 01       	movw	r30, r28
    5a14:	e9 59       	subi	r30, 0x99	; 153
    5a16:	ff 4f       	sbci	r31, 0xFF	; 255
    5a18:	80 81       	ld	r24, Z
    5a1a:	91 81       	ldd	r25, Z+1	; 0x01
    5a1c:	01 97       	sbiw	r24, 0x01	; 1
    5a1e:	11 96       	adiw	r26, 0x01	; 1
    5a20:	9c 93       	st	X, r25
    5a22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a24:	fe 01       	movw	r30, r28
    5a26:	e9 59       	subi	r30, 0x99	; 153
    5a28:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2a:	80 81       	ld	r24, Z
    5a2c:	91 81       	ldd	r25, Z+1	; 0x01
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	d1 f6       	brne	.-76     	; 0x59e6 <SevenSegment_FromAToH+0x112>
    5a32:	27 c0       	rjmp	.+78     	; 0x5a82 <SevenSegment_FromAToH+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a34:	8e 01       	movw	r16, r28
    5a36:	09 59       	subi	r16, 0x99	; 153
    5a38:	1f 4f       	sbci	r17, 0xFF	; 255
    5a3a:	fe 01       	movw	r30, r28
    5a3c:	e7 59       	subi	r30, 0x97	; 151
    5a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a40:	60 81       	ld	r22, Z
    5a42:	71 81       	ldd	r23, Z+1	; 0x01
    5a44:	82 81       	ldd	r24, Z+2	; 0x02
    5a46:	93 81       	ldd	r25, Z+3	; 0x03
    5a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a4c:	dc 01       	movw	r26, r24
    5a4e:	cb 01       	movw	r24, r22
    5a50:	f8 01       	movw	r30, r16
    5a52:	91 83       	std	Z+1, r25	; 0x01
    5a54:	80 83       	st	Z, r24
    5a56:	de 01       	movw	r26, r28
    5a58:	ad 59       	subi	r26, 0x9D	; 157
    5a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    5a5c:	fe 01       	movw	r30, r28
    5a5e:	e9 59       	subi	r30, 0x99	; 153
    5a60:	ff 4f       	sbci	r31, 0xFF	; 255
    5a62:	80 81       	ld	r24, Z
    5a64:	91 81       	ldd	r25, Z+1	; 0x01
    5a66:	8d 93       	st	X+, r24
    5a68:	9c 93       	st	X, r25
    5a6a:	fe 01       	movw	r30, r28
    5a6c:	ed 59       	subi	r30, 0x9D	; 157
    5a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a70:	80 81       	ld	r24, Z
    5a72:	91 81       	ldd	r25, Z+1	; 0x01
    5a74:	01 97       	sbiw	r24, 0x01	; 1
    5a76:	f1 f7       	brne	.-4      	; 0x5a74 <SevenSegment_FromAToH+0x1a0>
    5a78:	fe 01       	movw	r30, r28
    5a7a:	ed 59       	subi	r30, 0x9D	; 157
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	91 83       	std	Z+1, r25	; 0x01
    5a80:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 0, 1, 1, 1, 1, 1); // B
    5a82:	fe 01       	movw	r30, r28
    5a84:	ef 58       	subi	r30, 0x8F	; 143
    5a86:	ff 4f       	sbci	r31, 0xFF	; 255
    5a88:	80 81       	ld	r24, Z
    5a8a:	60 e0       	ldi	r22, 0x00	; 0
    5a8c:	40 e0       	ldi	r20, 0x00	; 0
    5a8e:	21 e0       	ldi	r18, 0x01	; 1
    5a90:	01 e0       	ldi	r16, 0x01	; 1
    5a92:	ee 24       	eor	r14, r14
    5a94:	e3 94       	inc	r14
    5a96:	cc 24       	eor	r12, r12
    5a98:	c3 94       	inc	r12
    5a9a:	aa 24       	eor	r10, r10
    5a9c:	a3 94       	inc	r10
    5a9e:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	e1 5a       	subi	r30, 0xA1	; 161
    5aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	a8 e4       	ldi	r26, 0x48	; 72
    5aae:	b2 e4       	ldi	r27, 0x42	; 66
    5ab0:	80 83       	st	Z, r24
    5ab2:	91 83       	std	Z+1, r25	; 0x01
    5ab4:	a2 83       	std	Z+2, r26	; 0x02
    5ab6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ab8:	8e 01       	movw	r16, r28
    5aba:	05 5a       	subi	r16, 0xA5	; 165
    5abc:	1f 4f       	sbci	r17, 0xFF	; 255
    5abe:	fe 01       	movw	r30, r28
    5ac0:	e1 5a       	subi	r30, 0xA1	; 161
    5ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac4:	60 81       	ld	r22, Z
    5ac6:	71 81       	ldd	r23, Z+1	; 0x01
    5ac8:	82 81       	ldd	r24, Z+2	; 0x02
    5aca:	93 81       	ldd	r25, Z+3	; 0x03
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	4a e7       	ldi	r20, 0x7A	; 122
    5ad2:	55 e4       	ldi	r21, 0x45	; 69
    5ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	f8 01       	movw	r30, r16
    5ade:	80 83       	st	Z, r24
    5ae0:	91 83       	std	Z+1, r25	; 0x01
    5ae2:	a2 83       	std	Z+2, r26	; 0x02
    5ae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ae6:	fe 01       	movw	r30, r28
    5ae8:	e5 5a       	subi	r30, 0xA5	; 165
    5aea:	ff 4f       	sbci	r31, 0xFF	; 255
    5aec:	60 81       	ld	r22, Z
    5aee:	71 81       	ldd	r23, Z+1	; 0x01
    5af0:	82 81       	ldd	r24, Z+2	; 0x02
    5af2:	93 81       	ldd	r25, Z+3	; 0x03
    5af4:	20 e0       	ldi	r18, 0x00	; 0
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	40 e8       	ldi	r20, 0x80	; 128
    5afa:	5f e3       	ldi	r21, 0x3F	; 63
    5afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b00:	88 23       	and	r24, r24
    5b02:	44 f4       	brge	.+16     	; 0x5b14 <SevenSegment_FromAToH+0x240>
		__ticks = 1;
    5b04:	fe 01       	movw	r30, r28
    5b06:	e7 5a       	subi	r30, 0xA7	; 167
    5b08:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	91 83       	std	Z+1, r25	; 0x01
    5b10:	80 83       	st	Z, r24
    5b12:	64 c0       	rjmp	.+200    	; 0x5bdc <SevenSegment_FromAToH+0x308>
	else if (__tmp > 65535)
    5b14:	fe 01       	movw	r30, r28
    5b16:	e5 5a       	subi	r30, 0xA5	; 165
    5b18:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1a:	60 81       	ld	r22, Z
    5b1c:	71 81       	ldd	r23, Z+1	; 0x01
    5b1e:	82 81       	ldd	r24, Z+2	; 0x02
    5b20:	93 81       	ldd	r25, Z+3	; 0x03
    5b22:	20 e0       	ldi	r18, 0x00	; 0
    5b24:	3f ef       	ldi	r19, 0xFF	; 255
    5b26:	4f e7       	ldi	r20, 0x7F	; 127
    5b28:	57 e4       	ldi	r21, 0x47	; 71
    5b2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b2e:	18 16       	cp	r1, r24
    5b30:	0c f0       	brlt	.+2      	; 0x5b34 <SevenSegment_FromAToH+0x260>
    5b32:	43 c0       	rjmp	.+134    	; 0x5bba <SevenSegment_FromAToH+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b34:	fe 01       	movw	r30, r28
    5b36:	e1 5a       	subi	r30, 0xA1	; 161
    5b38:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3a:	60 81       	ld	r22, Z
    5b3c:	71 81       	ldd	r23, Z+1	; 0x01
    5b3e:	82 81       	ldd	r24, Z+2	; 0x02
    5b40:	93 81       	ldd	r25, Z+3	; 0x03
    5b42:	20 e0       	ldi	r18, 0x00	; 0
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	40 e2       	ldi	r20, 0x20	; 32
    5b48:	51 e4       	ldi	r21, 0x41	; 65
    5b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b4e:	dc 01       	movw	r26, r24
    5b50:	cb 01       	movw	r24, r22
    5b52:	8e 01       	movw	r16, r28
    5b54:	07 5a       	subi	r16, 0xA7	; 167
    5b56:	1f 4f       	sbci	r17, 0xFF	; 255
    5b58:	bc 01       	movw	r22, r24
    5b5a:	cd 01       	movw	r24, r26
    5b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b60:	dc 01       	movw	r26, r24
    5b62:	cb 01       	movw	r24, r22
    5b64:	f8 01       	movw	r30, r16
    5b66:	91 83       	std	Z+1, r25	; 0x01
    5b68:	80 83       	st	Z, r24
    5b6a:	1f c0       	rjmp	.+62     	; 0x5baa <SevenSegment_FromAToH+0x2d6>
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e9 5a       	subi	r30, 0xA9	; 169
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	80 e9       	ldi	r24, 0x90	; 144
    5b74:	91 e0       	ldi	r25, 0x01	; 1
    5b76:	91 83       	std	Z+1, r25	; 0x01
    5b78:	80 83       	st	Z, r24
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	e9 5a       	subi	r30, 0xA9	; 169
    5b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b80:	80 81       	ld	r24, Z
    5b82:	91 81       	ldd	r25, Z+1	; 0x01
    5b84:	01 97       	sbiw	r24, 0x01	; 1
    5b86:	f1 f7       	brne	.-4      	; 0x5b84 <SevenSegment_FromAToH+0x2b0>
    5b88:	fe 01       	movw	r30, r28
    5b8a:	e9 5a       	subi	r30, 0xA9	; 169
    5b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8e:	91 83       	std	Z+1, r25	; 0x01
    5b90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b92:	de 01       	movw	r26, r28
    5b94:	a7 5a       	subi	r26, 0xA7	; 167
    5b96:	bf 4f       	sbci	r27, 0xFF	; 255
    5b98:	fe 01       	movw	r30, r28
    5b9a:	e7 5a       	subi	r30, 0xA7	; 167
    5b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9e:	80 81       	ld	r24, Z
    5ba0:	91 81       	ldd	r25, Z+1	; 0x01
    5ba2:	01 97       	sbiw	r24, 0x01	; 1
    5ba4:	11 96       	adiw	r26, 0x01	; 1
    5ba6:	9c 93       	st	X, r25
    5ba8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5baa:	fe 01       	movw	r30, r28
    5bac:	e7 5a       	subi	r30, 0xA7	; 167
    5bae:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb0:	80 81       	ld	r24, Z
    5bb2:	91 81       	ldd	r25, Z+1	; 0x01
    5bb4:	00 97       	sbiw	r24, 0x00	; 0
    5bb6:	d1 f6       	brne	.-76     	; 0x5b6c <SevenSegment_FromAToH+0x298>
    5bb8:	27 c0       	rjmp	.+78     	; 0x5c08 <SevenSegment_FromAToH+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bba:	8e 01       	movw	r16, r28
    5bbc:	07 5a       	subi	r16, 0xA7	; 167
    5bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc0:	fe 01       	movw	r30, r28
    5bc2:	e5 5a       	subi	r30, 0xA5	; 165
    5bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc6:	60 81       	ld	r22, Z
    5bc8:	71 81       	ldd	r23, Z+1	; 0x01
    5bca:	82 81       	ldd	r24, Z+2	; 0x02
    5bcc:	93 81       	ldd	r25, Z+3	; 0x03
    5bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bd2:	dc 01       	movw	r26, r24
    5bd4:	cb 01       	movw	r24, r22
    5bd6:	f8 01       	movw	r30, r16
    5bd8:	91 83       	std	Z+1, r25	; 0x01
    5bda:	80 83       	st	Z, r24
    5bdc:	de 01       	movw	r26, r28
    5bde:	ab 5a       	subi	r26, 0xAB	; 171
    5be0:	bf 4f       	sbci	r27, 0xFF	; 255
    5be2:	fe 01       	movw	r30, r28
    5be4:	e7 5a       	subi	r30, 0xA7	; 167
    5be6:	ff 4f       	sbci	r31, 0xFF	; 255
    5be8:	80 81       	ld	r24, Z
    5bea:	91 81       	ldd	r25, Z+1	; 0x01
    5bec:	8d 93       	st	X+, r24
    5bee:	9c 93       	st	X, r25
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	eb 5a       	subi	r30, 0xAB	; 171
    5bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf6:	80 81       	ld	r24, Z
    5bf8:	91 81       	ldd	r25, Z+1	; 0x01
    5bfa:	01 97       	sbiw	r24, 0x01	; 1
    5bfc:	f1 f7       	brne	.-4      	; 0x5bfa <SevenSegment_FromAToH+0x326>
    5bfe:	fe 01       	movw	r30, r28
    5c00:	eb 5a       	subi	r30, 0xAB	; 171
    5c02:	ff 4f       	sbci	r31, 0xFF	; 255
    5c04:	91 83       	std	Z+1, r25	; 0x01
    5c06:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 0); // C
    5c08:	fe 01       	movw	r30, r28
    5c0a:	ef 58       	subi	r30, 0x8F	; 143
    5c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0e:	80 81       	ld	r24, Z
    5c10:	61 e0       	ldi	r22, 0x01	; 1
    5c12:	40 e0       	ldi	r20, 0x00	; 0
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	01 e0       	ldi	r16, 0x01	; 1
    5c18:	ee 24       	eor	r14, r14
    5c1a:	e3 94       	inc	r14
    5c1c:	cc 24       	eor	r12, r12
    5c1e:	c3 94       	inc	r12
    5c20:	aa 24       	eor	r10, r10
    5c22:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    5c26:	fe 01       	movw	r30, r28
    5c28:	ef 5a       	subi	r30, 0xAF	; 175
    5c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	a8 e4       	ldi	r26, 0x48	; 72
    5c32:	b2 e4       	ldi	r27, 0x42	; 66
    5c34:	80 83       	st	Z, r24
    5c36:	91 83       	std	Z+1, r25	; 0x01
    5c38:	a2 83       	std	Z+2, r26	; 0x02
    5c3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c3c:	8e 01       	movw	r16, r28
    5c3e:	03 5b       	subi	r16, 0xB3	; 179
    5c40:	1f 4f       	sbci	r17, 0xFF	; 255
    5c42:	fe 01       	movw	r30, r28
    5c44:	ef 5a       	subi	r30, 0xAF	; 175
    5c46:	ff 4f       	sbci	r31, 0xFF	; 255
    5c48:	60 81       	ld	r22, Z
    5c4a:	71 81       	ldd	r23, Z+1	; 0x01
    5c4c:	82 81       	ldd	r24, Z+2	; 0x02
    5c4e:	93 81       	ldd	r25, Z+3	; 0x03
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	4a e7       	ldi	r20, 0x7A	; 122
    5c56:	55 e4       	ldi	r21, 0x45	; 69
    5c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	f8 01       	movw	r30, r16
    5c62:	80 83       	st	Z, r24
    5c64:	91 83       	std	Z+1, r25	; 0x01
    5c66:	a2 83       	std	Z+2, r26	; 0x02
    5c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c6a:	fe 01       	movw	r30, r28
    5c6c:	e3 5b       	subi	r30, 0xB3	; 179
    5c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c70:	60 81       	ld	r22, Z
    5c72:	71 81       	ldd	r23, Z+1	; 0x01
    5c74:	82 81       	ldd	r24, Z+2	; 0x02
    5c76:	93 81       	ldd	r25, Z+3	; 0x03
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	40 e8       	ldi	r20, 0x80	; 128
    5c7e:	5f e3       	ldi	r21, 0x3F	; 63
    5c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c84:	88 23       	and	r24, r24
    5c86:	44 f4       	brge	.+16     	; 0x5c98 <SevenSegment_FromAToH+0x3c4>
		__ticks = 1;
    5c88:	fe 01       	movw	r30, r28
    5c8a:	e5 5b       	subi	r30, 0xB5	; 181
    5c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	91 83       	std	Z+1, r25	; 0x01
    5c94:	80 83       	st	Z, r24
    5c96:	64 c0       	rjmp	.+200    	; 0x5d60 <SevenSegment_FromAToH+0x48c>
	else if (__tmp > 65535)
    5c98:	fe 01       	movw	r30, r28
    5c9a:	e3 5b       	subi	r30, 0xB3	; 179
    5c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9e:	60 81       	ld	r22, Z
    5ca0:	71 81       	ldd	r23, Z+1	; 0x01
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	3f ef       	ldi	r19, 0xFF	; 255
    5caa:	4f e7       	ldi	r20, 0x7F	; 127
    5cac:	57 e4       	ldi	r21, 0x47	; 71
    5cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5cb2:	18 16       	cp	r1, r24
    5cb4:	0c f0       	brlt	.+2      	; 0x5cb8 <SevenSegment_FromAToH+0x3e4>
    5cb6:	43 c0       	rjmp	.+134    	; 0x5d3e <SevenSegment_FromAToH+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cb8:	fe 01       	movw	r30, r28
    5cba:	ef 5a       	subi	r30, 0xAF	; 175
    5cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cbe:	60 81       	ld	r22, Z
    5cc0:	71 81       	ldd	r23, Z+1	; 0x01
    5cc2:	82 81       	ldd	r24, Z+2	; 0x02
    5cc4:	93 81       	ldd	r25, Z+3	; 0x03
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	40 e2       	ldi	r20, 0x20	; 32
    5ccc:	51 e4       	ldi	r21, 0x41	; 65
    5cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	8e 01       	movw	r16, r28
    5cd8:	05 5b       	subi	r16, 0xB5	; 181
    5cda:	1f 4f       	sbci	r17, 0xFF	; 255
    5cdc:	bc 01       	movw	r22, r24
    5cde:	cd 01       	movw	r24, r26
    5ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	cb 01       	movw	r24, r22
    5ce8:	f8 01       	movw	r30, r16
    5cea:	91 83       	std	Z+1, r25	; 0x01
    5cec:	80 83       	st	Z, r24
    5cee:	1f c0       	rjmp	.+62     	; 0x5d2e <SevenSegment_FromAToH+0x45a>
    5cf0:	fe 01       	movw	r30, r28
    5cf2:	e7 5b       	subi	r30, 0xB7	; 183
    5cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf6:	80 e9       	ldi	r24, 0x90	; 144
    5cf8:	91 e0       	ldi	r25, 0x01	; 1
    5cfa:	91 83       	std	Z+1, r25	; 0x01
    5cfc:	80 83       	st	Z, r24
    5cfe:	fe 01       	movw	r30, r28
    5d00:	e7 5b       	subi	r30, 0xB7	; 183
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	80 81       	ld	r24, Z
    5d06:	91 81       	ldd	r25, Z+1	; 0x01
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <SevenSegment_FromAToH+0x434>
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	e7 5b       	subi	r30, 0xB7	; 183
    5d10:	ff 4f       	sbci	r31, 0xFF	; 255
    5d12:	91 83       	std	Z+1, r25	; 0x01
    5d14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d16:	de 01       	movw	r26, r28
    5d18:	a5 5b       	subi	r26, 0xB5	; 181
    5d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    5d1c:	fe 01       	movw	r30, r28
    5d1e:	e5 5b       	subi	r30, 0xB5	; 181
    5d20:	ff 4f       	sbci	r31, 0xFF	; 255
    5d22:	80 81       	ld	r24, Z
    5d24:	91 81       	ldd	r25, Z+1	; 0x01
    5d26:	01 97       	sbiw	r24, 0x01	; 1
    5d28:	11 96       	adiw	r26, 0x01	; 1
    5d2a:	9c 93       	st	X, r25
    5d2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d2e:	fe 01       	movw	r30, r28
    5d30:	e5 5b       	subi	r30, 0xB5	; 181
    5d32:	ff 4f       	sbci	r31, 0xFF	; 255
    5d34:	80 81       	ld	r24, Z
    5d36:	91 81       	ldd	r25, Z+1	; 0x01
    5d38:	00 97       	sbiw	r24, 0x00	; 0
    5d3a:	d1 f6       	brne	.-76     	; 0x5cf0 <SevenSegment_FromAToH+0x41c>
    5d3c:	27 c0       	rjmp	.+78     	; 0x5d8c <SevenSegment_FromAToH+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d3e:	8e 01       	movw	r16, r28
    5d40:	05 5b       	subi	r16, 0xB5	; 181
    5d42:	1f 4f       	sbci	r17, 0xFF	; 255
    5d44:	fe 01       	movw	r30, r28
    5d46:	e3 5b       	subi	r30, 0xB3	; 179
    5d48:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4a:	60 81       	ld	r22, Z
    5d4c:	71 81       	ldd	r23, Z+1	; 0x01
    5d4e:	82 81       	ldd	r24, Z+2	; 0x02
    5d50:	93 81       	ldd	r25, Z+3	; 0x03
    5d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d56:	dc 01       	movw	r26, r24
    5d58:	cb 01       	movw	r24, r22
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	80 83       	st	Z, r24
    5d60:	de 01       	movw	r26, r28
    5d62:	a9 5b       	subi	r26, 0xB9	; 185
    5d64:	bf 4f       	sbci	r27, 0xFF	; 255
    5d66:	fe 01       	movw	r30, r28
    5d68:	e5 5b       	subi	r30, 0xB5	; 181
    5d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6c:	80 81       	ld	r24, Z
    5d6e:	91 81       	ldd	r25, Z+1	; 0x01
    5d70:	8d 93       	st	X+, r24
    5d72:	9c 93       	st	X, r25
    5d74:	fe 01       	movw	r30, r28
    5d76:	e9 5b       	subi	r30, 0xB9	; 185
    5d78:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7a:	80 81       	ld	r24, Z
    5d7c:	91 81       	ldd	r25, Z+1	; 0x01
    5d7e:	01 97       	sbiw	r24, 0x01	; 1
    5d80:	f1 f7       	brne	.-4      	; 0x5d7e <SevenSegment_FromAToH+0x4aa>
    5d82:	fe 01       	movw	r30, r28
    5d84:	e9 5b       	subi	r30, 0xB9	; 185
    5d86:	ff 4f       	sbci	r31, 0xFF	; 255
    5d88:	91 83       	std	Z+1, r25	; 0x01
    5d8a:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 1, 1, 0, 1); // D
    5d8c:	fe 01       	movw	r30, r28
    5d8e:	ef 58       	subi	r30, 0x8F	; 143
    5d90:	ff 4f       	sbci	r31, 0xFF	; 255
    5d92:	80 81       	ld	r24, Z
    5d94:	60 e0       	ldi	r22, 0x00	; 0
    5d96:	41 e0       	ldi	r20, 0x01	; 1
    5d98:	21 e0       	ldi	r18, 0x01	; 1
    5d9a:	01 e0       	ldi	r16, 0x01	; 1
    5d9c:	ee 24       	eor	r14, r14
    5d9e:	e3 94       	inc	r14
    5da0:	cc 24       	eor	r12, r12
    5da2:	aa 24       	eor	r10, r10
    5da4:	a3 94       	inc	r10
    5da6:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    5daa:	fe 01       	movw	r30, r28
    5dac:	ed 5b       	subi	r30, 0xBD	; 189
    5dae:	ff 4f       	sbci	r31, 0xFF	; 255
    5db0:	80 e0       	ldi	r24, 0x00	; 0
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	a8 e4       	ldi	r26, 0x48	; 72
    5db6:	b2 e4       	ldi	r27, 0x42	; 66
    5db8:	80 83       	st	Z, r24
    5dba:	91 83       	std	Z+1, r25	; 0x01
    5dbc:	a2 83       	std	Z+2, r26	; 0x02
    5dbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dc0:	8e 01       	movw	r16, r28
    5dc2:	01 5c       	subi	r16, 0xC1	; 193
    5dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc6:	fe 01       	movw	r30, r28
    5dc8:	ed 5b       	subi	r30, 0xBD	; 189
    5dca:	ff 4f       	sbci	r31, 0xFF	; 255
    5dcc:	60 81       	ld	r22, Z
    5dce:	71 81       	ldd	r23, Z+1	; 0x01
    5dd0:	82 81       	ldd	r24, Z+2	; 0x02
    5dd2:	93 81       	ldd	r25, Z+3	; 0x03
    5dd4:	20 e0       	ldi	r18, 0x00	; 0
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	4a e7       	ldi	r20, 0x7A	; 122
    5dda:	55 e4       	ldi	r21, 0x45	; 69
    5ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5de0:	dc 01       	movw	r26, r24
    5de2:	cb 01       	movw	r24, r22
    5de4:	f8 01       	movw	r30, r16
    5de6:	80 83       	st	Z, r24
    5de8:	91 83       	std	Z+1, r25	; 0x01
    5dea:	a2 83       	std	Z+2, r26	; 0x02
    5dec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dee:	fe 01       	movw	r30, r28
    5df0:	ff 96       	adiw	r30, 0x3f	; 63
    5df2:	60 81       	ld	r22, Z
    5df4:	71 81       	ldd	r23, Z+1	; 0x01
    5df6:	82 81       	ldd	r24, Z+2	; 0x02
    5df8:	93 81       	ldd	r25, Z+3	; 0x03
    5dfa:	20 e0       	ldi	r18, 0x00	; 0
    5dfc:	30 e0       	ldi	r19, 0x00	; 0
    5dfe:	40 e8       	ldi	r20, 0x80	; 128
    5e00:	5f e3       	ldi	r21, 0x3F	; 63
    5e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e06:	88 23       	and	r24, r24
    5e08:	2c f4       	brge	.+10     	; 0x5e14 <SevenSegment_FromAToH+0x540>
		__ticks = 1;
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	9e af       	std	Y+62, r25	; 0x3e
    5e10:	8d af       	std	Y+61, r24	; 0x3d
    5e12:	46 c0       	rjmp	.+140    	; 0x5ea0 <SevenSegment_FromAToH+0x5cc>
	else if (__tmp > 65535)
    5e14:	fe 01       	movw	r30, r28
    5e16:	ff 96       	adiw	r30, 0x3f	; 63
    5e18:	60 81       	ld	r22, Z
    5e1a:	71 81       	ldd	r23, Z+1	; 0x01
    5e1c:	82 81       	ldd	r24, Z+2	; 0x02
    5e1e:	93 81       	ldd	r25, Z+3	; 0x03
    5e20:	20 e0       	ldi	r18, 0x00	; 0
    5e22:	3f ef       	ldi	r19, 0xFF	; 255
    5e24:	4f e7       	ldi	r20, 0x7F	; 127
    5e26:	57 e4       	ldi	r21, 0x47	; 71
    5e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e2c:	18 16       	cp	r1, r24
    5e2e:	64 f5       	brge	.+88     	; 0x5e88 <SevenSegment_FromAToH+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e30:	fe 01       	movw	r30, r28
    5e32:	ed 5b       	subi	r30, 0xBD	; 189
    5e34:	ff 4f       	sbci	r31, 0xFF	; 255
    5e36:	60 81       	ld	r22, Z
    5e38:	71 81       	ldd	r23, Z+1	; 0x01
    5e3a:	82 81       	ldd	r24, Z+2	; 0x02
    5e3c:	93 81       	ldd	r25, Z+3	; 0x03
    5e3e:	20 e0       	ldi	r18, 0x00	; 0
    5e40:	30 e0       	ldi	r19, 0x00	; 0
    5e42:	40 e2       	ldi	r20, 0x20	; 32
    5e44:	51 e4       	ldi	r21, 0x41	; 65
    5e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e4a:	dc 01       	movw	r26, r24
    5e4c:	cb 01       	movw	r24, r22
    5e4e:	bc 01       	movw	r22, r24
    5e50:	cd 01       	movw	r24, r26
    5e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e56:	dc 01       	movw	r26, r24
    5e58:	cb 01       	movw	r24, r22
    5e5a:	9e af       	std	Y+62, r25	; 0x3e
    5e5c:	8d af       	std	Y+61, r24	; 0x3d
    5e5e:	0f c0       	rjmp	.+30     	; 0x5e7e <SevenSegment_FromAToH+0x5aa>
    5e60:	80 e9       	ldi	r24, 0x90	; 144
    5e62:	91 e0       	ldi	r25, 0x01	; 1
    5e64:	9c af       	std	Y+60, r25	; 0x3c
    5e66:	8b af       	std	Y+59, r24	; 0x3b
    5e68:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e6c:	01 97       	sbiw	r24, 0x01	; 1
    5e6e:	f1 f7       	brne	.-4      	; 0x5e6c <SevenSegment_FromAToH+0x598>
    5e70:	9c af       	std	Y+60, r25	; 0x3c
    5e72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e74:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e76:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e78:	01 97       	sbiw	r24, 0x01	; 1
    5e7a:	9e af       	std	Y+62, r25	; 0x3e
    5e7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e80:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e82:	00 97       	sbiw	r24, 0x00	; 0
    5e84:	69 f7       	brne	.-38     	; 0x5e60 <SevenSegment_FromAToH+0x58c>
    5e86:	16 c0       	rjmp	.+44     	; 0x5eb4 <SevenSegment_FromAToH+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e88:	fe 01       	movw	r30, r28
    5e8a:	ff 96       	adiw	r30, 0x3f	; 63
    5e8c:	60 81       	ld	r22, Z
    5e8e:	71 81       	ldd	r23, Z+1	; 0x01
    5e90:	82 81       	ldd	r24, Z+2	; 0x02
    5e92:	93 81       	ldd	r25, Z+3	; 0x03
    5e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e98:	dc 01       	movw	r26, r24
    5e9a:	cb 01       	movw	r24, r22
    5e9c:	9e af       	std	Y+62, r25	; 0x3e
    5e9e:	8d af       	std	Y+61, r24	; 0x3d
    5ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ea4:	9a af       	std	Y+58, r25	; 0x3a
    5ea6:	89 af       	std	Y+57, r24	; 0x39
    5ea8:	89 ad       	ldd	r24, Y+57	; 0x39
    5eaa:	9a ad       	ldd	r25, Y+58	; 0x3a
    5eac:	01 97       	sbiw	r24, 0x01	; 1
    5eae:	f1 f7       	brne	.-4      	; 0x5eac <SevenSegment_FromAToH+0x5d8>
    5eb0:	9a af       	std	Y+58, r25	; 0x3a
    5eb2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 1); // E
    5eb4:	fe 01       	movw	r30, r28
    5eb6:	ef 58       	subi	r30, 0x8F	; 143
    5eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eba:	80 81       	ld	r24, Z
    5ebc:	61 e0       	ldi	r22, 0x01	; 1
    5ebe:	40 e0       	ldi	r20, 0x00	; 0
    5ec0:	20 e0       	ldi	r18, 0x00	; 0
    5ec2:	01 e0       	ldi	r16, 0x01	; 1
    5ec4:	ee 24       	eor	r14, r14
    5ec6:	e3 94       	inc	r14
    5ec8:	cc 24       	eor	r12, r12
    5eca:	c3 94       	inc	r12
    5ecc:	aa 24       	eor	r10, r10
    5ece:	a3 94       	inc	r10
    5ed0:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	a8 e4       	ldi	r26, 0x48	; 72
    5eda:	b2 e4       	ldi	r27, 0x42	; 66
    5edc:	8d ab       	std	Y+53, r24	; 0x35
    5ede:	9e ab       	std	Y+54, r25	; 0x36
    5ee0:	af ab       	std	Y+55, r26	; 0x37
    5ee2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    5ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    5ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    5eea:	98 ad       	ldd	r25, Y+56	; 0x38
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	4a e7       	ldi	r20, 0x7A	; 122
    5ef2:	55 e4       	ldi	r21, 0x45	; 69
    5ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ef8:	dc 01       	movw	r26, r24
    5efa:	cb 01       	movw	r24, r22
    5efc:	89 ab       	std	Y+49, r24	; 0x31
    5efe:	9a ab       	std	Y+50, r25	; 0x32
    5f00:	ab ab       	std	Y+51, r26	; 0x33
    5f02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f04:	69 a9       	ldd	r22, Y+49	; 0x31
    5f06:	7a a9       	ldd	r23, Y+50	; 0x32
    5f08:	8b a9       	ldd	r24, Y+51	; 0x33
    5f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    5f0c:	20 e0       	ldi	r18, 0x00	; 0
    5f0e:	30 e0       	ldi	r19, 0x00	; 0
    5f10:	40 e8       	ldi	r20, 0x80	; 128
    5f12:	5f e3       	ldi	r21, 0x3F	; 63
    5f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5f18:	88 23       	and	r24, r24
    5f1a:	2c f4       	brge	.+10     	; 0x5f26 <SevenSegment_FromAToH+0x652>
		__ticks = 1;
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	98 ab       	std	Y+48, r25	; 0x30
    5f22:	8f a7       	std	Y+47, r24	; 0x2f
    5f24:	3f c0       	rjmp	.+126    	; 0x5fa4 <SevenSegment_FromAToH+0x6d0>
	else if (__tmp > 65535)
    5f26:	69 a9       	ldd	r22, Y+49	; 0x31
    5f28:	7a a9       	ldd	r23, Y+50	; 0x32
    5f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    5f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    5f2e:	20 e0       	ldi	r18, 0x00	; 0
    5f30:	3f ef       	ldi	r19, 0xFF	; 255
    5f32:	4f e7       	ldi	r20, 0x7F	; 127
    5f34:	57 e4       	ldi	r21, 0x47	; 71
    5f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f3a:	18 16       	cp	r1, r24
    5f3c:	4c f5       	brge	.+82     	; 0x5f90 <SevenSegment_FromAToH+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    5f40:	7e a9       	ldd	r23, Y+54	; 0x36
    5f42:	8f a9       	ldd	r24, Y+55	; 0x37
    5f44:	98 ad       	ldd	r25, Y+56	; 0x38
    5f46:	20 e0       	ldi	r18, 0x00	; 0
    5f48:	30 e0       	ldi	r19, 0x00	; 0
    5f4a:	40 e2       	ldi	r20, 0x20	; 32
    5f4c:	51 e4       	ldi	r21, 0x41	; 65
    5f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f52:	dc 01       	movw	r26, r24
    5f54:	cb 01       	movw	r24, r22
    5f56:	bc 01       	movw	r22, r24
    5f58:	cd 01       	movw	r24, r26
    5f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f5e:	dc 01       	movw	r26, r24
    5f60:	cb 01       	movw	r24, r22
    5f62:	98 ab       	std	Y+48, r25	; 0x30
    5f64:	8f a7       	std	Y+47, r24	; 0x2f
    5f66:	0f c0       	rjmp	.+30     	; 0x5f86 <SevenSegment_FromAToH+0x6b2>
    5f68:	80 e9       	ldi	r24, 0x90	; 144
    5f6a:	91 e0       	ldi	r25, 0x01	; 1
    5f6c:	9e a7       	std	Y+46, r25	; 0x2e
    5f6e:	8d a7       	std	Y+45, r24	; 0x2d
    5f70:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f72:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f74:	01 97       	sbiw	r24, 0x01	; 1
    5f76:	f1 f7       	brne	.-4      	; 0x5f74 <SevenSegment_FromAToH+0x6a0>
    5f78:	9e a7       	std	Y+46, r25	; 0x2e
    5f7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f7e:	98 a9       	ldd	r25, Y+48	; 0x30
    5f80:	01 97       	sbiw	r24, 0x01	; 1
    5f82:	98 ab       	std	Y+48, r25	; 0x30
    5f84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f88:	98 a9       	ldd	r25, Y+48	; 0x30
    5f8a:	00 97       	sbiw	r24, 0x00	; 0
    5f8c:	69 f7       	brne	.-38     	; 0x5f68 <SevenSegment_FromAToH+0x694>
    5f8e:	14 c0       	rjmp	.+40     	; 0x5fb8 <SevenSegment_FromAToH+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f90:	69 a9       	ldd	r22, Y+49	; 0x31
    5f92:	7a a9       	ldd	r23, Y+50	; 0x32
    5f94:	8b a9       	ldd	r24, Y+51	; 0x33
    5f96:	9c a9       	ldd	r25, Y+52	; 0x34
    5f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	98 ab       	std	Y+48, r25	; 0x30
    5fa2:	8f a7       	std	Y+47, r24	; 0x2f
    5fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    5fa8:	9c a7       	std	Y+44, r25	; 0x2c
    5faa:	8b a7       	std	Y+43, r24	; 0x2b
    5fac:	8b a5       	ldd	r24, Y+43	; 0x2b
    5fae:	9c a5       	ldd	r25, Y+44	; 0x2c
    5fb0:	01 97       	sbiw	r24, 0x01	; 1
    5fb2:	f1 f7       	brne	.-4      	; 0x5fb0 <SevenSegment_FromAToH+0x6dc>
    5fb4:	9c a7       	std	Y+44, r25	; 0x2c
    5fb6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 0, 1, 1, 1); // F
    5fb8:	fe 01       	movw	r30, r28
    5fba:	ef 58       	subi	r30, 0x8F	; 143
    5fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fbe:	80 81       	ld	r24, Z
    5fc0:	61 e0       	ldi	r22, 0x01	; 1
    5fc2:	40 e0       	ldi	r20, 0x00	; 0
    5fc4:	20 e0       	ldi	r18, 0x00	; 0
    5fc6:	00 e0       	ldi	r16, 0x00	; 0
    5fc8:	ee 24       	eor	r14, r14
    5fca:	e3 94       	inc	r14
    5fcc:	cc 24       	eor	r12, r12
    5fce:	c3 94       	inc	r12
    5fd0:	aa 24       	eor	r10, r10
    5fd2:	a3 94       	inc	r10
    5fd4:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    5fd8:	80 e0       	ldi	r24, 0x00	; 0
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	a8 e4       	ldi	r26, 0x48	; 72
    5fde:	b2 e4       	ldi	r27, 0x42	; 66
    5fe0:	8f a3       	std	Y+39, r24	; 0x27
    5fe2:	98 a7       	std	Y+40, r25	; 0x28
    5fe4:	a9 a7       	std	Y+41, r26	; 0x29
    5fe6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fe8:	6f a1       	ldd	r22, Y+39	; 0x27
    5fea:	78 a5       	ldd	r23, Y+40	; 0x28
    5fec:	89 a5       	ldd	r24, Y+41	; 0x29
    5fee:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ff0:	20 e0       	ldi	r18, 0x00	; 0
    5ff2:	30 e0       	ldi	r19, 0x00	; 0
    5ff4:	4a e7       	ldi	r20, 0x7A	; 122
    5ff6:	55 e4       	ldi	r21, 0x45	; 69
    5ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffc:	dc 01       	movw	r26, r24
    5ffe:	cb 01       	movw	r24, r22
    6000:	8b a3       	std	Y+35, r24	; 0x23
    6002:	9c a3       	std	Y+36, r25	; 0x24
    6004:	ad a3       	std	Y+37, r26	; 0x25
    6006:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6008:	6b a1       	ldd	r22, Y+35	; 0x23
    600a:	7c a1       	ldd	r23, Y+36	; 0x24
    600c:	8d a1       	ldd	r24, Y+37	; 0x25
    600e:	9e a1       	ldd	r25, Y+38	; 0x26
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	40 e8       	ldi	r20, 0x80	; 128
    6016:	5f e3       	ldi	r21, 0x3F	; 63
    6018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    601c:	88 23       	and	r24, r24
    601e:	2c f4       	brge	.+10     	; 0x602a <SevenSegment_FromAToH+0x756>
		__ticks = 1;
    6020:	81 e0       	ldi	r24, 0x01	; 1
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	9a a3       	std	Y+34, r25	; 0x22
    6026:	89 a3       	std	Y+33, r24	; 0x21
    6028:	3f c0       	rjmp	.+126    	; 0x60a8 <SevenSegment_FromAToH+0x7d4>
	else if (__tmp > 65535)
    602a:	6b a1       	ldd	r22, Y+35	; 0x23
    602c:	7c a1       	ldd	r23, Y+36	; 0x24
    602e:	8d a1       	ldd	r24, Y+37	; 0x25
    6030:	9e a1       	ldd	r25, Y+38	; 0x26
    6032:	20 e0       	ldi	r18, 0x00	; 0
    6034:	3f ef       	ldi	r19, 0xFF	; 255
    6036:	4f e7       	ldi	r20, 0x7F	; 127
    6038:	57 e4       	ldi	r21, 0x47	; 71
    603a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    603e:	18 16       	cp	r1, r24
    6040:	4c f5       	brge	.+82     	; 0x6094 <SevenSegment_FromAToH+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6042:	6f a1       	ldd	r22, Y+39	; 0x27
    6044:	78 a5       	ldd	r23, Y+40	; 0x28
    6046:	89 a5       	ldd	r24, Y+41	; 0x29
    6048:	9a a5       	ldd	r25, Y+42	; 0x2a
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	40 e2       	ldi	r20, 0x20	; 32
    6050:	51 e4       	ldi	r21, 0x41	; 65
    6052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6056:	dc 01       	movw	r26, r24
    6058:	cb 01       	movw	r24, r22
    605a:	bc 01       	movw	r22, r24
    605c:	cd 01       	movw	r24, r26
    605e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6062:	dc 01       	movw	r26, r24
    6064:	cb 01       	movw	r24, r22
    6066:	9a a3       	std	Y+34, r25	; 0x22
    6068:	89 a3       	std	Y+33, r24	; 0x21
    606a:	0f c0       	rjmp	.+30     	; 0x608a <SevenSegment_FromAToH+0x7b6>
    606c:	80 e9       	ldi	r24, 0x90	; 144
    606e:	91 e0       	ldi	r25, 0x01	; 1
    6070:	98 a3       	std	Y+32, r25	; 0x20
    6072:	8f 8f       	std	Y+31, r24	; 0x1f
    6074:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6076:	98 a1       	ldd	r25, Y+32	; 0x20
    6078:	01 97       	sbiw	r24, 0x01	; 1
    607a:	f1 f7       	brne	.-4      	; 0x6078 <SevenSegment_FromAToH+0x7a4>
    607c:	98 a3       	std	Y+32, r25	; 0x20
    607e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6080:	89 a1       	ldd	r24, Y+33	; 0x21
    6082:	9a a1       	ldd	r25, Y+34	; 0x22
    6084:	01 97       	sbiw	r24, 0x01	; 1
    6086:	9a a3       	std	Y+34, r25	; 0x22
    6088:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    608a:	89 a1       	ldd	r24, Y+33	; 0x21
    608c:	9a a1       	ldd	r25, Y+34	; 0x22
    608e:	00 97       	sbiw	r24, 0x00	; 0
    6090:	69 f7       	brne	.-38     	; 0x606c <SevenSegment_FromAToH+0x798>
    6092:	14 c0       	rjmp	.+40     	; 0x60bc <SevenSegment_FromAToH+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6094:	6b a1       	ldd	r22, Y+35	; 0x23
    6096:	7c a1       	ldd	r23, Y+36	; 0x24
    6098:	8d a1       	ldd	r24, Y+37	; 0x25
    609a:	9e a1       	ldd	r25, Y+38	; 0x26
    609c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	9a a3       	std	Y+34, r25	; 0x22
    60a6:	89 a3       	std	Y+33, r24	; 0x21
    60a8:	89 a1       	ldd	r24, Y+33	; 0x21
    60aa:	9a a1       	ldd	r25, Y+34	; 0x22
    60ac:	9e 8f       	std	Y+30, r25	; 0x1e
    60ae:	8d 8f       	std	Y+29, r24	; 0x1d
    60b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    60b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    60b4:	01 97       	sbiw	r24, 0x01	; 1
    60b6:	f1 f7       	brne	.-4      	; 0x60b4 <SevenSegment_FromAToH+0x7e0>
    60b8:	9e 8f       	std	Y+30, r25	; 0x1e
    60ba:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 0); // G
    60bc:	fe 01       	movw	r30, r28
    60be:	ef 58       	subi	r30, 0x8F	; 143
    60c0:	ff 4f       	sbci	r31, 0xFF	; 255
    60c2:	80 81       	ld	r24, Z
    60c4:	61 e0       	ldi	r22, 0x01	; 1
    60c6:	40 e0       	ldi	r20, 0x00	; 0
    60c8:	21 e0       	ldi	r18, 0x01	; 1
    60ca:	01 e0       	ldi	r16, 0x01	; 1
    60cc:	ee 24       	eor	r14, r14
    60ce:	e3 94       	inc	r14
    60d0:	cc 24       	eor	r12, r12
    60d2:	c3 94       	inc	r12
    60d4:	aa 24       	eor	r10, r10
    60d6:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	a8 e4       	ldi	r26, 0x48	; 72
    60e0:	b2 e4       	ldi	r27, 0x42	; 66
    60e2:	89 8f       	std	Y+25, r24	; 0x19
    60e4:	9a 8f       	std	Y+26, r25	; 0x1a
    60e6:	ab 8f       	std	Y+27, r26	; 0x1b
    60e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ea:	69 8d       	ldd	r22, Y+25	; 0x19
    60ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	4a e7       	ldi	r20, 0x7A	; 122
    60f8:	55 e4       	ldi	r21, 0x45	; 69
    60fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60fe:	dc 01       	movw	r26, r24
    6100:	cb 01       	movw	r24, r22
    6102:	8d 8b       	std	Y+21, r24	; 0x15
    6104:	9e 8b       	std	Y+22, r25	; 0x16
    6106:	af 8b       	std	Y+23, r26	; 0x17
    6108:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    610a:	6d 89       	ldd	r22, Y+21	; 0x15
    610c:	7e 89       	ldd	r23, Y+22	; 0x16
    610e:	8f 89       	ldd	r24, Y+23	; 0x17
    6110:	98 8d       	ldd	r25, Y+24	; 0x18
    6112:	20 e0       	ldi	r18, 0x00	; 0
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	40 e8       	ldi	r20, 0x80	; 128
    6118:	5f e3       	ldi	r21, 0x3F	; 63
    611a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    611e:	88 23       	and	r24, r24
    6120:	2c f4       	brge	.+10     	; 0x612c <SevenSegment_FromAToH+0x858>
		__ticks = 1;
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	9c 8b       	std	Y+20, r25	; 0x14
    6128:	8b 8b       	std	Y+19, r24	; 0x13
    612a:	3f c0       	rjmp	.+126    	; 0x61aa <SevenSegment_FromAToH+0x8d6>
	else if (__tmp > 65535)
    612c:	6d 89       	ldd	r22, Y+21	; 0x15
    612e:	7e 89       	ldd	r23, Y+22	; 0x16
    6130:	8f 89       	ldd	r24, Y+23	; 0x17
    6132:	98 8d       	ldd	r25, Y+24	; 0x18
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	3f ef       	ldi	r19, 0xFF	; 255
    6138:	4f e7       	ldi	r20, 0x7F	; 127
    613a:	57 e4       	ldi	r21, 0x47	; 71
    613c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6140:	18 16       	cp	r1, r24
    6142:	4c f5       	brge	.+82     	; 0x6196 <SevenSegment_FromAToH+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6144:	69 8d       	ldd	r22, Y+25	; 0x19
    6146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    614a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    614c:	20 e0       	ldi	r18, 0x00	; 0
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	40 e2       	ldi	r20, 0x20	; 32
    6152:	51 e4       	ldi	r21, 0x41	; 65
    6154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6158:	dc 01       	movw	r26, r24
    615a:	cb 01       	movw	r24, r22
    615c:	bc 01       	movw	r22, r24
    615e:	cd 01       	movw	r24, r26
    6160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6164:	dc 01       	movw	r26, r24
    6166:	cb 01       	movw	r24, r22
    6168:	9c 8b       	std	Y+20, r25	; 0x14
    616a:	8b 8b       	std	Y+19, r24	; 0x13
    616c:	0f c0       	rjmp	.+30     	; 0x618c <SevenSegment_FromAToH+0x8b8>
    616e:	80 e9       	ldi	r24, 0x90	; 144
    6170:	91 e0       	ldi	r25, 0x01	; 1
    6172:	9a 8b       	std	Y+18, r25	; 0x12
    6174:	89 8b       	std	Y+17, r24	; 0x11
    6176:	89 89       	ldd	r24, Y+17	; 0x11
    6178:	9a 89       	ldd	r25, Y+18	; 0x12
    617a:	01 97       	sbiw	r24, 0x01	; 1
    617c:	f1 f7       	brne	.-4      	; 0x617a <SevenSegment_FromAToH+0x8a6>
    617e:	9a 8b       	std	Y+18, r25	; 0x12
    6180:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6182:	8b 89       	ldd	r24, Y+19	; 0x13
    6184:	9c 89       	ldd	r25, Y+20	; 0x14
    6186:	01 97       	sbiw	r24, 0x01	; 1
    6188:	9c 8b       	std	Y+20, r25	; 0x14
    618a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    618c:	8b 89       	ldd	r24, Y+19	; 0x13
    618e:	9c 89       	ldd	r25, Y+20	; 0x14
    6190:	00 97       	sbiw	r24, 0x00	; 0
    6192:	69 f7       	brne	.-38     	; 0x616e <SevenSegment_FromAToH+0x89a>
    6194:	14 c0       	rjmp	.+40     	; 0x61be <SevenSegment_FromAToH+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6196:	6d 89       	ldd	r22, Y+21	; 0x15
    6198:	7e 89       	ldd	r23, Y+22	; 0x16
    619a:	8f 89       	ldd	r24, Y+23	; 0x17
    619c:	98 8d       	ldd	r25, Y+24	; 0x18
    619e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61a2:	dc 01       	movw	r26, r24
    61a4:	cb 01       	movw	r24, r22
    61a6:	9c 8b       	std	Y+20, r25	; 0x14
    61a8:	8b 8b       	std	Y+19, r24	; 0x13
    61aa:	8b 89       	ldd	r24, Y+19	; 0x13
    61ac:	9c 89       	ldd	r25, Y+20	; 0x14
    61ae:	98 8b       	std	Y+16, r25	; 0x10
    61b0:	8f 87       	std	Y+15, r24	; 0x0f
    61b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    61b4:	98 89       	ldd	r25, Y+16	; 0x10
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	f1 f7       	brne	.-4      	; 0x61b6 <SevenSegment_FromAToH+0x8e2>
    61ba:	98 8b       	std	Y+16, r25	; 0x10
    61bc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 1, 1, 1); // H
    61be:	fe 01       	movw	r30, r28
    61c0:	ef 58       	subi	r30, 0x8F	; 143
    61c2:	ff 4f       	sbci	r31, 0xFF	; 255
    61c4:	80 81       	ld	r24, Z
    61c6:	60 e0       	ldi	r22, 0x00	; 0
    61c8:	41 e0       	ldi	r20, 0x01	; 1
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	00 e0       	ldi	r16, 0x00	; 0
    61ce:	ee 24       	eor	r14, r14
    61d0:	e3 94       	inc	r14
    61d2:	cc 24       	eor	r12, r12
    61d4:	c3 94       	inc	r12
    61d6:	aa 24       	eor	r10, r10
    61d8:	a3 94       	inc	r10
    61da:	0e 94 b6 23 	call	0x476c	; 0x476c <SevenSegment_Display>
    61de:	80 e0       	ldi	r24, 0x00	; 0
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	a8 e4       	ldi	r26, 0x48	; 72
    61e4:	b2 e4       	ldi	r27, 0x42	; 66
    61e6:	8b 87       	std	Y+11, r24	; 0x0b
    61e8:	9c 87       	std	Y+12, r25	; 0x0c
    61ea:	ad 87       	std	Y+13, r26	; 0x0d
    61ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    61f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    61f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    61f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    61f6:	20 e0       	ldi	r18, 0x00	; 0
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	4a e7       	ldi	r20, 0x7A	; 122
    61fc:	55 e4       	ldi	r21, 0x45	; 69
    61fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6202:	dc 01       	movw	r26, r24
    6204:	cb 01       	movw	r24, r22
    6206:	8f 83       	std	Y+7, r24	; 0x07
    6208:	98 87       	std	Y+8, r25	; 0x08
    620a:	a9 87       	std	Y+9, r26	; 0x09
    620c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    620e:	6f 81       	ldd	r22, Y+7	; 0x07
    6210:	78 85       	ldd	r23, Y+8	; 0x08
    6212:	89 85       	ldd	r24, Y+9	; 0x09
    6214:	9a 85       	ldd	r25, Y+10	; 0x0a
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	40 e8       	ldi	r20, 0x80	; 128
    621c:	5f e3       	ldi	r21, 0x3F	; 63
    621e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6222:	88 23       	and	r24, r24
    6224:	2c f4       	brge	.+10     	; 0x6230 <SevenSegment_FromAToH+0x95c>
		__ticks = 1;
    6226:	81 e0       	ldi	r24, 0x01	; 1
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	9e 83       	std	Y+6, r25	; 0x06
    622c:	8d 83       	std	Y+5, r24	; 0x05
    622e:	3f c0       	rjmp	.+126    	; 0x62ae <SevenSegment_FromAToH+0x9da>
	else if (__tmp > 65535)
    6230:	6f 81       	ldd	r22, Y+7	; 0x07
    6232:	78 85       	ldd	r23, Y+8	; 0x08
    6234:	89 85       	ldd	r24, Y+9	; 0x09
    6236:	9a 85       	ldd	r25, Y+10	; 0x0a
    6238:	20 e0       	ldi	r18, 0x00	; 0
    623a:	3f ef       	ldi	r19, 0xFF	; 255
    623c:	4f e7       	ldi	r20, 0x7F	; 127
    623e:	57 e4       	ldi	r21, 0x47	; 71
    6240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6244:	18 16       	cp	r1, r24
    6246:	4c f5       	brge	.+82     	; 0x629a <SevenSegment_FromAToH+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6248:	6b 85       	ldd	r22, Y+11	; 0x0b
    624a:	7c 85       	ldd	r23, Y+12	; 0x0c
    624c:	8d 85       	ldd	r24, Y+13	; 0x0d
    624e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	40 e2       	ldi	r20, 0x20	; 32
    6256:	51 e4       	ldi	r21, 0x41	; 65
    6258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    625c:	dc 01       	movw	r26, r24
    625e:	cb 01       	movw	r24, r22
    6260:	bc 01       	movw	r22, r24
    6262:	cd 01       	movw	r24, r26
    6264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6268:	dc 01       	movw	r26, r24
    626a:	cb 01       	movw	r24, r22
    626c:	9e 83       	std	Y+6, r25	; 0x06
    626e:	8d 83       	std	Y+5, r24	; 0x05
    6270:	0f c0       	rjmp	.+30     	; 0x6290 <SevenSegment_FromAToH+0x9bc>
    6272:	80 e9       	ldi	r24, 0x90	; 144
    6274:	91 e0       	ldi	r25, 0x01	; 1
    6276:	9c 83       	std	Y+4, r25	; 0x04
    6278:	8b 83       	std	Y+3, r24	; 0x03
    627a:	8b 81       	ldd	r24, Y+3	; 0x03
    627c:	9c 81       	ldd	r25, Y+4	; 0x04
    627e:	01 97       	sbiw	r24, 0x01	; 1
    6280:	f1 f7       	brne	.-4      	; 0x627e <SevenSegment_FromAToH+0x9aa>
    6282:	9c 83       	std	Y+4, r25	; 0x04
    6284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6286:	8d 81       	ldd	r24, Y+5	; 0x05
    6288:	9e 81       	ldd	r25, Y+6	; 0x06
    628a:	01 97       	sbiw	r24, 0x01	; 1
    628c:	9e 83       	std	Y+6, r25	; 0x06
    628e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6290:	8d 81       	ldd	r24, Y+5	; 0x05
    6292:	9e 81       	ldd	r25, Y+6	; 0x06
    6294:	00 97       	sbiw	r24, 0x00	; 0
    6296:	69 f7       	brne	.-38     	; 0x6272 <SevenSegment_FromAToH+0x99e>
    6298:	31 cb       	rjmp	.-2462   	; 0x58fc <SevenSegment_FromAToH+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    629a:	6f 81       	ldd	r22, Y+7	; 0x07
    629c:	78 85       	ldd	r23, Y+8	; 0x08
    629e:	89 85       	ldd	r24, Y+9	; 0x09
    62a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    62a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62a6:	dc 01       	movw	r26, r24
    62a8:	cb 01       	movw	r24, r22
    62aa:	9e 83       	std	Y+6, r25	; 0x06
    62ac:	8d 83       	std	Y+5, r24	; 0x05
    62ae:	8d 81       	ldd	r24, Y+5	; 0x05
    62b0:	9e 81       	ldd	r25, Y+6	; 0x06
    62b2:	9a 83       	std	Y+2, r25	; 0x02
    62b4:	89 83       	std	Y+1, r24	; 0x01
    62b6:	89 81       	ldd	r24, Y+1	; 0x01
    62b8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ba:	01 97       	sbiw	r24, 0x01	; 1
    62bc:	f1 f7       	brne	.-4      	; 0x62ba <SevenSegment_FromAToH+0x9e6>
    62be:	9a 83       	std	Y+2, r25	; 0x02
    62c0:	89 83       	std	Y+1, r24	; 0x01
    62c2:	1c cb       	rjmp	.-2504   	; 0x58fc <SevenSegment_FromAToH+0x28>

000062c4 <main>:
#include "APP_Includes.h"


int main(void){
    62c4:	df 93       	push	r29
    62c6:	cf 93       	push	r28
    62c8:	cd b7       	in	r28, 0x3d	; 61
    62ca:	de b7       	in	r29, 0x3e	; 62
    62cc:	2f 97       	sbiw	r28, 0x0f	; 15
    62ce:	0f b6       	in	r0, 0x3f	; 63
    62d0:	f8 94       	cli
    62d2:	de bf       	out	0x3e, r29	; 62
    62d4:	0f be       	out	0x3f, r0	; 63
    62d6:	cd bf       	out	0x3d, r28	; 61
	u8 data;
	DIO_voidInit();
    62d8:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_voidInit>
	SPI_voidInit();
    62dc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <SPI_voidInit>
	
	while(1){
		SPI_u8SendResieve(5, &data);
    62e0:	9e 01       	movw	r18, r28
    62e2:	21 5f       	subi	r18, 0xF1	; 241
    62e4:	3f 4f       	sbci	r19, 0xFF	; 255
    62e6:	85 e0       	ldi	r24, 0x05	; 5
    62e8:	b9 01       	movw	r22, r18
    62ea:	0e 94 2d 0b 	call	0x165a	; 0x165a <SPI_u8SendResieve>
		if(data == 10){
    62ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    62f0:	8a 30       	cpi	r24, 0x0A	; 10
    62f2:	29 f4       	brne	.+10     	; 0x62fe <main+0x3a>
			DIO_u8SetPinValue(0, 0, 1);
    62f4:	80 e0       	ldi	r24, 0x00	; 0
    62f6:	60 e0       	ldi	r22, 0x00	; 0
    62f8:	41 e0       	ldi	r20, 0x01	; 1
    62fa:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_u8SetPinValue>
    62fe:	80 e0       	ldi	r24, 0x00	; 0
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	a0 ea       	ldi	r26, 0xA0	; 160
    6304:	b1 e4       	ldi	r27, 0x41	; 65
    6306:	8b 87       	std	Y+11, r24	; 0x0b
    6308:	9c 87       	std	Y+12, r25	; 0x0c
    630a:	ad 87       	std	Y+13, r26	; 0x0d
    630c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    630e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6310:	7c 85       	ldd	r23, Y+12	; 0x0c
    6312:	8d 85       	ldd	r24, Y+13	; 0x0d
    6314:	9e 85       	ldd	r25, Y+14	; 0x0e
    6316:	20 e0       	ldi	r18, 0x00	; 0
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	4a e7       	ldi	r20, 0x7A	; 122
    631c:	55 e4       	ldi	r21, 0x45	; 69
    631e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6322:	dc 01       	movw	r26, r24
    6324:	cb 01       	movw	r24, r22
    6326:	8f 83       	std	Y+7, r24	; 0x07
    6328:	98 87       	std	Y+8, r25	; 0x08
    632a:	a9 87       	std	Y+9, r26	; 0x09
    632c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    632e:	6f 81       	ldd	r22, Y+7	; 0x07
    6330:	78 85       	ldd	r23, Y+8	; 0x08
    6332:	89 85       	ldd	r24, Y+9	; 0x09
    6334:	9a 85       	ldd	r25, Y+10	; 0x0a
    6336:	20 e0       	ldi	r18, 0x00	; 0
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	40 e8       	ldi	r20, 0x80	; 128
    633c:	5f e3       	ldi	r21, 0x3F	; 63
    633e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6342:	88 23       	and	r24, r24
    6344:	2c f4       	brge	.+10     	; 0x6350 <main+0x8c>
		__ticks = 1;
    6346:	81 e0       	ldi	r24, 0x01	; 1
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	9e 83       	std	Y+6, r25	; 0x06
    634c:	8d 83       	std	Y+5, r24	; 0x05
    634e:	3f c0       	rjmp	.+126    	; 0x63ce <main+0x10a>
	else if (__tmp > 65535)
    6350:	6f 81       	ldd	r22, Y+7	; 0x07
    6352:	78 85       	ldd	r23, Y+8	; 0x08
    6354:	89 85       	ldd	r24, Y+9	; 0x09
    6356:	9a 85       	ldd	r25, Y+10	; 0x0a
    6358:	20 e0       	ldi	r18, 0x00	; 0
    635a:	3f ef       	ldi	r19, 0xFF	; 255
    635c:	4f e7       	ldi	r20, 0x7F	; 127
    635e:	57 e4       	ldi	r21, 0x47	; 71
    6360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6364:	18 16       	cp	r1, r24
    6366:	4c f5       	brge	.+82     	; 0x63ba <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6368:	6b 85       	ldd	r22, Y+11	; 0x0b
    636a:	7c 85       	ldd	r23, Y+12	; 0x0c
    636c:	8d 85       	ldd	r24, Y+13	; 0x0d
    636e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6370:	20 e0       	ldi	r18, 0x00	; 0
    6372:	30 e0       	ldi	r19, 0x00	; 0
    6374:	40 e2       	ldi	r20, 0x20	; 32
    6376:	51 e4       	ldi	r21, 0x41	; 65
    6378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    637c:	dc 01       	movw	r26, r24
    637e:	cb 01       	movw	r24, r22
    6380:	bc 01       	movw	r22, r24
    6382:	cd 01       	movw	r24, r26
    6384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6388:	dc 01       	movw	r26, r24
    638a:	cb 01       	movw	r24, r22
    638c:	9e 83       	std	Y+6, r25	; 0x06
    638e:	8d 83       	std	Y+5, r24	; 0x05
    6390:	0f c0       	rjmp	.+30     	; 0x63b0 <main+0xec>
    6392:	80 e9       	ldi	r24, 0x90	; 144
    6394:	91 e0       	ldi	r25, 0x01	; 1
    6396:	9c 83       	std	Y+4, r25	; 0x04
    6398:	8b 83       	std	Y+3, r24	; 0x03
    639a:	8b 81       	ldd	r24, Y+3	; 0x03
    639c:	9c 81       	ldd	r25, Y+4	; 0x04
    639e:	01 97       	sbiw	r24, 0x01	; 1
    63a0:	f1 f7       	brne	.-4      	; 0x639e <main+0xda>
    63a2:	9c 83       	std	Y+4, r25	; 0x04
    63a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63a6:	8d 81       	ldd	r24, Y+5	; 0x05
    63a8:	9e 81       	ldd	r25, Y+6	; 0x06
    63aa:	01 97       	sbiw	r24, 0x01	; 1
    63ac:	9e 83       	std	Y+6, r25	; 0x06
    63ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63b0:	8d 81       	ldd	r24, Y+5	; 0x05
    63b2:	9e 81       	ldd	r25, Y+6	; 0x06
    63b4:	00 97       	sbiw	r24, 0x00	; 0
    63b6:	69 f7       	brne	.-38     	; 0x6392 <main+0xce>
    63b8:	93 cf       	rjmp	.-218    	; 0x62e0 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63ba:	6f 81       	ldd	r22, Y+7	; 0x07
    63bc:	78 85       	ldd	r23, Y+8	; 0x08
    63be:	89 85       	ldd	r24, Y+9	; 0x09
    63c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    63c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63c6:	dc 01       	movw	r26, r24
    63c8:	cb 01       	movw	r24, r22
    63ca:	9e 83       	std	Y+6, r25	; 0x06
    63cc:	8d 83       	std	Y+5, r24	; 0x05
    63ce:	8d 81       	ldd	r24, Y+5	; 0x05
    63d0:	9e 81       	ldd	r25, Y+6	; 0x06
    63d2:	9a 83       	std	Y+2, r25	; 0x02
    63d4:	89 83       	std	Y+1, r24	; 0x01
    63d6:	89 81       	ldd	r24, Y+1	; 0x01
    63d8:	9a 81       	ldd	r25, Y+2	; 0x02
    63da:	01 97       	sbiw	r24, 0x01	; 1
    63dc:	f1 f7       	brne	.-4      	; 0x63da <main+0x116>
    63de:	9a 83       	std	Y+2, r25	; 0x02
    63e0:	89 83       	std	Y+1, r24	; 0x01
    63e2:	7e cf       	rjmp	.-260    	; 0x62e0 <main+0x1c>

000063e4 <__divmodhi4>:
    63e4:	97 fb       	bst	r25, 7
    63e6:	09 2e       	mov	r0, r25
    63e8:	07 26       	eor	r0, r23
    63ea:	0a d0       	rcall	.+20     	; 0x6400 <__divmodhi4_neg1>
    63ec:	77 fd       	sbrc	r23, 7
    63ee:	04 d0       	rcall	.+8      	; 0x63f8 <__divmodhi4_neg2>
    63f0:	2e d0       	rcall	.+92     	; 0x644e <__udivmodhi4>
    63f2:	06 d0       	rcall	.+12     	; 0x6400 <__divmodhi4_neg1>
    63f4:	00 20       	and	r0, r0
    63f6:	1a f4       	brpl	.+6      	; 0x63fe <__divmodhi4_exit>

000063f8 <__divmodhi4_neg2>:
    63f8:	70 95       	com	r23
    63fa:	61 95       	neg	r22
    63fc:	7f 4f       	sbci	r23, 0xFF	; 255

000063fe <__divmodhi4_exit>:
    63fe:	08 95       	ret

00006400 <__divmodhi4_neg1>:
    6400:	f6 f7       	brtc	.-4      	; 0x63fe <__divmodhi4_exit>
    6402:	90 95       	com	r25
    6404:	81 95       	neg	r24
    6406:	9f 4f       	sbci	r25, 0xFF	; 255
    6408:	08 95       	ret

0000640a <__udivmodsi4>:
    640a:	a1 e2       	ldi	r26, 0x21	; 33
    640c:	1a 2e       	mov	r1, r26
    640e:	aa 1b       	sub	r26, r26
    6410:	bb 1b       	sub	r27, r27
    6412:	fd 01       	movw	r30, r26
    6414:	0d c0       	rjmp	.+26     	; 0x6430 <__udivmodsi4_ep>

00006416 <__udivmodsi4_loop>:
    6416:	aa 1f       	adc	r26, r26
    6418:	bb 1f       	adc	r27, r27
    641a:	ee 1f       	adc	r30, r30
    641c:	ff 1f       	adc	r31, r31
    641e:	a2 17       	cp	r26, r18
    6420:	b3 07       	cpc	r27, r19
    6422:	e4 07       	cpc	r30, r20
    6424:	f5 07       	cpc	r31, r21
    6426:	20 f0       	brcs	.+8      	; 0x6430 <__udivmodsi4_ep>
    6428:	a2 1b       	sub	r26, r18
    642a:	b3 0b       	sbc	r27, r19
    642c:	e4 0b       	sbc	r30, r20
    642e:	f5 0b       	sbc	r31, r21

00006430 <__udivmodsi4_ep>:
    6430:	66 1f       	adc	r22, r22
    6432:	77 1f       	adc	r23, r23
    6434:	88 1f       	adc	r24, r24
    6436:	99 1f       	adc	r25, r25
    6438:	1a 94       	dec	r1
    643a:	69 f7       	brne	.-38     	; 0x6416 <__udivmodsi4_loop>
    643c:	60 95       	com	r22
    643e:	70 95       	com	r23
    6440:	80 95       	com	r24
    6442:	90 95       	com	r25
    6444:	9b 01       	movw	r18, r22
    6446:	ac 01       	movw	r20, r24
    6448:	bd 01       	movw	r22, r26
    644a:	cf 01       	movw	r24, r30
    644c:	08 95       	ret

0000644e <__udivmodhi4>:
    644e:	aa 1b       	sub	r26, r26
    6450:	bb 1b       	sub	r27, r27
    6452:	51 e1       	ldi	r21, 0x11	; 17
    6454:	07 c0       	rjmp	.+14     	; 0x6464 <__udivmodhi4_ep>

00006456 <__udivmodhi4_loop>:
    6456:	aa 1f       	adc	r26, r26
    6458:	bb 1f       	adc	r27, r27
    645a:	a6 17       	cp	r26, r22
    645c:	b7 07       	cpc	r27, r23
    645e:	10 f0       	brcs	.+4      	; 0x6464 <__udivmodhi4_ep>
    6460:	a6 1b       	sub	r26, r22
    6462:	b7 0b       	sbc	r27, r23

00006464 <__udivmodhi4_ep>:
    6464:	88 1f       	adc	r24, r24
    6466:	99 1f       	adc	r25, r25
    6468:	5a 95       	dec	r21
    646a:	a9 f7       	brne	.-22     	; 0x6456 <__udivmodhi4_loop>
    646c:	80 95       	com	r24
    646e:	90 95       	com	r25
    6470:	bc 01       	movw	r22, r24
    6472:	cd 01       	movw	r24, r26
    6474:	08 95       	ret

00006476 <__prologue_saves__>:
    6476:	2f 92       	push	r2
    6478:	3f 92       	push	r3
    647a:	4f 92       	push	r4
    647c:	5f 92       	push	r5
    647e:	6f 92       	push	r6
    6480:	7f 92       	push	r7
    6482:	8f 92       	push	r8
    6484:	9f 92       	push	r9
    6486:	af 92       	push	r10
    6488:	bf 92       	push	r11
    648a:	cf 92       	push	r12
    648c:	df 92       	push	r13
    648e:	ef 92       	push	r14
    6490:	ff 92       	push	r15
    6492:	0f 93       	push	r16
    6494:	1f 93       	push	r17
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
    649a:	cd b7       	in	r28, 0x3d	; 61
    649c:	de b7       	in	r29, 0x3e	; 62
    649e:	ca 1b       	sub	r28, r26
    64a0:	db 0b       	sbc	r29, r27
    64a2:	0f b6       	in	r0, 0x3f	; 63
    64a4:	f8 94       	cli
    64a6:	de bf       	out	0x3e, r29	; 62
    64a8:	0f be       	out	0x3f, r0	; 63
    64aa:	cd bf       	out	0x3d, r28	; 61
    64ac:	09 94       	ijmp

000064ae <__epilogue_restores__>:
    64ae:	2a 88       	ldd	r2, Y+18	; 0x12
    64b0:	39 88       	ldd	r3, Y+17	; 0x11
    64b2:	48 88       	ldd	r4, Y+16	; 0x10
    64b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    64b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    64b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    64ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    64bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    64be:	aa 84       	ldd	r10, Y+10	; 0x0a
    64c0:	b9 84       	ldd	r11, Y+9	; 0x09
    64c2:	c8 84       	ldd	r12, Y+8	; 0x08
    64c4:	df 80       	ldd	r13, Y+7	; 0x07
    64c6:	ee 80       	ldd	r14, Y+6	; 0x06
    64c8:	fd 80       	ldd	r15, Y+5	; 0x05
    64ca:	0c 81       	ldd	r16, Y+4	; 0x04
    64cc:	1b 81       	ldd	r17, Y+3	; 0x03
    64ce:	aa 81       	ldd	r26, Y+2	; 0x02
    64d0:	b9 81       	ldd	r27, Y+1	; 0x01
    64d2:	ce 0f       	add	r28, r30
    64d4:	d1 1d       	adc	r29, r1
    64d6:	0f b6       	in	r0, 0x3f	; 63
    64d8:	f8 94       	cli
    64da:	de bf       	out	0x3e, r29	; 62
    64dc:	0f be       	out	0x3f, r0	; 63
    64de:	cd bf       	out	0x3d, r28	; 61
    64e0:	ed 01       	movw	r28, r26
    64e2:	08 95       	ret

000064e4 <_exit>:
    64e4:	f8 94       	cli

000064e6 <__stop_program>:
    64e6:	ff cf       	rjmp	.-2      	; 0x64e6 <__stop_program>
